
StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004154  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00004154  000041e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800078  00800078  00004200  2**0
                  ALLOC
  3 .stab         00004aac  00000000  00000000  00004200  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ef9  00000000  00000000  00008cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000aba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000ad05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000ae94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ced9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000dfda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ef5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000f0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000f39e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fc2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_1>
       8:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__vector_2>
       c:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__vector_10>
      2c:	0c 94 77 07 	jmp	0xeee	; 0xeee <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a9 1b 	call	0x3752	; 0x3752 <main>
      8a:	0c 94 a8 20 	jmp	0x4150	; 0x4150 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8d 20 	jmp	0x411a	; 0x411a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 99 20 	jmp	0x4132	; 0x4132 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 99 20 	jmp	0x4132	; 0x4132 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8d 20 	jmp	0x411a	; 0x411a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 95 20 	jmp	0x412a	; 0x412a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 99 20 	jmp	0x4132	; 0x4132 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 99 20 	jmp	0x4132	; 0x4132 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 99 20 	jmp	0x4132	; 0x4132 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 81 20 	jmp	0x4102	; 0x4102 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 9d 20 	jmp	0x413a	; 0x413a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TMR0_Init>:
#include "TMR0_interface.h"
/*      Used in CallBack Functions      */
static void (*TMR0_OvfCallbackFuncPTR)(void) = NULLPTR;
static void (*TMR0_CTCCallbackFuncPTR)(void) = NULLPTR;

ES_t TMR0_Init(TMR0_t *Copy_Timer0){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <TMR0_Init+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9b 83       	std	Y+3, r25	; 0x03
     cac:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
     cae:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_Timer0 == NULLPTR){
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	9b 81       	ldd	r25, Y+3	; 0x03
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	19 f4       	brne	.+6      	; 0xcbe <TMR0_Init+0x20>
        Local_enuErrorstate = ES_NULL_POINTER;
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	89 83       	std	Y+1, r24	; 0x01
     cbc:	9e c0       	rjmp	.+316    	; 0xdfa <TMR0_Init+0x15c>
    }
    else{
    /*      Choose Mode     */
    if(Copy_Timer0->TIMER0_Mode == NORMAL_MODE){
     cbe:	ea 81       	ldd	r30, Y+2	; 0x02
     cc0:	fb 81       	ldd	r31, Y+3	; 0x03
     cc2:	80 81       	ld	r24, Z
     cc4:	88 23       	and	r24, r24
     cc6:	b1 f4       	brne	.+44     	; 0xcf4 <TMR0_Init+0x56>
                
        CHOOSE_NORMAL_MODE();
     cc8:	a3 e5       	ldi	r26, 0x53	; 83
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e3 e5       	ldi	r30, 0x53	; 83
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8f 7b       	andi	r24, 0xBF	; 191
     cd4:	8c 93       	st	X, r24
     cd6:	a3 e5       	ldi	r26, 0x53	; 83
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e3 e5       	ldi	r30, 0x53	; 83
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	87 7f       	andi	r24, 0xF7	; 247
     ce2:	8c 93       	st	X, r24
        /*Timer Over flow flag Enable*/
	    TMR0_OVF_INTERRUPT_EN();
     ce4:	a9 e5       	ldi	r26, 0x59	; 89
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e9 e5       	ldi	r30, 0x59	; 89
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	81 60       	ori	r24, 0x01	; 1
     cf0:	8c 93       	st	X, r24
     cf2:	70 c0       	rjmp	.+224    	; 0xdd4 <TMR0_Init+0x136>
    }
    else if(Copy_Timer0->TIMER0_Mode == CTC_MODE){
     cf4:	ea 81       	ldd	r30, Y+2	; 0x02
     cf6:	fb 81       	ldd	r31, Y+3	; 0x03
     cf8:	80 81       	ld	r24, Z
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	e1 f4       	brne	.+56     	; 0xd36 <TMR0_Init+0x98>
        CHOOSE_CTC_MODE();
     cfe:	a3 e5       	ldi	r26, 0x53	; 83
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e3 e5       	ldi	r30, 0x53	; 83
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8f 7b       	andi	r24, 0xBF	; 191
     d0a:	8c 93       	st	X, r24
     d0c:	a3 e5       	ldi	r26, 0x53	; 83
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e3 e5       	ldi	r30, 0x53	; 83
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	88 60       	ori	r24, 0x08	; 8
     d18:	8c 93       	st	X, r24
        /*OUTPUT COMPARE MATCH INTERRUPT ENABLE*/
	    TMR0_CTC_INTERRUPT_EN();
     d1a:	a9 e5       	ldi	r26, 0x59	; 89
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e9 e5       	ldi	r30, 0x59	; 89
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	82 60       	ori	r24, 0x02	; 2
     d26:	8c 93       	st	X, r24
        /*Set compare match value*/
        OCR0 = Copy_Timer0->TMR0_OCR0;
     d28:	ac e5       	ldi	r26, 0x5C	; 92
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ea 81       	ldd	r30, Y+2	; 0x02
     d2e:	fb 81       	ldd	r31, Y+3	; 0x03
     d30:	82 81       	ldd	r24, Z+2	; 0x02
     d32:	8c 93       	st	X, r24
     d34:	4f c0       	rjmp	.+158    	; 0xdd4 <TMR0_Init+0x136>
    }
    else if(Copy_Timer0->TIMER0_Mode == PHASE_CORRECT_PWM){
     d36:	ea 81       	ldd	r30, Y+2	; 0x02
     d38:	fb 81       	ldd	r31, Y+3	; 0x03
     d3a:	80 81       	ld	r24, Z
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	19 f5       	brne	.+70     	; 0xd86 <TMR0_Init+0xe8>
        CHOOSE_PHASE_CORRECT_PWM();
     d40:	a3 e5       	ldi	r26, 0x53	; 83
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e3 e5       	ldi	r30, 0x53	; 83
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	80 64       	ori	r24, 0x40	; 64
     d4c:	8c 93       	st	X, r24
     d4e:	a3 e5       	ldi	r26, 0x53	; 83
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e3 e5       	ldi	r30, 0x53	; 83
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	87 7f       	andi	r24, 0xF7	; 247
     d5a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0,TCCR0_COM01);
        #elif PHASE_PWM_MODE == PHASE_PWM_CLR_ON_RISING       //Inverting
            CLR_BIT(TCCR0,TCCR0_COM00);
            SET_BIT(TCCR0,TCCR0_COM01);
        #elif PHASE_PWM_MODE == PHASE_PWM_SET_ON_RISING      //Non Inverting
            SET_BIT(TCCR0,TCCR0_COM00);
     d5c:	a3 e5       	ldi	r26, 0x53	; 83
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e3 e5       	ldi	r30, 0x53	; 83
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	80 61       	ori	r24, 0x10	; 16
     d68:	8c 93       	st	X, r24
            SET_BIT(TCCR0,TCCR0_COM01);
     d6a:	a3 e5       	ldi	r26, 0x53	; 83
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e3 e5       	ldi	r30, 0x53	; 83
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	80 62       	ori	r24, 0x20	; 32
     d76:	8c 93       	st	X, r24
        #endif
        OCR0 = Copy_Timer0->TMR0_OCR0;
     d78:	ac e5       	ldi	r26, 0x5C	; 92
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	ea 81       	ldd	r30, Y+2	; 0x02
     d7e:	fb 81       	ldd	r31, Y+3	; 0x03
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	8c 93       	st	X, r24
     d84:	27 c0       	rjmp	.+78     	; 0xdd4 <TMR0_Init+0x136>
        /*TODO: */
    }
    else if(Copy_Timer0->TIMER0_Mode == FAST_PWM){
     d86:	ea 81       	ldd	r30, Y+2	; 0x02
     d88:	fb 81       	ldd	r31, Y+3	; 0x03
     d8a:	80 81       	ld	r24, Z
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	11 f5       	brne	.+68     	; 0xdd4 <TMR0_Init+0x136>
        CHOOSE_FAST_PWM();
     d90:	a3 e5       	ldi	r26, 0x53	; 83
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e3 e5       	ldi	r30, 0x53	; 83
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	80 64       	ori	r24, 0x40	; 64
     d9c:	8c 93       	st	X, r24
     d9e:	a3 e5       	ldi	r26, 0x53	; 83
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e3 e5       	ldi	r30, 0x53	; 83
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	88 60       	ori	r24, 0x08	; 8
     daa:	8c 93       	st	X, r24
            CLR_BIT(TCCR0,TCCR0_COM01);
        #elif FAST_PWM_MODE == FAST_PWM_CLR_ON_COMPARE       //Inverting
            CLR_BIT(TCCR0,TCCR0_COM00);
            SET_BIT(TCCR0,TCCR0_COM01);
        #elif FAST_PWM_MODE == FAST_PWM_SET_ON_COMPARE      //Non Inverting
            SET_BIT(TCCR0,TCCR0_COM00);
     dac:	a3 e5       	ldi	r26, 0x53	; 83
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e3 e5       	ldi	r30, 0x53	; 83
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	80 61       	ori	r24, 0x10	; 16
     db8:	8c 93       	st	X, r24
            SET_BIT(TCCR0,TCCR0_COM01);
     dba:	a3 e5       	ldi	r26, 0x53	; 83
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e3 e5       	ldi	r30, 0x53	; 83
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	80 62       	ori	r24, 0x20	; 32
     dc6:	8c 93       	st	X, r24
        #endif
        OCR0 = Copy_Timer0->TMR0_OCR0;
     dc8:	ac e5       	ldi	r26, 0x5C	; 92
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	ea 81       	ldd	r30, Y+2	; 0x02
     dce:	fb 81       	ldd	r31, Y+3	; 0x03
     dd0:	82 81       	ldd	r24, Z+2	; 0x02
     dd2:	8c 93       	st	X, r24
    }
    /*      Clock Select    */
    TMR0_CLK_MASK();
     dd4:	a3 e5       	ldi	r26, 0x53	; 83
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e3 e5       	ldi	r30, 0x53	; 83
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	88 7f       	andi	r24, 0xF8	; 248
     de0:	8c 93       	st	X, r24
    TMR0_CLK_SELECT(Copy_Timer0->TIMER0_Prescaler);
     de2:	a3 e5       	ldi	r26, 0x53	; 83
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e3 e5       	ldi	r30, 0x53	; 83
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	90 81       	ld	r25, Z
     dec:	ea 81       	ldd	r30, Y+2	; 0x02
     dee:	fb 81       	ldd	r31, Y+3	; 0x03
     df0:	81 81       	ldd	r24, Z+1	; 0x01
     df2:	89 2b       	or	r24, r25
     df4:	8c 93       	st	X, r24
    /*      */
    Local_enuErrorstate = ES_OK;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorstate;
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <TMR0_OvfSetCallBack>:

ES_t TMR0_OvfSetCallBack(TMR0_t *Copy_Timer0){
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <TMR0_OvfSetCallBack+0x6>
     e0e:	0f 92       	push	r0
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	9b 83       	std	Y+3, r25	; 0x03
     e16:	8a 83       	std	Y+2, r24	; 0x02
    	ES_t Local_enuErrorstate = ES_NOK;
     e18:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_Timer0 == NULLPTR){
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	9b 81       	ldd	r25, Y+3	; 0x03
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	19 f4       	brne	.+6      	; 0xe28 <TMR0_OvfSetCallBack+0x20>
        Local_enuErrorstate = ES_NULL_POINTER;
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	0a c0       	rjmp	.+20     	; 0xe3c <TMR0_OvfSetCallBack+0x34>
    }
    else{
        TMR0_OvfCallbackFuncPTR = Copy_Timer0->ActionFunction;
     e28:	ea 81       	ldd	r30, Y+2	; 0x02
     e2a:	fb 81       	ldd	r31, Y+3	; 0x03
     e2c:	83 81       	ldd	r24, Z+3	; 0x03
     e2e:	94 81       	ldd	r25, Z+4	; 0x04
     e30:	90 93 79 00 	sts	0x0079, r25
     e34:	80 93 78 00 	sts	0x0078, r24
        Local_enuErrorstate = ES_OK;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorstate;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <TMR0_CTCSetCallBack>:

ES_t TMR0_CTCSetCallBack(TMR0_t *Copy_Timer0){
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <TMR0_CTCSetCallBack+0x6>
     e50:	0f 92       	push	r0
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	9b 83       	std	Y+3, r25	; 0x03
     e58:	8a 83       	std	Y+2, r24	; 0x02
    	ES_t Local_enuErrorstate = ES_NOK;
     e5a:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_Timer0 == NULLPTR){
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	9b 81       	ldd	r25, Y+3	; 0x03
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	19 f4       	brne	.+6      	; 0xe6a <TMR0_CTCSetCallBack+0x20>
        Local_enuErrorstate = ES_NULL_POINTER;
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	89 83       	std	Y+1, r24	; 0x01
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <TMR0_CTCSetCallBack+0x34>
    }
    else{
        TMR0_CTCCallbackFuncPTR = Copy_Timer0->ActionFunction;
     e6a:	ea 81       	ldd	r30, Y+2	; 0x02
     e6c:	fb 81       	ldd	r31, Y+3	; 0x03
     e6e:	83 81       	ldd	r24, Z+3	; 0x03
     e70:	94 81       	ldd	r25, Z+4	; 0x04
     e72:	90 93 7b 00 	sts	0x007B, r25
     e76:	80 93 7a 00 	sts	0x007A, r24
        Local_enuErrorstate = ES_OK;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorstate;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <TMR0_CTCInterruptEnable>:

ES_t TMR0_CTCInterruptEnable(void){
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
	TMR0_CTC_INTERRUPT_EN();
     e94:	a9 e5       	ldi	r26, 0x59	; 89
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e9 e5       	ldi	r30, 0x59	; 89
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	82 60       	ori	r24, 0x02	; 2
     ea0:	8c 93       	st	X, r24
	return ES_OK;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
}
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <TMR0_CTCInterruptDisable>:
ES_t TMR0_CTCInterruptDisable(void){
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	TMR0_CTC_INTERRUPT_DIS();
     eb2:	a9 e5       	ldi	r26, 0x59	; 89
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e9 e5       	ldi	r30, 0x59	; 89
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8d 7f       	andi	r24, 0xFD	; 253
     ebe:	8c 93       	st	X, r24
	return ES_OK;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
}
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <TMR0_SetDutyCycle>:

ES_t TMR0_SetDutyCycle(u8 Copy_u8DutyCycle){
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	00 d0       	rcall	.+0      	; 0xece <TMR0_SetDutyCycle+0x6>
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_enuErrorstate = ES_NOK;
     ed4:	19 82       	std	Y+1, r1	; 0x01
    OCR0 = Copy_u8DutyCycle;
     ed6:	ec e5       	ldi	r30, 0x5C	; 92
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	80 83       	st	Z, r24
    Local_enuErrorstate = ES_OK;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	89 83       	std	Y+1, r24	; 0x01
    return Local_enuErrorstate;
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <__vector_11>:

//OVF ISR
ISR(__vector_11){
     eee:	1f 92       	push	r1
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	0f 92       	push	r0
     ef6:	11 24       	eor	r1, r1
     ef8:	2f 93       	push	r18
     efa:	3f 93       	push	r19
     efc:	4f 93       	push	r20
     efe:	5f 93       	push	r21
     f00:	6f 93       	push	r22
     f02:	7f 93       	push	r23
     f04:	8f 93       	push	r24
     f06:	9f 93       	push	r25
     f08:	af 93       	push	r26
     f0a:	bf 93       	push	r27
     f0c:	ef 93       	push	r30
     f0e:	ff 93       	push	r31
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
    if(TMR0_OvfCallbackFuncPTR == NULLPTR){
     f18:	80 91 78 00 	lds	r24, 0x0078
     f1c:	90 91 79 00 	lds	r25, 0x0079
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	29 f0       	breq	.+10     	; 0xf2e <__vector_11+0x40>
        /*  Do Nothing  */
    }
    else{
    TMR0_OvfCallbackFuncPTR();
     f24:	e0 91 78 00 	lds	r30, 0x0078
     f28:	f0 91 79 00 	lds	r31, 0x0079
     f2c:	09 95       	icall
    }
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	ff 91       	pop	r31
     f34:	ef 91       	pop	r30
     f36:	bf 91       	pop	r27
     f38:	af 91       	pop	r26
     f3a:	9f 91       	pop	r25
     f3c:	8f 91       	pop	r24
     f3e:	7f 91       	pop	r23
     f40:	6f 91       	pop	r22
     f42:	5f 91       	pop	r21
     f44:	4f 91       	pop	r20
     f46:	3f 91       	pop	r19
     f48:	2f 91       	pop	r18
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0
     f50:	1f 90       	pop	r1
     f52:	18 95       	reti

00000f54 <__vector_10>:
//CTC ISR
ISR(__vector_10){
     f54:	1f 92       	push	r1
     f56:	0f 92       	push	r0
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	0f 92       	push	r0
     f5c:	11 24       	eor	r1, r1
     f5e:	2f 93       	push	r18
     f60:	3f 93       	push	r19
     f62:	4f 93       	push	r20
     f64:	5f 93       	push	r21
     f66:	6f 93       	push	r22
     f68:	7f 93       	push	r23
     f6a:	8f 93       	push	r24
     f6c:	9f 93       	push	r25
     f6e:	af 93       	push	r26
     f70:	bf 93       	push	r27
     f72:	ef 93       	push	r30
     f74:	ff 93       	push	r31
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
    if(TMR0_CTCCallbackFuncPTR == NULLPTR){
     f7e:	80 91 7a 00 	lds	r24, 0x007A
     f82:	90 91 7b 00 	lds	r25, 0x007B
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	29 f0       	breq	.+10     	; 0xf94 <__vector_10+0x40>
        /*  Do Nothing  */
    }
    else{
    TMR0_CTCCallbackFuncPTR();
     f8a:	e0 91 7a 00 	lds	r30, 0x007A
     f8e:	f0 91 7b 00 	lds	r31, 0x007B
     f92:	09 95       	icall
    }
}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	ff 91       	pop	r31
     f9a:	ef 91       	pop	r30
     f9c:	bf 91       	pop	r27
     f9e:	af 91       	pop	r26
     fa0:	9f 91       	pop	r25
     fa2:	8f 91       	pop	r24
     fa4:	7f 91       	pop	r23
     fa6:	6f 91       	pop	r22
     fa8:	5f 91       	pop	r21
     faa:	4f 91       	pop	r20
     fac:	3f 91       	pop	r19
     fae:	2f 91       	pop	r18
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <PORT_Init>:
*@brief Initializes the PORT peripheral.
This function configures the direction and initial values of the PORTA, PORTB, PORTC, and PORTD registers.
*@return ES_t Returns ES_OK if the initialization was successful, otherwise ES_NOK.
*/
ES_t PORT_Init(void)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	0f 92       	push	r0
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
   ES_t Local_enuErrorstate = ES_NOK;
     fc4:	19 82       	std	Y+1, r1	; 0x01
	/*DIRECTION*/
   DDRA_REG = PORTA_DIR ;
     fc6:	ea e3       	ldi	r30, 0x3A	; 58
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	8f e3       	ldi	r24, 0x3F	; 63
     fcc:	80 83       	st	Z, r24
   DDRB_REG = PORTB_DIR ;
     fce:	e7 e3       	ldi	r30, 0x37	; 55
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	10 82       	st	Z, r1
   DDRC_REG = PORTC_DIR ;
     fd4:	e4 e3       	ldi	r30, 0x34	; 52
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	10 82       	st	Z, r1
   DDRD_REG = PORTD_DIR ;
     fda:	e1 e3       	ldi	r30, 0x31	; 49
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	10 82       	st	Z, r1
   /*INITIAL VALUE*/
   PORTA_REG = PORTA_VALUE ;
     fe0:	eb e3       	ldi	r30, 0x3B	; 59
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	10 82       	st	Z, r1
   PORTB_REG = PORTB_VALUE ;
     fe6:	e8 e3       	ldi	r30, 0x38	; 56
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	84 e0       	ldi	r24, 0x04	; 4
     fec:	80 83       	st	Z, r24
   PORTC_REG = PORTC_VALUE ;
     fee:	e5 e3       	ldi	r30, 0x35	; 53
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	10 82       	st	Z, r1
   PORTD_REG = PORTD_VALUE ;
     ff4:	e2 e3       	ldi	r30, 0x32	; 50
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	8c e0       	ldi	r24, 0x0C	; 12
     ffa:	80 83       	st	Z, r24

   Local_enuErrorstate = ES_OK;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    1000:	89 81       	ldd	r24, Y+1	; 0x01

}
    1002:	0f 90       	pop	r0
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <GIE_Enable>:
/****************************************************************************************/

#include "GIE_interface.h"


ES_t GIE_Enable(void){
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	0f 92       	push	r0
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1014:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(SREG,SREG_GIE);
    1016:	af e5       	ldi	r26, 0x5F	; 95
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	ef e5       	ldi	r30, 0x5F	; 95
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	80 68       	ori	r24, 0x80	; 128
    1022:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
}
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <GIE_Disable>:

ES_t GIE_Disable(void){
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    103c:	19 82       	std	Y+1, r1	; 0x01
	CLR_BIT(SREG,SREG_GIE);
    103e:	af e5       	ldi	r26, 0x5F	; 95
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ef e5       	ldi	r30, 0x5F	; 95
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8f 77       	andi	r24, 0x7F	; 127
    104a:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
}
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <EXTI_INT0Init>:
static void (*INT2_FunctionPointer) (void) = NULLPTR;



/*		External Interrupt 0 APIs   	*/
ES_t EXTI_INT0Init(u8 Local_u8Sense){
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <EXTI_INT0Init+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <EXTI_INT0Init+0x8>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1068:	19 82       	std	Y+1, r1	; 0x01
	/*Select Sense Control*/
	if(Local_u8Sense <= 3){
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	84 30       	cpi	r24, 0x04	; 4
    106e:	08 f0       	brcs	.+2      	; 0x1072 <EXTI_INT0Init+0x18>
    1070:	5d c0       	rjmp	.+186    	; 0x112c <EXTI_INT0Init+0xd2>

	switch(Local_u8Sense){
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	3c 83       	std	Y+4, r19	; 0x04
    107a:	2b 83       	std	Y+3, r18	; 0x03
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	91 05       	cpc	r25, r1
    1084:	21 f1       	breq	.+72     	; 0x10ce <EXTI_INT0Init+0x74>
    1086:	2b 81       	ldd	r18, Y+3	; 0x03
    1088:	3c 81       	ldd	r19, Y+4	; 0x04
    108a:	22 30       	cpi	r18, 0x02	; 2
    108c:	31 05       	cpc	r19, r1
    108e:	2c f4       	brge	.+10     	; 0x109a <EXTI_INT0Init+0x40>
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	61 f0       	breq	.+24     	; 0x10b0 <EXTI_INT0Init+0x56>
    1098:	46 c0       	rjmp	.+140    	; 0x1126 <EXTI_INT0Init+0xcc>
    109a:	2b 81       	ldd	r18, Y+3	; 0x03
    109c:	3c 81       	ldd	r19, Y+4	; 0x04
    109e:	22 30       	cpi	r18, 0x02	; 2
    10a0:	31 05       	cpc	r19, r1
    10a2:	21 f1       	breq	.+72     	; 0x10ec <EXTI_INT0Init+0x92>
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	9c 81       	ldd	r25, Y+4	; 0x04
    10a8:	83 30       	cpi	r24, 0x03	; 3
    10aa:	91 05       	cpc	r25, r1
    10ac:	71 f1       	breq	.+92     	; 0x110a <EXTI_INT0Init+0xb0>
    10ae:	3b c0       	rjmp	.+118    	; 0x1126 <EXTI_INT0Init+0xcc>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    10b0:	a5 e5       	ldi	r26, 0x55	; 85
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e5 e5       	ldi	r30, 0x55	; 85
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	8e 7f       	andi	r24, 0xFE	; 254
    10bc:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    10be:	a5 e5       	ldi	r26, 0x55	; 85
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e5 e5       	ldi	r30, 0x55	; 85
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	8d 7f       	andi	r24, 0xFD	; 253
    10ca:	8c 93       	st	X, r24
    10cc:	2c c0       	rjmp	.+88     	; 0x1126 <EXTI_INT0Init+0xcc>
			break;
		case ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    10ce:	a5 e5       	ldi	r26, 0x55	; 85
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e5 e5       	ldi	r30, 0x55	; 85
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	81 60       	ori	r24, 0x01	; 1
    10da:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    10dc:	a5 e5       	ldi	r26, 0x55	; 85
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e5 e5       	ldi	r30, 0x55	; 85
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	8d 7f       	andi	r24, 0xFD	; 253
    10e8:	8c 93       	st	X, r24
    10ea:	1d c0       	rjmp	.+58     	; 0x1126 <EXTI_INT0Init+0xcc>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    10ec:	a5 e5       	ldi	r26, 0x55	; 85
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e5 e5       	ldi	r30, 0x55	; 85
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	8e 7f       	andi	r24, 0xFE	; 254
    10f8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    10fa:	a5 e5       	ldi	r26, 0x55	; 85
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e5 e5       	ldi	r30, 0x55	; 85
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	82 60       	ori	r24, 0x02	; 2
    1106:	8c 93       	st	X, r24
    1108:	0e c0       	rjmp	.+28     	; 0x1126 <EXTI_INT0Init+0xcc>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    110a:	a5 e5       	ldi	r26, 0x55	; 85
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e5 e5       	ldi	r30, 0x55	; 85
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	81 60       	ori	r24, 0x01	; 1
    1116:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    1118:	a5 e5       	ldi	r26, 0x55	; 85
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e5 e5       	ldi	r30, 0x55	; 85
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	82 60       	ori	r24, 0x02	; 2
    1124:	8c 93       	st	X, r24
			break;
		}
			Local_enuErrorstate = ES_OK;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <EXTI_INT0Init+0xd6>
	}
	else{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Peripheral Interrupt Enable*/
	SET_BIT(GICR,GICR_INT0);
    1130:	ab e5       	ldi	r26, 0x5B	; 91
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	eb e5       	ldi	r30, 0x5B	; 91
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	80 64       	ori	r24, 0x40	; 64
    113c:	8c 93       	st	X, r24
	return Local_enuErrorstate;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <EXTI_u8INT0Status>:

ES_t   EXTI_u8INT0Status(u8 *Copy_u8Status){
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <EXTI_u8INT0Status+0x6>
    1154:	0f 92       	push	r0
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	9b 83       	std	Y+3, r25	; 0x03
    115c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    115e:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(GIFR,GIFR_INTF0) == 1){
    1160:	ea e5       	ldi	r30, 0x5A	; 90
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	82 95       	swap	r24
    1168:	86 95       	lsr	r24
    116a:	86 95       	lsr	r24
    116c:	83 70       	andi	r24, 0x03	; 3
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	81 70       	andi	r24, 0x01	; 1
    1174:	90 70       	andi	r25, 0x00	; 0
    1176:	88 23       	and	r24, r24
    1178:	31 f0       	breq	.+12     	; 0x1186 <EXTI_u8INT0Status+0x38>
		*Copy_u8Status = INTERRUPT_TRIGGERED;
    117a:	ea 81       	ldd	r30, Y+2	; 0x02
    117c:	fb 81       	ldd	r31, Y+3	; 0x03
    117e:	10 82       	st	Z, r1
		Local_enuErrorstate = ES_OK;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	13 c0       	rjmp	.+38     	; 0x11ac <EXTI_u8INT0Status+0x5e>
	}
	else if(GET_BIT(GIFR,GIFR_INTF0) == 0){
    1186:	ea e5       	ldi	r30, 0x5A	; 90
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	82 95       	swap	r24
    118e:	86 95       	lsr	r24
    1190:	86 95       	lsr	r24
    1192:	83 70       	andi	r24, 0x03	; 3
    1194:	88 2f       	mov	r24, r24
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	81 70       	andi	r24, 0x01	; 1
    119a:	90 70       	andi	r25, 0x00	; 0
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	31 f4       	brne	.+12     	; 0x11ac <EXTI_u8INT0Status+0x5e>
		*Copy_u8Status = INTERRUPT_NOT_TRIGGERED;
    11a0:	ea 81       	ldd	r30, Y+2	; 0x02
    11a2:	fb 81       	ldd	r31, Y+3	; 0x03
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	80 83       	st	Z, r24
		Local_enuErrorstate = ES_OK;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <EXTI_SetCallBackINT0>:

ES_t EXTI_SetCallBackINT0( void(*LocalPtr)(void) ){
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <EXTI_SetCallBackINT0+0x6>
    11c0:	0f 92       	push	r0
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	9b 83       	std	Y+3, r25	; 0x03
    11c8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    11ca:	19 82       	std	Y+1, r1	; 0x01
	if(LocalPtr != NULLPTR){
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	9b 81       	ldd	r25, Y+3	; 0x03
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	49 f0       	breq	.+18     	; 0x11e6 <EXTI_SetCallBackINT0+0x2c>
	INT0_FunctionPointer = LocalPtr;
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	9b 81       	ldd	r25, Y+3	; 0x03
    11d8:	90 93 7d 00 	sts	0x007D, r25
    11dc:	80 93 7c 00 	sts	0x007C, r24
	Local_enuErrorstate = ES_OK;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <EXTI_SetCallBackINT0+0x30>
	}
	else{
		Local_enuErrorstate = ES_NULL_POINTER;
    11e6:	82 e0       	ldi	r24, 0x02	; 2
    11e8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <__vector_1>:

ISR(__vector_1){
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	6f 93       	push	r22
    120c:	7f 93       	push	r23
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25
    1212:	af 93       	push	r26
    1214:	bf 93       	push	r27
    1216:	ef 93       	push	r30
    1218:	ff 93       	push	r31
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
	INT0_FunctionPointer();
    1222:	e0 91 7c 00 	lds	r30, 0x007C
    1226:	f0 91 7d 00 	lds	r31, 0x007D
    122a:	09 95       	icall
}
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	ff 91       	pop	r31
    1232:	ef 91       	pop	r30
    1234:	bf 91       	pop	r27
    1236:	af 91       	pop	r26
    1238:	9f 91       	pop	r25
    123a:	8f 91       	pop	r24
    123c:	7f 91       	pop	r23
    123e:	6f 91       	pop	r22
    1240:	5f 91       	pop	r21
    1242:	4f 91       	pop	r20
    1244:	3f 91       	pop	r19
    1246:	2f 91       	pop	r18
    1248:	0f 90       	pop	r0
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	0f 90       	pop	r0
    124e:	1f 90       	pop	r1
    1250:	18 95       	reti

00001252 <EXTI_INT1Init>:


/*		External Interrupt 1 APIs   	*/
ES_t EXTI_INT1Init(u8 Local_u8Sense){
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <EXTI_INT1Init+0x6>
    1258:	00 d0       	rcall	.+0      	; 0x125a <EXTI_INT1Init+0x8>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1260:	19 82       	std	Y+1, r1	; 0x01
	/*Select Sense Control*/
	if(Local_u8Sense <= 3){
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	84 30       	cpi	r24, 0x04	; 4
    1266:	08 f0       	brcs	.+2      	; 0x126a <EXTI_INT1Init+0x18>
    1268:	5d c0       	rjmp	.+186    	; 0x1324 <EXTI_INT1Init+0xd2>
	switch(Local_u8Sense){
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	3c 83       	std	Y+4, r19	; 0x04
    1272:	2b 83       	std	Y+3, r18	; 0x03
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	91 05       	cpc	r25, r1
    127c:	21 f1       	breq	.+72     	; 0x12c6 <EXTI_INT1Init+0x74>
    127e:	2b 81       	ldd	r18, Y+3	; 0x03
    1280:	3c 81       	ldd	r19, Y+4	; 0x04
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	2c f4       	brge	.+10     	; 0x1292 <EXTI_INT1Init+0x40>
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	61 f0       	breq	.+24     	; 0x12a8 <EXTI_INT1Init+0x56>
    1290:	46 c0       	rjmp	.+140    	; 0x131e <EXTI_INT1Init+0xcc>
    1292:	2b 81       	ldd	r18, Y+3	; 0x03
    1294:	3c 81       	ldd	r19, Y+4	; 0x04
    1296:	22 30       	cpi	r18, 0x02	; 2
    1298:	31 05       	cpc	r19, r1
    129a:	21 f1       	breq	.+72     	; 0x12e4 <EXTI_INT1Init+0x92>
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	91 05       	cpc	r25, r1
    12a4:	71 f1       	breq	.+92     	; 0x1302 <EXTI_INT1Init+0xb0>
    12a6:	3b c0       	rjmp	.+118    	; 0x131e <EXTI_INT1Init+0xcc>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    12a8:	a5 e5       	ldi	r26, 0x55	; 85
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e5 e5       	ldi	r30, 0x55	; 85
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8b 7f       	andi	r24, 0xFB	; 251
    12b4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    12b6:	a5 e5       	ldi	r26, 0x55	; 85
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e5 e5       	ldi	r30, 0x55	; 85
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	87 7f       	andi	r24, 0xF7	; 247
    12c2:	8c 93       	st	X, r24
    12c4:	2c c0       	rjmp	.+88     	; 0x131e <EXTI_INT1Init+0xcc>
			break;
		case ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    12c6:	a5 e5       	ldi	r26, 0x55	; 85
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e5 e5       	ldi	r30, 0x55	; 85
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	84 60       	ori	r24, 0x04	; 4
    12d2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    12d4:	a5 e5       	ldi	r26, 0x55	; 85
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e5 e5       	ldi	r30, 0x55	; 85
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	87 7f       	andi	r24, 0xF7	; 247
    12e0:	8c 93       	st	X, r24
    12e2:	1d c0       	rjmp	.+58     	; 0x131e <EXTI_INT1Init+0xcc>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    12e4:	a5 e5       	ldi	r26, 0x55	; 85
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e5 e5       	ldi	r30, 0x55	; 85
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	8b 7f       	andi	r24, 0xFB	; 251
    12f0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    12f2:	a5 e5       	ldi	r26, 0x55	; 85
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e5 e5       	ldi	r30, 0x55	; 85
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	88 60       	ori	r24, 0x08	; 8
    12fe:	8c 93       	st	X, r24
    1300:	0e c0       	rjmp	.+28     	; 0x131e <EXTI_INT1Init+0xcc>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    1302:	a5 e5       	ldi	r26, 0x55	; 85
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e5 e5       	ldi	r30, 0x55	; 85
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	84 60       	ori	r24, 0x04	; 4
    130e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    1310:	a5 e5       	ldi	r26, 0x55	; 85
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e5 e5       	ldi	r30, 0x55	; 85
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	88 60       	ori	r24, 0x08	; 8
    131c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <EXTI_INT1Init+0xd6>
	}
	else{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Peripheral Interrupt Enable*/
	SET_BIT(GICR,GICR_INT1);
    1328:	ab e5       	ldi	r26, 0x5B	; 91
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	eb e5       	ldi	r30, 0x5B	; 91
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	80 68       	ori	r24, 0x80	; 128
    1334:	8c 93       	st	X, r24
	return Local_enuErrorstate;
    1336:	89 81       	ldd	r24, Y+1	; 0x01
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <EXTI_u8INT1Status>:

ES_t EXTI_u8INT1Status(u8 *Copy_u8Status){
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <EXTI_u8INT1Status+0x6>
    134c:	0f 92       	push	r0
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	9b 83       	std	Y+3, r25	; 0x03
    1354:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1356:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(GIFR,GIFR_INTF1) == 1){
    1358:	ea e5       	ldi	r30, 0x5A	; 90
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	88 1f       	adc	r24, r24
    1360:	88 27       	eor	r24, r24
    1362:	88 1f       	adc	r24, r24
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	31 f4       	brne	.+12     	; 0x1374 <EXTI_u8INT1Status+0x2e>
		*Copy_u8Status = INTERRUPT_TRIGGERED;
    1368:	ea 81       	ldd	r30, Y+2	; 0x02
    136a:	fb 81       	ldd	r31, Y+3	; 0x03
    136c:	10 82       	st	Z, r1
		Local_enuErrorstate = ES_OK;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	0b c0       	rjmp	.+22     	; 0x138a <EXTI_u8INT1Status+0x44>
	}
	else if(GET_BIT(GIFR,GIFR_INTF1) == 0){
    1374:	ea e5       	ldi	r30, 0x5A	; 90
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	88 23       	and	r24, r24
    137c:	34 f0       	brlt	.+12     	; 0x138a <EXTI_u8INT1Status+0x44>
		*Copy_u8Status = INTERRUPT_NOT_TRIGGERED;
    137e:	ea 81       	ldd	r30, Y+2	; 0x02
    1380:	fb 81       	ldd	r31, Y+3	; 0x03
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	80 83       	st	Z, r24
		Local_enuErrorstate = ES_OK;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    138a:	89 81       	ldd	r24, Y+1	; 0x01
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <EXTI_SetCallBackINT1>:

ES_t EXTI_SetCallBackINT1( void(*LocalPtr)(void) ){
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <EXTI_SetCallBackINT1+0x6>
    139e:	0f 92       	push	r0
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	9b 83       	std	Y+3, r25	; 0x03
    13a6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    13a8:	19 82       	std	Y+1, r1	; 0x01
	if(LocalPtr != NULLPTR){
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	9b 81       	ldd	r25, Y+3	; 0x03
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	49 f0       	breq	.+18     	; 0x13c4 <EXTI_SetCallBackINT1+0x2c>
	INT1_FunctionPointer = LocalPtr;
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	9b 81       	ldd	r25, Y+3	; 0x03
    13b6:	90 93 7f 00 	sts	0x007F, r25
    13ba:	80 93 7e 00 	sts	0x007E, r24
	Local_enuErrorstate = ES_OK;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <EXTI_SetCallBackINT1+0x30>
	}
	else{
		Local_enuErrorstate = ES_NULL_POINTER;
    13c4:	82 e0       	ldi	r24, 0x02	; 2
    13c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <__vector_2>:

ISR(__vector_2){
    13d6:	1f 92       	push	r1
    13d8:	0f 92       	push	r0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	0f 92       	push	r0
    13de:	11 24       	eor	r1, r1
    13e0:	2f 93       	push	r18
    13e2:	3f 93       	push	r19
    13e4:	4f 93       	push	r20
    13e6:	5f 93       	push	r21
    13e8:	6f 93       	push	r22
    13ea:	7f 93       	push	r23
    13ec:	8f 93       	push	r24
    13ee:	9f 93       	push	r25
    13f0:	af 93       	push	r26
    13f2:	bf 93       	push	r27
    13f4:	ef 93       	push	r30
    13f6:	ff 93       	push	r31
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
	INT1_FunctionPointer();
    1400:	e0 91 7e 00 	lds	r30, 0x007E
    1404:	f0 91 7f 00 	lds	r31, 0x007F
    1408:	09 95       	icall
}
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	ff 91       	pop	r31
    1410:	ef 91       	pop	r30
    1412:	bf 91       	pop	r27
    1414:	af 91       	pop	r26
    1416:	9f 91       	pop	r25
    1418:	8f 91       	pop	r24
    141a:	7f 91       	pop	r23
    141c:	6f 91       	pop	r22
    141e:	5f 91       	pop	r21
    1420:	4f 91       	pop	r20
    1422:	3f 91       	pop	r19
    1424:	2f 91       	pop	r18
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	0f 90       	pop	r0
    142c:	1f 90       	pop	r1
    142e:	18 95       	reti

00001430 <EXTI_INT2Init>:


/*		External Interrupt 2 APIs   	*/
ES_t EXTI_INT2Init(u8 Local_u8Sense){
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <EXTI_INT2Init+0x6>
    1436:	00 d0       	rcall	.+0      	; 0x1438 <EXTI_INT2Init+0x8>
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    143e:	19 82       	std	Y+1, r1	; 0x01
		if(Local_u8Sense <= 3){
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	84 30       	cpi	r24, 0x04	; 4
    1444:	10 f5       	brcc	.+68     	; 0x148a <EXTI_INT2Init+0x5a>
	/*Select Sense Control*/
	switch(Local_u8Sense){
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	3c 83       	std	Y+4, r19	; 0x04
    144e:	2b 83       	std	Y+3, r18	; 0x03
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	91 05       	cpc	r25, r1
    1458:	31 f0       	breq	.+12     	; 0x1466 <EXTI_INT2Init+0x36>
    145a:	2b 81       	ldd	r18, Y+3	; 0x03
    145c:	3c 81       	ldd	r19, Y+4	; 0x04
    145e:	23 30       	cpi	r18, 0x03	; 3
    1460:	31 05       	cpc	r19, r1
    1462:	49 f0       	breq	.+18     	; 0x1476 <EXTI_INT2Init+0x46>
    1464:	0f c0       	rjmp	.+30     	; 0x1484 <EXTI_INT2Init+0x54>
		case FALLING_EDGE:
			CLR_BIT(MCUCSR,MCUCSR_ISC2);
    1466:	a4 e5       	ldi	r26, 0x54	; 84
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e4 e5       	ldi	r30, 0x54	; 84
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8f 7b       	andi	r24, 0xBF	; 191
    1472:	8c 93       	st	X, r24
    1474:	07 c0       	rjmp	.+14     	; 0x1484 <EXTI_INT2Init+0x54>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCSR,MCUCSR_ISC2);
    1476:	a4 e5       	ldi	r26, 0x54	; 84
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e4 e5       	ldi	r30, 0x54	; 84
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	80 64       	ori	r24, 0x40	; 64
    1482:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	02 c0       	rjmp	.+4      	; 0x148e <EXTI_INT2Init+0x5e>
	}
	else{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    148a:	83 e0       	ldi	r24, 0x03	; 3
    148c:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Peripheral Interrupt Enable*/
	SET_BIT(GICR,GICR_INT2);
    148e:	ab e5       	ldi	r26, 0x5B	; 91
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	eb e5       	ldi	r30, 0x5B	; 91
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	80 62       	ori	r24, 0x20	; 32
    149a:	8c 93       	st	X, r24
	return Local_enuErrorstate;
    149c:	89 81       	ldd	r24, Y+1	; 0x01
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <EXTI_u8INT2Status>:


ES_t EXTI_u8INT2Status(u8 *Copy_u8Status){
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <EXTI_u8INT2Status+0x6>
    14b2:	0f 92       	push	r0
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	9b 83       	std	Y+3, r25	; 0x03
    14ba:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    14bc:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(GIFR,GIFR_INTF2) == 1){
    14be:	ea e5       	ldi	r30, 0x5A	; 90
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	82 95       	swap	r24
    14c6:	86 95       	lsr	r24
    14c8:	87 70       	andi	r24, 0x07	; 7
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	81 70       	andi	r24, 0x01	; 1
    14d0:	90 70       	andi	r25, 0x00	; 0
    14d2:	88 23       	and	r24, r24
    14d4:	31 f0       	breq	.+12     	; 0x14e2 <EXTI_u8INT2Status+0x36>
		*Copy_u8Status = INTERRUPT_TRIGGERED;
    14d6:	ea 81       	ldd	r30, Y+2	; 0x02
    14d8:	fb 81       	ldd	r31, Y+3	; 0x03
    14da:	10 82       	st	Z, r1
		Local_enuErrorstate = ES_OK;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	12 c0       	rjmp	.+36     	; 0x1506 <EXTI_u8INT2Status+0x5a>
	}
	else if(GET_BIT(GIFR,GIFR_INTF2) == 0){
    14e2:	ea e5       	ldi	r30, 0x5A	; 90
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	82 95       	swap	r24
    14ea:	86 95       	lsr	r24
    14ec:	87 70       	andi	r24, 0x07	; 7
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	81 70       	andi	r24, 0x01	; 1
    14f4:	90 70       	andi	r25, 0x00	; 0
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	31 f4       	brne	.+12     	; 0x1506 <EXTI_u8INT2Status+0x5a>
		*Copy_u8Status = INTERRUPT_NOT_TRIGGERED;
    14fa:	ea 81       	ldd	r30, Y+2	; 0x02
    14fc:	fb 81       	ldd	r31, Y+3	; 0x03
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 83       	st	Z, r24
		Local_enuErrorstate = ES_OK;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <EXTI_SetCallBackINT2>:

ES_t EXTI_SetCallBackINT2( void(*LocalPtr)(void) ){
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <EXTI_SetCallBackINT2+0x6>
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	9b 83       	std	Y+3, r25	; 0x03
    1522:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1524:	19 82       	std	Y+1, r1	; 0x01
	if(LocalPtr != NULLPTR){
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	9b 81       	ldd	r25, Y+3	; 0x03
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	49 f0       	breq	.+18     	; 0x1540 <EXTI_SetCallBackINT2+0x2c>
	INT2_FunctionPointer = LocalPtr;
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	9b 81       	ldd	r25, Y+3	; 0x03
    1532:	90 93 81 00 	sts	0x0081, r25
    1536:	80 93 80 00 	sts	0x0080, r24
	Local_enuErrorstate = ES_OK;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <EXTI_SetCallBackINT2+0x30>
	}
	else{
		Local_enuErrorstate = ES_NULL_POINTER;
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    1544:	89 81       	ldd	r24, Y+1	; 0x01
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <__vector_3>:

ISR(__vector_3){
    1552:	1f 92       	push	r1
    1554:	0f 92       	push	r0
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	0f 92       	push	r0
    155a:	11 24       	eor	r1, r1
    155c:	2f 93       	push	r18
    155e:	3f 93       	push	r19
    1560:	4f 93       	push	r20
    1562:	5f 93       	push	r21
    1564:	6f 93       	push	r22
    1566:	7f 93       	push	r23
    1568:	8f 93       	push	r24
    156a:	9f 93       	push	r25
    156c:	af 93       	push	r26
    156e:	bf 93       	push	r27
    1570:	ef 93       	push	r30
    1572:	ff 93       	push	r31
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
	INT2_FunctionPointer();
    157c:	e0 91 80 00 	lds	r30, 0x0080
    1580:	f0 91 81 00 	lds	r31, 0x0081
    1584:	09 95       	icall
}
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	ff 91       	pop	r31
    158c:	ef 91       	pop	r30
    158e:	bf 91       	pop	r27
    1590:	af 91       	pop	r26
    1592:	9f 91       	pop	r25
    1594:	8f 91       	pop	r24
    1596:	7f 91       	pop	r23
    1598:	6f 91       	pop	r22
    159a:	5f 91       	pop	r21
    159c:	4f 91       	pop	r20
    159e:	3f 91       	pop	r19
    15a0:	2f 91       	pop	r18
    15a2:	0f 90       	pop	r0
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	0f 90       	pop	r0
    15a8:	1f 90       	pop	r1
    15aa:	18 95       	reti

000015ac <EXTI_DisableINT>:


ES_t EXTI_DisableINT(u8 Local_u8INT){
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <EXTI_DisableINT+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <EXTI_DisableINT+0x8>
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    15ba:	19 82       	std	Y+1, r1	; 0x01
	if(Local_u8INT <= 2){
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	68 f5       	brcc	.+90     	; 0x161c <EXTI_DisableINT+0x70>
		switch(Local_u8INT){
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3c 83       	std	Y+4, r19	; 0x04
    15ca:	2b 83       	std	Y+3, r18	; 0x03
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	89 f0       	breq	.+34     	; 0x15f8 <EXTI_DisableINT+0x4c>
    15d6:	2b 81       	ldd	r18, Y+3	; 0x03
    15d8:	3c 81       	ldd	r19, Y+4	; 0x04
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	a1 f0       	breq	.+40     	; 0x1608 <EXTI_DisableINT+0x5c>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	b9 f4       	brne	.+46     	; 0x1616 <EXTI_DisableINT+0x6a>
			case INT0:	CLR_BIT(GICR,GICR_INT0);	break;
    15e8:	ab e5       	ldi	r26, 0x5B	; 91
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	eb e5       	ldi	r30, 0x5B	; 91
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8f 7b       	andi	r24, 0xBF	; 191
    15f4:	8c 93       	st	X, r24
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <EXTI_DisableINT+0x6a>
			case INT1:	CLR_BIT(GICR,GICR_INT1);	break;
    15f8:	ab e5       	ldi	r26, 0x5B	; 91
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	eb e5       	ldi	r30, 0x5B	; 91
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8f 77       	andi	r24, 0x7F	; 127
    1604:	8c 93       	st	X, r24
    1606:	07 c0       	rjmp	.+14     	; 0x1616 <EXTI_DisableINT+0x6a>
			case INT2:	CLR_BIT(GICR,GICR_INT2);	break;
    1608:	ab e5       	ldi	r26, 0x5B	; 91
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	eb e5       	ldi	r30, 0x5B	; 91
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8f 7d       	andi	r24, 0xDF	; 223
    1614:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <EXTI_DisableINT+0x74>
	}
	else{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    161c:	83 e0       	ldi	r24, 0x03	; 3
    161e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    1620:	89 81       	ldd	r24, Y+1	; 0x01
}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <DIO_SetPinDirection>:
#include "DIO_interface.h"




ES_t DIO_SetPinDirection(u8 Port,u8 Pin, u8 Direction){
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <DIO_SetPinDirection+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <DIO_SetPinDirection+0x8>
    1638:	00 d0       	rcall	.+0      	; 0x163a <DIO_SetPinDirection+0xa>
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	8a 83       	std	Y+2, r24	; 0x02
    1640:	6b 83       	std	Y+3, r22	; 0x03
    1642:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1644:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	3e 83       	std	Y+6, r19	; 0x06
    164e:	2d 83       	std	Y+5, r18	; 0x05
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	91 05       	cpc	r25, r1
    1658:	09 f4       	brne	.+2      	; 0x165c <DIO_SetPinDirection+0x2c>
    165a:	48 c0       	rjmp	.+144    	; 0x16ec <DIO_SetPinDirection+0xbc>
    165c:	2d 81       	ldd	r18, Y+5	; 0x05
    165e:	3e 81       	ldd	r19, Y+6	; 0x06
    1660:	22 30       	cpi	r18, 0x02	; 2
    1662:	31 05       	cpc	r19, r1
    1664:	2c f4       	brge	.+10     	; 0x1670 <DIO_SetPinDirection+0x40>
    1666:	8d 81       	ldd	r24, Y+5	; 0x05
    1668:	9e 81       	ldd	r25, Y+6	; 0x06
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	71 f0       	breq	.+28     	; 0x168a <DIO_SetPinDirection+0x5a>
    166e:	d1 c0       	rjmp	.+418    	; 0x1812 <DIO_SetPinDirection+0x1e2>
    1670:	2d 81       	ldd	r18, Y+5	; 0x05
    1672:	3e 81       	ldd	r19, Y+6	; 0x06
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <DIO_SetPinDirection+0x4c>
    167a:	69 c0       	rjmp	.+210    	; 0x174e <DIO_SetPinDirection+0x11e>
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	91 05       	cpc	r25, r1
    1684:	09 f4       	brne	.+2      	; 0x1688 <DIO_SetPinDirection+0x58>
    1686:	94 c0       	rjmp	.+296    	; 0x17b0 <DIO_SetPinDirection+0x180>
    1688:	c4 c0       	rjmp	.+392    	; 0x1812 <DIO_SetPinDirection+0x1e2>
		case PORTA:
		if(Direction == INPUT){
    168a:	8c 81       	ldd	r24, Y+4	; 0x04
    168c:	88 23       	and	r24, r24
    168e:	a9 f4       	brne	.+42     	; 0x16ba <DIO_SetPinDirection+0x8a>
			CLR_BIT(DDRA_REG,Pin);
    1690:	aa e3       	ldi	r26, 0x3A	; 58
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	ea e3       	ldi	r30, 0x3A	; 58
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO_SetPinDirection+0x7e>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <DIO_SetPinDirection+0x7a>
    16b2:	80 95       	com	r24
    16b4:	84 23       	and	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	16 c0       	rjmp	.+44     	; 0x16e6 <DIO_SetPinDirection+0xb6>
		}
		else if(Direction == OUTPUT){
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	99 f4       	brne	.+38     	; 0x16e6 <DIO_SetPinDirection+0xb6>
			SET_BIT(DDRA_REG,Pin);
    16c0:	aa e3       	ldi	r26, 0x3A	; 58
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	ea e3       	ldi	r30, 0x3A	; 58
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 2e       	mov	r0, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <DIO_SetPinDirection+0xae>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <DIO_SetPinDirection+0xaa>
    16e2:	84 2b       	or	r24, r20
    16e4:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	95 c0       	rjmp	.+298    	; 0x1816 <DIO_SetPinDirection+0x1e6>
		break;
		case PORTB:
		if(Direction == INPUT){
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	88 23       	and	r24, r24
    16f0:	a9 f4       	brne	.+42     	; 0x171c <DIO_SetPinDirection+0xec>
			CLR_BIT(DDRB_REG,Pin);
    16f2:	a7 e3       	ldi	r26, 0x37	; 55
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e7 e3       	ldi	r30, 0x37	; 55
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_SetPinDirection+0xe0>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <DIO_SetPinDirection+0xdc>
    1714:	80 95       	com	r24
    1716:	84 23       	and	r24, r20
    1718:	8c 93       	st	X, r24
    171a:	16 c0       	rjmp	.+44     	; 0x1748 <DIO_SetPinDirection+0x118>
		}
		else if(Direction == OUTPUT){
    171c:	8c 81       	ldd	r24, Y+4	; 0x04
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	99 f4       	brne	.+38     	; 0x1748 <DIO_SetPinDirection+0x118>
			SET_BIT(DDRB_REG,Pin);
    1722:	a7 e3       	ldi	r26, 0x37	; 55
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e7 e3       	ldi	r30, 0x37	; 55
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	48 2f       	mov	r20, r24
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 2e       	mov	r0, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <DIO_SetPinDirection+0x110>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <DIO_SetPinDirection+0x10c>
    1744:	84 2b       	or	r24, r20
    1746:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	64 c0       	rjmp	.+200    	; 0x1816 <DIO_SetPinDirection+0x1e6>
		break;
		case PORTC:
		if(Direction == INPUT){
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	88 23       	and	r24, r24
    1752:	a9 f4       	brne	.+42     	; 0x177e <DIO_SetPinDirection+0x14e>
			CLR_BIT(DDRC_REG,Pin);
    1754:	a4 e3       	ldi	r26, 0x34	; 52
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e4 e3       	ldi	r30, 0x34	; 52
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_SetPinDirection+0x142>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_SetPinDirection+0x13e>
    1776:	80 95       	com	r24
    1778:	84 23       	and	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	16 c0       	rjmp	.+44     	; 0x17aa <DIO_SetPinDirection+0x17a>
		}
		else if(Direction == OUTPUT){
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	99 f4       	brne	.+38     	; 0x17aa <DIO_SetPinDirection+0x17a>
			SET_BIT(DDRC_REG,Pin);
    1784:	a4 e3       	ldi	r26, 0x34	; 52
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e4 e3       	ldi	r30, 0x34	; 52
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	48 2f       	mov	r20, r24
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 2e       	mov	r0, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <DIO_SetPinDirection+0x172>
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	0a 94       	dec	r0
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <DIO_SetPinDirection+0x16e>
    17a6:	84 2b       	or	r24, r20
    17a8:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	33 c0       	rjmp	.+102    	; 0x1816 <DIO_SetPinDirection+0x1e6>
		break;
		case PORTD:
		if(Direction == INPUT){
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	88 23       	and	r24, r24
    17b4:	a9 f4       	brne	.+42     	; 0x17e0 <DIO_SetPinDirection+0x1b0>
			CLR_BIT(DDRD_REG,Pin);
    17b6:	a1 e3       	ldi	r26, 0x31	; 49
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e1 e3       	ldi	r30, 0x31	; 49
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	48 2f       	mov	r20, r24
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	02 2e       	mov	r0, r18
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <DIO_SetPinDirection+0x1a4>
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	0a 94       	dec	r0
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <DIO_SetPinDirection+0x1a0>
    17d8:	80 95       	com	r24
    17da:	84 23       	and	r24, r20
    17dc:	8c 93       	st	X, r24
    17de:	16 c0       	rjmp	.+44     	; 0x180c <DIO_SetPinDirection+0x1dc>
		}
		else if(Direction == OUTPUT){
    17e0:	8c 81       	ldd	r24, Y+4	; 0x04
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	99 f4       	brne	.+38     	; 0x180c <DIO_SetPinDirection+0x1dc>
			SET_BIT(DDRD_REG,Pin);
    17e6:	a1 e3       	ldi	r26, 0x31	; 49
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e1 e3       	ldi	r30, 0x31	; 49
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_SetPinDirection+0x1d4>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_SetPinDirection+0x1d0>
    1808:	84 2b       	or	r24, r20
    180a:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <DIO_SetPinDirection+0x1e6>
		break;
		default:
			Local_enuErrorstate = ES_OUT_OF_RANGE;	
    1812:	83 e0       	ldi	r24, 0x03	; 3
    1814:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return Local_enuErrorstate;
    1816:	89 81       	ldd	r24, Y+1	; 0x01
}
    1818:	26 96       	adiw	r28, 0x06	; 6
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <DIO_SetPortDirection>:



ES_t DIO_SetPortDirection(u8 Port,u8 Direction){
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <DIO_SetPortDirection+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <DIO_SetPortDirection+0x8>
    1832:	0f 92       	push	r0
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	8a 83       	std	Y+2, r24	; 0x02
    183a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    183c:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	3d 83       	std	Y+5, r19	; 0x05
    1846:	2c 83       	std	Y+4, r18	; 0x04
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	9d 81       	ldd	r25, Y+5	; 0x05
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	91 05       	cpc	r25, r1
    1850:	e1 f0       	breq	.+56     	; 0x188a <DIO_SetPortDirection+0x60>
    1852:	2c 81       	ldd	r18, Y+4	; 0x04
    1854:	3d 81       	ldd	r19, Y+5	; 0x05
    1856:	22 30       	cpi	r18, 0x02	; 2
    1858:	31 05       	cpc	r19, r1
    185a:	2c f4       	brge	.+10     	; 0x1866 <DIO_SetPortDirection+0x3c>
    185c:	8c 81       	ldd	r24, Y+4	; 0x04
    185e:	9d 81       	ldd	r25, Y+5	; 0x05
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	61 f0       	breq	.+24     	; 0x187c <DIO_SetPortDirection+0x52>
    1864:	27 c0       	rjmp	.+78     	; 0x18b4 <DIO_SetPortDirection+0x8a>
    1866:	2c 81       	ldd	r18, Y+4	; 0x04
    1868:	3d 81       	ldd	r19, Y+5	; 0x05
    186a:	22 30       	cpi	r18, 0x02	; 2
    186c:	31 05       	cpc	r19, r1
    186e:	a1 f0       	breq	.+40     	; 0x1898 <DIO_SetPortDirection+0x6e>
    1870:	8c 81       	ldd	r24, Y+4	; 0x04
    1872:	9d 81       	ldd	r25, Y+5	; 0x05
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	91 05       	cpc	r25, r1
    1878:	b1 f0       	breq	.+44     	; 0x18a6 <DIO_SetPortDirection+0x7c>
    187a:	1c c0       	rjmp	.+56     	; 0x18b4 <DIO_SetPortDirection+0x8a>
		case PORTA: DDRA_REG = Direction; Local_enuErrorstate = ES_OK; break;
    187c:	ea e3       	ldi	r30, 0x3A	; 58
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	80 83       	st	Z, r24
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	17 c0       	rjmp	.+46     	; 0x18b8 <DIO_SetPortDirection+0x8e>
		case PORTB: DDRB_REG = Direction; Local_enuErrorstate = ES_OK; break;
    188a:	e7 e3       	ldi	r30, 0x37	; 55
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	80 83       	st	Z, r24
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	10 c0       	rjmp	.+32     	; 0x18b8 <DIO_SetPortDirection+0x8e>
		case PORTC: DDRC_REG = Direction; Local_enuErrorstate = ES_OK; break;
    1898:	e4 e3       	ldi	r30, 0x34	; 52
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	80 83       	st	Z, r24
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	09 c0       	rjmp	.+18     	; 0x18b8 <DIO_SetPortDirection+0x8e>
		case PORTD: DDRD_REG = Direction; Local_enuErrorstate = ES_OK; break;
    18a6:	e1 e3       	ldi	r30, 0x31	; 49
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	80 83       	st	Z, r24
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_SetPortDirection+0x8e>
		default: Local_enuErrorstate = ES_OUT_OF_RANGE;				   break;
    18b4:	83 e0       	ldi	r24, 0x03	; 3
    18b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <DIO_SetPinValue>:


ES_t DIO_SetPinValue(u8 Port,u8 Pin, u8 Value){
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <DIO_SetPinValue+0x6>
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <DIO_SetPinValue+0x8>
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <DIO_SetPinValue+0xa>
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	8a 83       	std	Y+2, r24	; 0x02
    18da:	6b 83       	std	Y+3, r22	; 0x03
    18dc:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    18de:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	3e 83       	std	Y+6, r19	; 0x06
    18e8:	2d 83       	std	Y+5, r18	; 0x05
    18ea:	8d 81       	ldd	r24, Y+5	; 0x05
    18ec:	9e 81       	ldd	r25, Y+6	; 0x06
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	91 05       	cpc	r25, r1
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <DIO_SetPinValue+0x2c>
    18f4:	48 c0       	rjmp	.+144    	; 0x1986 <DIO_SetPinValue+0xbc>
    18f6:	2d 81       	ldd	r18, Y+5	; 0x05
    18f8:	3e 81       	ldd	r19, Y+6	; 0x06
    18fa:	22 30       	cpi	r18, 0x02	; 2
    18fc:	31 05       	cpc	r19, r1
    18fe:	2c f4       	brge	.+10     	; 0x190a <DIO_SetPinValue+0x40>
    1900:	8d 81       	ldd	r24, Y+5	; 0x05
    1902:	9e 81       	ldd	r25, Y+6	; 0x06
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	71 f0       	breq	.+28     	; 0x1924 <DIO_SetPinValue+0x5a>
    1908:	d1 c0       	rjmp	.+418    	; 0x1aac <DIO_SetPinValue+0x1e2>
    190a:	2d 81       	ldd	r18, Y+5	; 0x05
    190c:	3e 81       	ldd	r19, Y+6	; 0x06
    190e:	22 30       	cpi	r18, 0x02	; 2
    1910:	31 05       	cpc	r19, r1
    1912:	09 f4       	brne	.+2      	; 0x1916 <DIO_SetPinValue+0x4c>
    1914:	69 c0       	rjmp	.+210    	; 0x19e8 <DIO_SetPinValue+0x11e>
    1916:	8d 81       	ldd	r24, Y+5	; 0x05
    1918:	9e 81       	ldd	r25, Y+6	; 0x06
    191a:	83 30       	cpi	r24, 0x03	; 3
    191c:	91 05       	cpc	r25, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <DIO_SetPinValue+0x58>
    1920:	94 c0       	rjmp	.+296    	; 0x1a4a <DIO_SetPinValue+0x180>
    1922:	c4 c0       	rjmp	.+392    	; 0x1aac <DIO_SetPinValue+0x1e2>
		case PORTA:
		if(Value == LOW){
    1924:	8c 81       	ldd	r24, Y+4	; 0x04
    1926:	88 23       	and	r24, r24
    1928:	a9 f4       	brne	.+42     	; 0x1954 <DIO_SetPinValue+0x8a>
			CLR_BIT(PORTA_REG,Pin);
    192a:	ab e3       	ldi	r26, 0x3B	; 59
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	eb e3       	ldi	r30, 0x3B	; 59
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_SetPinValue+0x7e>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <DIO_SetPinValue+0x7a>
    194c:	80 95       	com	r24
    194e:	84 23       	and	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	16 c0       	rjmp	.+44     	; 0x1980 <DIO_SetPinValue+0xb6>
		}
		else if(Value == HIGH){
    1954:	8c 81       	ldd	r24, Y+4	; 0x04
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	99 f4       	brne	.+38     	; 0x1980 <DIO_SetPinValue+0xb6>
			SET_BIT(PORTA_REG,Pin);
    195a:	ab e3       	ldi	r26, 0x3B	; 59
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	eb e3       	ldi	r30, 0x3B	; 59
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <DIO_SetPinValue+0xae>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <DIO_SetPinValue+0xaa>
    197c:	84 2b       	or	r24, r20
    197e:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	95 c0       	rjmp	.+298    	; 0x1ab0 <DIO_SetPinValue+0x1e6>
		break;
		case PORTB:
		if(Value == LOW){
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	88 23       	and	r24, r24
    198a:	a9 f4       	brne	.+42     	; 0x19b6 <DIO_SetPinValue+0xec>
			CLR_BIT(PORTB_REG,Pin);
    198c:	a8 e3       	ldi	r26, 0x38	; 56
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e8 e3       	ldi	r30, 0x38	; 56
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	48 2f       	mov	r20, r24
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	02 2e       	mov	r0, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <DIO_SetPinValue+0xe0>
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	0a 94       	dec	r0
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <DIO_SetPinValue+0xdc>
    19ae:	80 95       	com	r24
    19b0:	84 23       	and	r24, r20
    19b2:	8c 93       	st	X, r24
    19b4:	16 c0       	rjmp	.+44     	; 0x19e2 <DIO_SetPinValue+0x118>
		}
		else if(Value == HIGH){
    19b6:	8c 81       	ldd	r24, Y+4	; 0x04
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	99 f4       	brne	.+38     	; 0x19e2 <DIO_SetPinValue+0x118>
			SET_BIT(PORTB_REG,Pin);
    19bc:	a8 e3       	ldi	r26, 0x38	; 56
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e8 e3       	ldi	r30, 0x38	; 56
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	48 2f       	mov	r20, r24
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 2e       	mov	r0, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <DIO_SetPinValue+0x110>
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	0a 94       	dec	r0
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <DIO_SetPinValue+0x10c>
    19de:	84 2b       	or	r24, r20
    19e0:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	64 c0       	rjmp	.+200    	; 0x1ab0 <DIO_SetPinValue+0x1e6>
		break;
		case PORTC:
		if(Value == LOW){
    19e8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ea:	88 23       	and	r24, r24
    19ec:	a9 f4       	brne	.+42     	; 0x1a18 <DIO_SetPinValue+0x14e>
			CLR_BIT(PORTC_REG,Pin);
    19ee:	a5 e3       	ldi	r26, 0x35	; 53
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e5 e3       	ldi	r30, 0x35	; 53
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	48 2f       	mov	r20, r24
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 2e       	mov	r0, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <DIO_SetPinValue+0x142>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	0a 94       	dec	r0
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <DIO_SetPinValue+0x13e>
    1a10:	80 95       	com	r24
    1a12:	84 23       	and	r24, r20
    1a14:	8c 93       	st	X, r24
    1a16:	16 c0       	rjmp	.+44     	; 0x1a44 <DIO_SetPinValue+0x17a>
		}
		else if(Value == HIGH){
    1a18:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	99 f4       	brne	.+38     	; 0x1a44 <DIO_SetPinValue+0x17a>
			SET_BIT(PORTC_REG,Pin);
    1a1e:	a5 e3       	ldi	r26, 0x35	; 53
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e5 e3       	ldi	r30, 0x35	; 53
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <DIO_SetPinValue+0x172>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <DIO_SetPinValue+0x16e>
    1a40:	84 2b       	or	r24, r20
    1a42:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	33 c0       	rjmp	.+102    	; 0x1ab0 <DIO_SetPinValue+0x1e6>
		break;
		case PORTD:
		if(Value == LOW){
    1a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4c:	88 23       	and	r24, r24
    1a4e:	a9 f4       	brne	.+42     	; 0x1a7a <DIO_SetPinValue+0x1b0>
			CLR_BIT(PORTD_REG,Pin);
    1a50:	a2 e3       	ldi	r26, 0x32	; 50
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e2 e3       	ldi	r30, 0x32	; 50
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <DIO_SetPinValue+0x1a4>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <DIO_SetPinValue+0x1a0>
    1a72:	80 95       	com	r24
    1a74:	84 23       	and	r24, r20
    1a76:	8c 93       	st	X, r24
    1a78:	16 c0       	rjmp	.+44     	; 0x1aa6 <DIO_SetPinValue+0x1dc>
		}
		else if(Value == HIGH){
    1a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	99 f4       	brne	.+38     	; 0x1aa6 <DIO_SetPinValue+0x1dc>
			SET_BIT(PORTD_REG,Pin);
    1a80:	a2 e3       	ldi	r26, 0x32	; 50
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e2 e3       	ldi	r30, 0x32	; 50
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <DIO_SetPinValue+0x1d4>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <DIO_SetPinValue+0x1d0>
    1aa2:	84 2b       	or	r24, r20
    1aa4:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <DIO_SetPinValue+0x1e6>
		break;
		default:
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_enuErrorstate;
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab2:	26 96       	adiw	r28, 0x06	; 6
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <DIO_TogPinValue>:

ES_t DIO_TogPinValue(u8 Port,u8 Pin){
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <DIO_TogPinValue+0x6>
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <DIO_TogPinValue+0x8>
    1acc:	0f 92       	push	r0
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	8a 83       	std	Y+2, r24	; 0x02
    1ad4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1ad6:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	3d 83       	std	Y+5, r19	; 0x05
    1ae0:	2c 83       	std	Y+4, r18	; 0x04
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	91 05       	cpc	r25, r1
    1aea:	61 f1       	breq	.+88     	; 0x1b44 <DIO_TogPinValue+0x80>
    1aec:	2c 81       	ldd	r18, Y+4	; 0x04
    1aee:	3d 81       	ldd	r19, Y+5	; 0x05
    1af0:	22 30       	cpi	r18, 0x02	; 2
    1af2:	31 05       	cpc	r19, r1
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <DIO_TogPinValue+0x3c>
    1af6:	8c 81       	ldd	r24, Y+4	; 0x04
    1af8:	9d 81       	ldd	r25, Y+5	; 0x05
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	69 f0       	breq	.+26     	; 0x1b18 <DIO_TogPinValue+0x54>
    1afe:	64 c0       	rjmp	.+200    	; 0x1bc8 <DIO_TogPinValue+0x104>
    1b00:	2c 81       	ldd	r18, Y+4	; 0x04
    1b02:	3d 81       	ldd	r19, Y+5	; 0x05
    1b04:	22 30       	cpi	r18, 0x02	; 2
    1b06:	31 05       	cpc	r19, r1
    1b08:	99 f1       	breq	.+102    	; 0x1b70 <DIO_TogPinValue+0xac>
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0e:	83 30       	cpi	r24, 0x03	; 3
    1b10:	91 05       	cpc	r25, r1
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <DIO_TogPinValue+0x52>
    1b14:	43 c0       	rjmp	.+134    	; 0x1b9c <DIO_TogPinValue+0xd8>
    1b16:	58 c0       	rjmp	.+176    	; 0x1bc8 <DIO_TogPinValue+0x104>
			case PORTA:
				TOG_BIT(PORTA_REG,Pin);
    1b18:	ab e3       	ldi	r26, 0x3B	; 59
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	eb e3       	ldi	r30, 0x3B	; 59
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	48 2f       	mov	r20, r24
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 2e       	mov	r0, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_TogPinValue+0x72>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	0a 94       	dec	r0
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <DIO_TogPinValue+0x6e>
    1b3a:	84 27       	eor	r24, r20
    1b3c:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	44 c0       	rjmp	.+136    	; 0x1bcc <DIO_TogPinValue+0x108>
			break;
			case PORTB:
				TOG_BIT(PORTB_REG,Pin);
    1b44:	a8 e3       	ldi	r26, 0x38	; 56
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e8 e3       	ldi	r30, 0x38	; 56
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_TogPinValue+0x9e>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_TogPinValue+0x9a>
    1b66:	84 27       	eor	r24, r20
    1b68:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	2e c0       	rjmp	.+92     	; 0x1bcc <DIO_TogPinValue+0x108>
			break;
			case PORTC:
				TOG_BIT(PORTC_REG,Pin);
    1b70:	a5 e3       	ldi	r26, 0x35	; 53
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e5 e3       	ldi	r30, 0x35	; 53
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	48 2f       	mov	r20, r24
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	02 2e       	mov	r0, r18
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <DIO_TogPinValue+0xca>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	0a 94       	dec	r0
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <DIO_TogPinValue+0xc6>
    1b92:	84 27       	eor	r24, r20
    1b94:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	18 c0       	rjmp	.+48     	; 0x1bcc <DIO_TogPinValue+0x108>
			break;
			case PORTD:
				TOG_BIT(PORTD_REG,Pin);
    1b9c:	a2 e3       	ldi	r26, 0x32	; 50
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e2 e3       	ldi	r30, 0x32	; 50
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	02 2e       	mov	r0, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <DIO_TogPinValue+0xf6>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	0a 94       	dec	r0
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <DIO_TogPinValue+0xf2>
    1bbe:	84 27       	eor	r24, r20
    1bc0:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <DIO_TogPinValue+0x108>
			break;
			default:
				Local_enuErrorstate = ES_OUT_OF_RANGE;
    1bc8:	83 e0       	ldi	r24, 0x03	; 3
    1bca:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_enuErrorstate;
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <DIO_SetPortValue>:



ES_t DIO_SetPortValue(u8 Port,u8 Value){
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <DIO_SetPortValue+0x6>
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <DIO_SetPortValue+0x8>
    1be6:	0f 92       	push	r0
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	8a 83       	std	Y+2, r24	; 0x02
    1bee:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1bf0:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	3d 83       	std	Y+5, r19	; 0x05
    1bfa:	2c 83       	std	Y+4, r18	; 0x04
    1bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	91 05       	cpc	r25, r1
    1c04:	e1 f0       	breq	.+56     	; 0x1c3e <DIO_SetPortValue+0x60>
    1c06:	2c 81       	ldd	r18, Y+4	; 0x04
    1c08:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0a:	22 30       	cpi	r18, 0x02	; 2
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	2c f4       	brge	.+10     	; 0x1c1a <DIO_SetPortValue+0x3c>
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	9d 81       	ldd	r25, Y+5	; 0x05
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	61 f0       	breq	.+24     	; 0x1c30 <DIO_SetPortValue+0x52>
    1c18:	27 c0       	rjmp	.+78     	; 0x1c68 <DIO_SetPortValue+0x8a>
    1c1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c1e:	22 30       	cpi	r18, 0x02	; 2
    1c20:	31 05       	cpc	r19, r1
    1c22:	a1 f0       	breq	.+40     	; 0x1c4c <DIO_SetPortValue+0x6e>
    1c24:	8c 81       	ldd	r24, Y+4	; 0x04
    1c26:	9d 81       	ldd	r25, Y+5	; 0x05
    1c28:	83 30       	cpi	r24, 0x03	; 3
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	b1 f0       	breq	.+44     	; 0x1c5a <DIO_SetPortValue+0x7c>
    1c2e:	1c c0       	rjmp	.+56     	; 0x1c68 <DIO_SetPortValue+0x8a>
		case PORTA: PORTA_REG = Value; Local_enuErrorstate = ES_OK; break;
    1c30:	eb e3       	ldi	r30, 0x3B	; 59
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	80 83       	st	Z, r24
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	17 c0       	rjmp	.+46     	; 0x1c6c <DIO_SetPortValue+0x8e>
		case PORTB: PORTB_REG = Value; Local_enuErrorstate = ES_OK; break;
    1c3e:	e8 e3       	ldi	r30, 0x38	; 56
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	80 83       	st	Z, r24
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	10 c0       	rjmp	.+32     	; 0x1c6c <DIO_SetPortValue+0x8e>
		case PORTC: PORTC_REG = Value; Local_enuErrorstate = ES_OK; break;
    1c4c:	e5 e3       	ldi	r30, 0x35	; 53
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	80 83       	st	Z, r24
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	09 c0       	rjmp	.+18     	; 0x1c6c <DIO_SetPortValue+0x8e>
		case PORTD: PORTD_REG = Value; Local_enuErrorstate = ES_OK; break;
    1c5a:	e2 e3       	ldi	r30, 0x32	; 50
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	80 83       	st	Z, r24
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_SetPortValue+0x8e>
		default: Local_enuErrorstate = ES_OUT_OF_RANGE;				break;
    1c68:	83 e0       	ldi	r24, 0x03	; 3
    1c6a:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_enuErrorstate;
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Port,u8 Pin){
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <DIO_u8GetPinValue+0x6>
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <DIO_u8GetPinValue+0x8>
    1c86:	0f 92       	push	r0
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port){
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	3d 83       	std	Y+5, r19	; 0x05
    1c98:	2c 83       	std	Y+4, r18	; 0x04
    1c9a:	4c 81       	ldd	r20, Y+4	; 0x04
    1c9c:	5d 81       	ldd	r21, Y+5	; 0x05
    1c9e:	41 30       	cpi	r20, 0x01	; 1
    1ca0:	51 05       	cpc	r21, r1
    1ca2:	49 f1       	breq	.+82     	; 0x1cf6 <DIO_u8GetPinValue+0x78>
    1ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca8:	82 30       	cpi	r24, 0x02	; 2
    1caa:	91 05       	cpc	r25, r1
    1cac:	34 f4       	brge	.+12     	; 0x1cba <DIO_u8GetPinValue+0x3c>
    1cae:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb2:	21 15       	cp	r18, r1
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	61 f0       	breq	.+24     	; 0x1cd0 <DIO_u8GetPinValue+0x52>
    1cb8:	57 c0       	rjmp	.+174    	; 0x1d68 <DIO_u8GetPinValue+0xea>
    1cba:	4c 81       	ldd	r20, Y+4	; 0x04
    1cbc:	5d 81       	ldd	r21, Y+5	; 0x05
    1cbe:	42 30       	cpi	r20, 0x02	; 2
    1cc0:	51 05       	cpc	r21, r1
    1cc2:	61 f1       	breq	.+88     	; 0x1d1c <DIO_u8GetPinValue+0x9e>
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc8:	83 30       	cpi	r24, 0x03	; 3
    1cca:	91 05       	cpc	r25, r1
    1ccc:	d1 f1       	breq	.+116    	; 0x1d42 <DIO_u8GetPinValue+0xc4>
    1cce:	4c c0       	rjmp	.+152    	; 0x1d68 <DIO_u8GetPinValue+0xea>
		case PORTA: return GET_BIT(PINA_REG,Pin); break;
    1cd0:	e9 e3       	ldi	r30, 0x39	; 57
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	88 2f       	mov	r24, r24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	a9 01       	movw	r20, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <DIO_u8GetPinValue+0x6a>
    1ce4:	55 95       	asr	r21
    1ce6:	47 95       	ror	r20
    1ce8:	8a 95       	dec	r24
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <DIO_u8GetPinValue+0x66>
    1cec:	ca 01       	movw	r24, r20
    1cee:	58 2f       	mov	r21, r24
    1cf0:	51 70       	andi	r21, 0x01	; 1
    1cf2:	5b 83       	std	Y+3, r21	; 0x03
    1cf4:	3a c0       	rjmp	.+116    	; 0x1d6a <DIO_u8GetPinValue+0xec>
		case PORTB: return GET_BIT(PINB_REG,Pin); break;
    1cf6:	e6 e3       	ldi	r30, 0x36	; 54
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	88 2f       	mov	r24, r24
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a9 01       	movw	r20, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_u8GetPinValue+0x90>
    1d0a:	55 95       	asr	r21
    1d0c:	47 95       	ror	r20
    1d0e:	8a 95       	dec	r24
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <DIO_u8GetPinValue+0x8c>
    1d12:	ca 01       	movw	r24, r20
    1d14:	58 2f       	mov	r21, r24
    1d16:	51 70       	andi	r21, 0x01	; 1
    1d18:	5b 83       	std	Y+3, r21	; 0x03
    1d1a:	27 c0       	rjmp	.+78     	; 0x1d6a <DIO_u8GetPinValue+0xec>
		case PORTC: return GET_BIT(PINC_REG,Pin); break;
    1d1c:	e3 e3       	ldi	r30, 0x33	; 51
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	88 2f       	mov	r24, r24
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a9 01       	movw	r20, r18
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <DIO_u8GetPinValue+0xb6>
    1d30:	55 95       	asr	r21
    1d32:	47 95       	ror	r20
    1d34:	8a 95       	dec	r24
    1d36:	e2 f7       	brpl	.-8      	; 0x1d30 <DIO_u8GetPinValue+0xb2>
    1d38:	ca 01       	movw	r24, r20
    1d3a:	58 2f       	mov	r21, r24
    1d3c:	51 70       	andi	r21, 0x01	; 1
    1d3e:	5b 83       	std	Y+3, r21	; 0x03
    1d40:	14 c0       	rjmp	.+40     	; 0x1d6a <DIO_u8GetPinValue+0xec>
		case PORTD: return GET_BIT(PIND_REG,Pin); break;
    1d42:	e0 e3       	ldi	r30, 0x30	; 48
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a9 01       	movw	r20, r18
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <DIO_u8GetPinValue+0xdc>
    1d56:	55 95       	asr	r21
    1d58:	47 95       	ror	r20
    1d5a:	8a 95       	dec	r24
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <DIO_u8GetPinValue+0xd8>
    1d5e:	ca 01       	movw	r24, r20
    1d60:	58 2f       	mov	r21, r24
    1d62:	51 70       	andi	r21, 0x01	; 1
    1d64:	5b 83       	std	Y+3, r21	; 0x03
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <DIO_u8GetPinValue+0xec>
	}
	return 0;
    1d68:	1b 82       	std	Y+3, r1	; 0x03
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <LCD_WriteCommand8Bit>:

@brief Writes a command to the 8-bit data port of the LCD
@param Command The command to be written to the LCD
@return ES_OK if the command was written successfully, ES_NOK otherwise
*/
ES_t LCD_WriteCommand8Bit(u8 Command){
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <LCD_WriteCommand8Bit+0x6>
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1d88:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to LOW		(INSTRUCTION)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,LOW);
    1d8a:	83 e0       	ldi	r24, 0x03	; 3
    1d8c:	66 e0       	ldi	r22, 0x06	; 6
    1d8e:	40 e0       	ldi	r20, 0x00	; 0
    1d90:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
	//Send the command throw data port
	DIO_SetPortValue(DATA_PORT_8_BIT,Command);
    1d94:	82 e0       	ldi	r24, 0x02	; 2
    1d96:	6a 81       	ldd	r22, Y+2	; 0x02
    1d98:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    1d9c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <LCD_WriteData8Bit>:
 * 
 * @return An error state indicating the success or failure of the operation.
 * @retval ES_OK The data was successfully written to the LCD.
 * @retval ES_NOK The data was not successfully written to the LCD.
 */
ES_t LCD_WriteData8Bit(u8 Data){
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <LCD_WriteData8Bit+0x6>
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1dbc:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to HIGH		(DATA)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,HIGH);
    1dbe:	83 e0       	ldi	r24, 0x03	; 3
    1dc0:	66 e0       	ldi	r22, 0x06	; 6
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
    1dc4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
	//Send the DATA throw data port
	DIO_SetPortValue(DATA_PORT_8_BIT,Data);
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	6a 81       	ldd	r22, Y+2	; 0x02
    1dcc:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    1dd0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <LCD_8BitInitialize>:

ES_t LCD_8BitInitialize(void){
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	0f 92       	push	r0
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1dee:	19 82       	std	Y+1, r1	; 0x01
	/*	Set Directions	*/
	SetDirections8Bit();
    1df0:	0e 94 a8 11 	call	0x2350	; 0x2350 <SetDirections8Bit>
	/*					*/
	FunctionSet8Bit();
    1df4:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <FunctionSet8Bit>
	DisplayOnOffControl8Bit();
    1df8:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <DisplayOnOffControl8Bit>
	DisplayClear8Bit();
    1dfc:	0e 94 2f 14 	call	0x285e	; 0x285e <DisplayClear8Bit>
	EntryModeSet8Bit();
    1e00:	0e 94 03 15 	call	0x2a06	; 0x2a06 <EntryModeSet8Bit>
	Local_enuErrorstate = ES_OK;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e0a:	0f 90       	pop	r0
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <LCD_WriteCommand4Bit>:
/***********************************************************************/
ES_t LCD_WriteCommand4Bit(u8 Command){
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <LCD_WriteCommand4Bit+0x6>
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1e1e:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to LOW		(INSTRUCTION)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,LOW);
    1e20:	83 e0       	ldi	r24, 0x03	; 3
    1e22:	66 e0       	ldi	r22, 0x06	; 6
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
	//Send the D7:D4 data first
	DIO_SetPortValue(DATA_PORT_8_BIT,Command>>4);
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	98 2f       	mov	r25, r24
    1e2e:	92 95       	swap	r25
    1e30:	9f 70       	andi	r25, 0x0F	; 15
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	69 2f       	mov	r22, r25
    1e36:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    1e3a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <SendEnablePulse>
	//Send the D3:D0 data second
	DIO_SetPortValue(DATA_PORT_8_BIT,Command&0x0f);
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	98 2f       	mov	r25, r24
    1e42:	9f 70       	andi	r25, 0x0F	; 15
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	69 2f       	mov	r22, r25
    1e48:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    1e4c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <LCD_WriteData4Bit>:

ES_t LCD_WriteData4Bit(u8 Data){
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <LCD_WriteData4Bit+0x6>
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1e6c:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to HIGH		(DATA)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,HIGH);
    1e6e:	83 e0       	ldi	r24, 0x03	; 3
    1e70:	66 e0       	ldi	r22, 0x06	; 6
    1e72:	41 e0       	ldi	r20, 0x01	; 1
    1e74:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
	//Send the D7:D4 data first
	DIO_SetPortValue(DATA_PORT_8_BIT,Data>>4);
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	98 2f       	mov	r25, r24
    1e7c:	92 95       	swap	r25
    1e7e:	9f 70       	andi	r25, 0x0F	; 15
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	69 2f       	mov	r22, r25
    1e84:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    1e88:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <SendEnablePulse>
	//Send the D3:D0 data second
	DIO_SetPortValue(DATA_PORT_8_BIT,Data&0x0f);
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	98 2f       	mov	r25, r24
    1e90:	9f 70       	andi	r25, 0x0F	; 15
    1e92:	82 e0       	ldi	r24, 0x02	; 2
    1e94:	69 2f       	mov	r22, r25
    1e96:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    1e9a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <LCD_4BitInitialize>:

ES_t LCD_4BitInitialize(void){
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	0f 92       	push	r0
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1eb8:	19 82       	std	Y+1, r1	; 0x01
	SetDirections4Bit();
    1eba:	0e 94 bd 11 	call	0x237a	; 0x237a <SetDirections4Bit>
	FunctionSet4Bit();
    1ebe:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <FunctionSet4Bit>
	DisplayOnOffControl4Bit();
    1ec2:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <DisplayOnOffControl4Bit>
	DisplayClear4Bit();
    1ec6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <DisplayClear4Bit>
	EntryModeSet4Bit();
    1eca:	0e 94 fe 19 	call	0x33fc	; 0x33fc <EntryModeSet4Bit>
	Local_enuErrorstate = ES_OK;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed4:	0f 90       	pop	r0
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <LCD_WriteString8Bit>:





ES_t LCD_WriteString8Bit(char *string){
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <LCD_WriteString8Bit+0x6>
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <LCD_WriteString8Bit+0x8>
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	9c 83       	std	Y+4, r25	; 0x04
    1eea:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1eec:	1a 82       	std	Y+2, r1	; 0x02
	u8 i=0;
    1eee:	19 82       	std	Y+1, r1	; 0x01
    1ef0:	0e c0       	rjmp	.+28     	; 0x1f0e <LCD_WriteString8Bit+0x32>
	while(string[i] != '\0'){
		LCD_WriteData8Bit(string[i]);
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	9c 81       	ldd	r25, Y+4	; 0x04
    1efc:	fc 01       	movw	r30, r24
    1efe:	e2 0f       	add	r30, r18
    1f00:	f3 1f       	adc	r31, r19
    1f02:	80 81       	ld	r24, Z
    1f04:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <LCD_WriteData8Bit>
		i++;
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	8f 5f       	subi	r24, 0xFF	; 255
    1f0c:	89 83       	std	Y+1, r24	; 0x01


ES_t LCD_WriteString8Bit(char *string){
	ES_t Local_enuErrorstate = ES_NOK;
	u8 i=0;
	while(string[i] != '\0'){
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	fc 01       	movw	r30, r24
    1f1a:	e2 0f       	add	r30, r18
    1f1c:	f3 1f       	adc	r31, r19
    1f1e:	80 81       	ld	r24, Z
    1f20:	88 23       	and	r24, r24
    1f22:	39 f7       	brne	.-50     	; 0x1ef2 <LCD_WriteString8Bit+0x16>
		LCD_WriteData8Bit(string[i]);
		i++;
	}
	Local_enuErrorstate = ES_OK;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <LCD_GoToXY8Bit>:

ES_t LCD_GoToXY8Bit(u8 X_Pos,u8 Y_Pos){
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <LCD_GoToXY8Bit+0x6>
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <LCD_GoToXY8Bit+0x8>
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	8b 83       	std	Y+3, r24	; 0x03
    1f46:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1f48:	1a 82       	std	Y+2, r1	; 0x02
	u8 Address;
	/*	Location at First row	*/
	if(Y_Pos == 0){
    1f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4c:	88 23       	and	r24, r24
    1f4e:	19 f4       	brne	.+6      	; 0x1f56 <LCD_GoToXY8Bit+0x1e>
		Address = X_Pos;
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	06 c0       	rjmp	.+12     	; 0x1f62 <LCD_GoToXY8Bit+0x2a>
	}
	/*	Location at second Row	*/
	else if(Y_Pos == 1){
    1f56:	8c 81       	ldd	r24, Y+4	; 0x04
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	19 f4       	brne	.+6      	; 0x1f62 <LCD_GoToXY8Bit+0x2a>
		Address = X_Pos + 0x40;
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	80 5c       	subi	r24, 0xC0	; 192
    1f60:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_WriteCommand8Bit(128+Address);
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	80 58       	subi	r24, 0x80	; 128
    1f66:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_WriteCommand8Bit>
	Local_enuErrorstate = ES_OK;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <LCD_WriteNumber8Bit>:

ES_t LCD_WriteNumber8Bit(s32 Number){
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	29 97       	sbiw	r28, 0x09	; 9
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	6e 83       	std	Y+6, r22	; 0x06
    1f9c:	7f 83       	std	Y+7, r23	; 0x07
    1f9e:	88 87       	std	Y+8, r24	; 0x08
    1fa0:	99 87       	std	Y+9, r25	; 0x09
	ES_t Local_enuErrorstate = ES_NOK;
    1fa2:	1d 82       	std	Y+5, r1	; 0x05
	s32 NUM = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	ab 83       	std	Y+3, r26	; 0x03
    1fb2:	bc 83       	std	Y+4, r27	; 0x04
	if(Number == 0){
    1fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fb8:	a8 85       	ldd	r26, Y+8	; 0x08
    1fba:	b9 85       	ldd	r27, Y+9	; 0x09
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	a1 05       	cpc	r26, r1
    1fc0:	b1 05       	cpc	r27, r1
    1fc2:	21 f4       	brne	.+8      	; 0x1fcc <LCD_WriteNumber8Bit+0x4e>
		LCD_WriteData8Bit('0');
    1fc4:	80 e3       	ldi	r24, 0x30	; 48
    1fc6:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <LCD_WriteData8Bit>
    1fca:	50 c0       	rjmp	.+160    	; 0x206c <LCD_WriteNumber8Bit+0xee>
	}
	else if(Number < 0){
    1fcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fce:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd0:	a8 85       	ldd	r26, Y+8	; 0x08
    1fd2:	b9 85       	ldd	r27, Y+9	; 0x09
    1fd4:	bb 23       	and	r27, r27
    1fd6:	0c f0       	brlt	.+2      	; 0x1fda <LCD_WriteNumber8Bit+0x5c>
    1fd8:	49 c0       	rjmp	.+146    	; 0x206c <LCD_WriteNumber8Bit+0xee>
		LCD_WriteData8Bit('-');
    1fda:	8d e2       	ldi	r24, 0x2D	; 45
    1fdc:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <LCD_WriteData8Bit>
		Number = Number * (-1);
    1fe0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe2:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe4:	a8 85       	ldd	r26, Y+8	; 0x08
    1fe6:	b9 85       	ldd	r27, Y+9	; 0x09
    1fe8:	b0 95       	com	r27
    1fea:	a0 95       	com	r26
    1fec:	90 95       	com	r25
    1fee:	81 95       	neg	r24
    1ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff2:	af 4f       	sbci	r26, 0xFF	; 255
    1ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff6:	8e 83       	std	Y+6, r24	; 0x06
    1ff8:	9f 83       	std	Y+7, r25	; 0x07
    1ffa:	a8 87       	std	Y+8, r26	; 0x08
    1ffc:	b9 87       	std	Y+9, r27	; 0x09
    1ffe:	36 c0       	rjmp	.+108    	; 0x206c <LCD_WriteNumber8Bit+0xee>
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	ab 81       	ldd	r26, Y+3	; 0x03
    2006:	bc 81       	ldd	r27, Y+4	; 0x04
    2008:	2a e0       	ldi	r18, 0x0A	; 10
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 09 20 	call	0x4012	; 0x4012 <__mulsi3>
    2018:	7b 01       	movw	r14, r22
    201a:	8c 01       	movw	r16, r24
    201c:	8e 81       	ldd	r24, Y+6	; 0x06
    201e:	9f 81       	ldd	r25, Y+7	; 0x07
    2020:	a8 85       	ldd	r26, Y+8	; 0x08
    2022:	b9 85       	ldd	r27, Y+9	; 0x09
    2024:	2a e0       	ldi	r18, 0x0A	; 10
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 34 20 	call	0x4068	; 0x4068 <__divmodsi4>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8e 0d       	add	r24, r14
    203a:	9f 1d       	adc	r25, r15
    203c:	a0 1f       	adc	r26, r16
    203e:	b1 1f       	adc	r27, r17
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	9a 83       	std	Y+2, r25	; 0x02
    2044:	ab 83       	std	Y+3, r26	; 0x03
    2046:	bc 83       	std	Y+4, r27	; 0x04
		Number = Number / 10;
    2048:	8e 81       	ldd	r24, Y+6	; 0x06
    204a:	9f 81       	ldd	r25, Y+7	; 0x07
    204c:	a8 85       	ldd	r26, Y+8	; 0x08
    204e:	b9 85       	ldd	r27, Y+9	; 0x09
    2050:	2a e0       	ldi	r18, 0x0A	; 10
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 34 20 	call	0x4068	; 0x4068 <__divmodsi4>
    2060:	da 01       	movw	r26, r20
    2062:	c9 01       	movw	r24, r18
    2064:	8e 83       	std	Y+6, r24	; 0x06
    2066:	9f 83       	std	Y+7, r25	; 0x07
    2068:	a8 87       	std	Y+8, r26	; 0x08
    206a:	b9 87       	std	Y+9, r27	; 0x09
	}
	else if(Number < 0){
		LCD_WriteData8Bit('-');
		Number = Number * (-1);
	}
	while(Number){
    206c:	8e 81       	ldd	r24, Y+6	; 0x06
    206e:	9f 81       	ldd	r25, Y+7	; 0x07
    2070:	a8 85       	ldd	r26, Y+8	; 0x08
    2072:	b9 85       	ldd	r27, Y+9	; 0x09
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	a1 05       	cpc	r26, r1
    2078:	b1 05       	cpc	r27, r1
    207a:	11 f6       	brne	.-124    	; 0x2000 <LCD_WriteNumber8Bit+0x82>
    207c:	23 c0       	rjmp	.+70     	; 0x20c4 <LCD_WriteNumber8Bit+0x146>
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
		LCD_WriteData8Bit((NUM % 10) + 48);
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	9a 81       	ldd	r25, Y+2	; 0x02
    2082:	ab 81       	ldd	r26, Y+3	; 0x03
    2084:	bc 81       	ldd	r27, Y+4	; 0x04
    2086:	2a e0       	ldi	r18, 0x0A	; 10
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e0       	ldi	r20, 0x00	; 0
    208c:	50 e0       	ldi	r21, 0x00	; 0
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	0e 94 34 20 	call	0x4068	; 0x4068 <__divmodsi4>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	80 5d       	subi	r24, 0xD0	; 208
    209c:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <LCD_WriteData8Bit>
		NUM = (NUM / 10);
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	ab 81       	ldd	r26, Y+3	; 0x03
    20a6:	bc 81       	ldd	r27, Y+4	; 0x04
    20a8:	2a e0       	ldi	r18, 0x0A	; 10
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 34 20 	call	0x4068	; 0x4068 <__divmodsi4>
    20b8:	da 01       	movw	r26, r20
    20ba:	c9 01       	movw	r24, r18
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	ab 83       	std	Y+3, r26	; 0x03
    20c2:	bc 83       	std	Y+4, r27	; 0x04
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	9a 81       	ldd	r25, Y+2	; 0x02
    20c8:	ab 81       	ldd	r26, Y+3	; 0x03
    20ca:	bc 81       	ldd	r27, Y+4	; 0x04
    20cc:	81 30       	cpi	r24, 0x01	; 1
    20ce:	91 05       	cpc	r25, r1
    20d0:	a1 05       	cpc	r26, r1
    20d2:	b1 05       	cpc	r27, r1
    20d4:	a1 f6       	brne	.-88     	; 0x207e <LCD_WriteNumber8Bit+0x100>
		LCD_WriteData8Bit((NUM % 10) + 48);
		NUM = (NUM / 10);
	}
	Local_enuErrorstate = ES_OK;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	8d 83       	std	Y+5, r24	; 0x05
	return Local_enuErrorstate;
    20da:	8d 81       	ldd	r24, Y+5	; 0x05
}
    20dc:	29 96       	adiw	r28, 0x09	; 9
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	ff 90       	pop	r15
    20f2:	ef 90       	pop	r14
    20f4:	08 95       	ret

000020f6 <LCD_WriteString4Bit>:
/******************************************************************/
ES_t LCD_WriteString4Bit(char *string){
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <LCD_WriteString4Bit+0x6>
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <LCD_WriteString4Bit+0x8>
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	9c 83       	std	Y+4, r25	; 0x04
    2104:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2106:	1a 82       	std	Y+2, r1	; 0x02
	u8 i=0;
    2108:	19 82       	std	Y+1, r1	; 0x01
    210a:	0e c0       	rjmp	.+28     	; 0x2128 <LCD_WriteString4Bit+0x32>
	while(string[i] != '\0'){
		LCD_WriteData4Bit(string[i]);
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	28 2f       	mov	r18, r24
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	fc 01       	movw	r30, r24
    2118:	e2 0f       	add	r30, r18
    211a:	f3 1f       	adc	r31, r19
    211c:	80 81       	ld	r24, Z
    211e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <LCD_WriteData4Bit>
		i++;
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	8f 5f       	subi	r24, 0xFF	; 255
    2126:	89 83       	std	Y+1, r24	; 0x01
}
/******************************************************************/
ES_t LCD_WriteString4Bit(char *string){
	ES_t Local_enuErrorstate = ES_NOK;
	u8 i=0;
	while(string[i] != '\0'){
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	fc 01       	movw	r30, r24
    2134:	e2 0f       	add	r30, r18
    2136:	f3 1f       	adc	r31, r19
    2138:	80 81       	ld	r24, Z
    213a:	88 23       	and	r24, r24
    213c:	39 f7       	brne	.-50     	; 0x210c <LCD_WriteString4Bit+0x16>
		LCD_WriteData4Bit(string[i]);
		i++;
	}
	Local_enuErrorstate = ES_OK;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <LCD_GoToXY4Bit>:

ES_t LCD_GoToXY4Bit(u8 X_Pos,u8 Y_Pos){
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	00 d0       	rcall	.+0      	; 0x2158 <LCD_GoToXY4Bit+0x6>
    2158:	00 d0       	rcall	.+0      	; 0x215a <LCD_GoToXY4Bit+0x8>
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	8b 83       	std	Y+3, r24	; 0x03
    2160:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2162:	1a 82       	std	Y+2, r1	; 0x02
	u8 Address;
	/*	Location at First row	*/
	if(Y_Pos == 0){
    2164:	8c 81       	ldd	r24, Y+4	; 0x04
    2166:	88 23       	and	r24, r24
    2168:	19 f4       	brne	.+6      	; 0x2170 <LCD_GoToXY4Bit+0x1e>
		Address = X_Pos;
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	06 c0       	rjmp	.+12     	; 0x217c <LCD_GoToXY4Bit+0x2a>
	}
	/*	Location at second Row	*/
	else if(Y_Pos == 1){
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	19 f4       	brne	.+6      	; 0x217c <LCD_GoToXY4Bit+0x2a>
		Address = X_Pos + 0x40;
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	80 5c       	subi	r24, 0xC0	; 192
    217a:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_WriteCommand4Bit(128+Address);
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	80 58       	subi	r24, 0x80	; 128
    2180:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_WriteCommand4Bit>
	Local_enuErrorstate = ES_OK;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
}
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <LCD_WriteNumber4Bit>:

ES_t LCD_WriteNumber4Bit(s32 Number){
    2198:	ef 92       	push	r14
    219a:	ff 92       	push	r15
    219c:	0f 93       	push	r16
    219e:	1f 93       	push	r17
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	29 97       	sbiw	r28, 0x09	; 9
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	6e 83       	std	Y+6, r22	; 0x06
    21b6:	7f 83       	std	Y+7, r23	; 0x07
    21b8:	88 87       	std	Y+8, r24	; 0x08
    21ba:	99 87       	std	Y+9, r25	; 0x09
	ES_t Local_enuErrorstate = ES_NOK;
    21bc:	1d 82       	std	Y+5, r1	; 0x05
	s32 NUM = 1;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	a0 e0       	ldi	r26, 0x00	; 0
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	9a 83       	std	Y+2, r25	; 0x02
    21ca:	ab 83       	std	Y+3, r26	; 0x03
    21cc:	bc 83       	std	Y+4, r27	; 0x04
	if(Number == 0){
    21ce:	8e 81       	ldd	r24, Y+6	; 0x06
    21d0:	9f 81       	ldd	r25, Y+7	; 0x07
    21d2:	a8 85       	ldd	r26, Y+8	; 0x08
    21d4:	b9 85       	ldd	r27, Y+9	; 0x09
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	a1 05       	cpc	r26, r1
    21da:	b1 05       	cpc	r27, r1
    21dc:	21 f4       	brne	.+8      	; 0x21e6 <LCD_WriteNumber4Bit+0x4e>
		LCD_WriteData4Bit('0');
    21de:	80 e3       	ldi	r24, 0x30	; 48
    21e0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <LCD_WriteData4Bit>
    21e4:	50 c0       	rjmp	.+160    	; 0x2286 <LCD_WriteNumber4Bit+0xee>
	}
	else if(Number < 0){
    21e6:	8e 81       	ldd	r24, Y+6	; 0x06
    21e8:	9f 81       	ldd	r25, Y+7	; 0x07
    21ea:	a8 85       	ldd	r26, Y+8	; 0x08
    21ec:	b9 85       	ldd	r27, Y+9	; 0x09
    21ee:	bb 23       	and	r27, r27
    21f0:	0c f0       	brlt	.+2      	; 0x21f4 <LCD_WriteNumber4Bit+0x5c>
    21f2:	49 c0       	rjmp	.+146    	; 0x2286 <LCD_WriteNumber4Bit+0xee>
		LCD_WriteData4Bit('-');
    21f4:	8d e2       	ldi	r24, 0x2D	; 45
    21f6:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <LCD_WriteData4Bit>
		Number = Number * (-1);
    21fa:	8e 81       	ldd	r24, Y+6	; 0x06
    21fc:	9f 81       	ldd	r25, Y+7	; 0x07
    21fe:	a8 85       	ldd	r26, Y+8	; 0x08
    2200:	b9 85       	ldd	r27, Y+9	; 0x09
    2202:	b0 95       	com	r27
    2204:	a0 95       	com	r26
    2206:	90 95       	com	r25
    2208:	81 95       	neg	r24
    220a:	9f 4f       	sbci	r25, 0xFF	; 255
    220c:	af 4f       	sbci	r26, 0xFF	; 255
    220e:	bf 4f       	sbci	r27, 0xFF	; 255
    2210:	8e 83       	std	Y+6, r24	; 0x06
    2212:	9f 83       	std	Y+7, r25	; 0x07
    2214:	a8 87       	std	Y+8, r26	; 0x08
    2216:	b9 87       	std	Y+9, r27	; 0x09
    2218:	36 c0       	rjmp	.+108    	; 0x2286 <LCD_WriteNumber4Bit+0xee>
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	9a 81       	ldd	r25, Y+2	; 0x02
    221e:	ab 81       	ldd	r26, Y+3	; 0x03
    2220:	bc 81       	ldd	r27, Y+4	; 0x04
    2222:	2a e0       	ldi	r18, 0x0A	; 10
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	50 e0       	ldi	r21, 0x00	; 0
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	0e 94 09 20 	call	0x4012	; 0x4012 <__mulsi3>
    2232:	7b 01       	movw	r14, r22
    2234:	8c 01       	movw	r16, r24
    2236:	8e 81       	ldd	r24, Y+6	; 0x06
    2238:	9f 81       	ldd	r25, Y+7	; 0x07
    223a:	a8 85       	ldd	r26, Y+8	; 0x08
    223c:	b9 85       	ldd	r27, Y+9	; 0x09
    223e:	2a e0       	ldi	r18, 0x0A	; 10
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e0       	ldi	r20, 0x00	; 0
    2244:	50 e0       	ldi	r21, 0x00	; 0
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 34 20 	call	0x4068	; 0x4068 <__divmodsi4>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	8e 0d       	add	r24, r14
    2254:	9f 1d       	adc	r25, r15
    2256:	a0 1f       	adc	r26, r16
    2258:	b1 1f       	adc	r27, r17
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	ab 83       	std	Y+3, r26	; 0x03
    2260:	bc 83       	std	Y+4, r27	; 0x04
		Number = Number / 10;
    2262:	8e 81       	ldd	r24, Y+6	; 0x06
    2264:	9f 81       	ldd	r25, Y+7	; 0x07
    2266:	a8 85       	ldd	r26, Y+8	; 0x08
    2268:	b9 85       	ldd	r27, Y+9	; 0x09
    226a:	2a e0       	ldi	r18, 0x0A	; 10
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 34 20 	call	0x4068	; 0x4068 <__divmodsi4>
    227a:	da 01       	movw	r26, r20
    227c:	c9 01       	movw	r24, r18
    227e:	8e 83       	std	Y+6, r24	; 0x06
    2280:	9f 83       	std	Y+7, r25	; 0x07
    2282:	a8 87       	std	Y+8, r26	; 0x08
    2284:	b9 87       	std	Y+9, r27	; 0x09
	}
	else if(Number < 0){
		LCD_WriteData4Bit('-');
		Number = Number * (-1);
	}
	while(Number){
    2286:	8e 81       	ldd	r24, Y+6	; 0x06
    2288:	9f 81       	ldd	r25, Y+7	; 0x07
    228a:	a8 85       	ldd	r26, Y+8	; 0x08
    228c:	b9 85       	ldd	r27, Y+9	; 0x09
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	a1 05       	cpc	r26, r1
    2292:	b1 05       	cpc	r27, r1
    2294:	11 f6       	brne	.-124    	; 0x221a <LCD_WriteNumber4Bit+0x82>
    2296:	23 c0       	rjmp	.+70     	; 0x22de <LCD_WriteNumber4Bit+0x146>
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
		LCD_WriteData4Bit((NUM % 10) + 48);
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	9a 81       	ldd	r25, Y+2	; 0x02
    229c:	ab 81       	ldd	r26, Y+3	; 0x03
    229e:	bc 81       	ldd	r27, Y+4	; 0x04
    22a0:	2a e0       	ldi	r18, 0x0A	; 10
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	50 e0       	ldi	r21, 0x00	; 0
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 34 20 	call	0x4068	; 0x4068 <__divmodsi4>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	80 5d       	subi	r24, 0xD0	; 208
    22b6:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <LCD_WriteData4Bit>
		NUM = (NUM / 10);
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	9a 81       	ldd	r25, Y+2	; 0x02
    22be:	ab 81       	ldd	r26, Y+3	; 0x03
    22c0:	bc 81       	ldd	r27, Y+4	; 0x04
    22c2:	2a e0       	ldi	r18, 0x0A	; 10
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	bc 01       	movw	r22, r24
    22cc:	cd 01       	movw	r24, r26
    22ce:	0e 94 34 20 	call	0x4068	; 0x4068 <__divmodsi4>
    22d2:	da 01       	movw	r26, r20
    22d4:	c9 01       	movw	r24, r18
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	9a 83       	std	Y+2, r25	; 0x02
    22da:	ab 83       	std	Y+3, r26	; 0x03
    22dc:	bc 83       	std	Y+4, r27	; 0x04
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	ab 81       	ldd	r26, Y+3	; 0x03
    22e4:	bc 81       	ldd	r27, Y+4	; 0x04
    22e6:	81 30       	cpi	r24, 0x01	; 1
    22e8:	91 05       	cpc	r25, r1
    22ea:	a1 05       	cpc	r26, r1
    22ec:	b1 05       	cpc	r27, r1
    22ee:	a1 f6       	brne	.-88     	; 0x2298 <LCD_WriteNumber4Bit+0x100>
		LCD_WriteData4Bit((NUM % 10) + 48);
		NUM = (NUM / 10);
	}
	Local_enuErrorstate = ES_OK;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	8d 83       	std	Y+5, r24	; 0x05
	return Local_enuErrorstate;
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05

}
    22f6:	29 96       	adiw	r28, 0x09	; 9
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	ff 90       	pop	r15
    230c:	ef 90       	pop	r14
    230e:	08 95       	ret

00002310 <LCD_ClearDisplay8Bit>:

ES_t LCD_ClearDisplay8Bit(void){
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	0f 92       	push	r0
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    231a:	19 82       	std	Y+1, r1	; 0x01
	LCD_WriteCommand8Bit(1);
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_WriteCommand8Bit>
	Local_enuErrorstate = ES_OK;
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorstate;
    2326:	89 81       	ldd	r24, Y+1	; 0x01
}
    2328:	0f 90       	pop	r0
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <LCD_ClearDisplay4Bit>:
ES_t LCD_ClearDisplay4Bit(void){
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	0f 92       	push	r0
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    233a:	19 82       	std	Y+1, r1	; 0x01
		LCD_WriteCommand4Bit(1);
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_WriteCommand4Bit>
		Local_enuErrorstate = ES_OK;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	89 83       	std	Y+1, r24	; 0x01
			return Local_enuErrorstate;
    2346:	89 81       	ldd	r24, Y+1	; 0x01
}
    2348:	0f 90       	pop	r0
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <SetDirections8Bit>:



/*		LOCAL FUNCTIONS Implementation		*/

static void SetDirections8Bit(void){
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(DATA_PORT_8_BIT,0xff);
    2358:	82 e0       	ldi	r24, 0x02	; 2
    235a:	6f ef       	ldi	r22, 0xFF	; 255
    235c:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_SetPortDirection>
	DIO_SetPinDirection(CONTROL_PORT,RS_PIN,OUTPUT);
    2360:	83 e0       	ldi	r24, 0x03	; 3
    2362:	66 e0       	ldi	r22, 0x06	; 6
    2364:	41 e0       	ldi	r20, 0x01	; 1
    2366:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_SetPinDirection>
	DIO_SetPinDirection(CONTROL_PORT,E_PIN,OUTPUT);
    236a:	83 e0       	ldi	r24, 0x03	; 3
    236c:	67 e0       	ldi	r22, 0x07	; 7
    236e:	41 e0       	ldi	r20, 0x01	; 1
    2370:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_SetPinDirection>
}
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <SetDirections4Bit>:
static void SetDirections4Bit(void){
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(DATA_PORT_8_BIT,0xf);
    2382:	82 e0       	ldi	r24, 0x02	; 2
    2384:	6f e0       	ldi	r22, 0x0F	; 15
    2386:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_SetPortDirection>
	DIO_SetPinDirection(CONTROL_PORT,RS_PIN,OUTPUT);
    238a:	83 e0       	ldi	r24, 0x03	; 3
    238c:	66 e0       	ldi	r22, 0x06	; 6
    238e:	41 e0       	ldi	r20, 0x01	; 1
    2390:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_SetPinDirection>
	DIO_SetPinDirection(CONTROL_PORT,E_PIN,OUTPUT);
    2394:	83 e0       	ldi	r24, 0x03	; 3
    2396:	67 e0       	ldi	r22, 0x07	; 7
    2398:	41 e0       	ldi	r20, 0x01	; 1
    239a:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_SetPinDirection>
}
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <SendEnablePulse>:


static void SendEnablePulse(void){
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	6c 97       	sbiw	r28, 0x1c	; 28
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(CONTROL_PORT,E_PIN,HIGH);
    23b8:	83 e0       	ldi	r24, 0x03	; 3
    23ba:	67 e0       	ldi	r22, 0x07	; 7
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	a0 e0       	ldi	r26, 0x00	; 0
    23c8:	b0 e4       	ldi	r27, 0x40	; 64
    23ca:	89 8f       	std	Y+25, r24	; 0x19
    23cc:	9a 8f       	std	Y+26, r25	; 0x1a
    23ce:	ab 8f       	std	Y+27, r26	; 0x1b
    23d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d2:	69 8d       	ldd	r22, Y+25	; 0x19
    23d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	4a ef       	ldi	r20, 0xFA	; 250
    23e0:	54 e4       	ldi	r21, 0x44	; 68
    23e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	8d 8b       	std	Y+21, r24	; 0x15
    23ec:	9e 8b       	std	Y+22, r25	; 0x16
    23ee:	af 8b       	std	Y+23, r26	; 0x17
    23f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23f2:	6d 89       	ldd	r22, Y+21	; 0x15
    23f4:	7e 89       	ldd	r23, Y+22	; 0x16
    23f6:	8f 89       	ldd	r24, Y+23	; 0x17
    23f8:	98 8d       	ldd	r25, Y+24	; 0x18
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e8       	ldi	r20, 0x80	; 128
    2400:	5f e3       	ldi	r21, 0x3F	; 63
    2402:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2406:	88 23       	and	r24, r24
    2408:	2c f4       	brge	.+10     	; 0x2414 <SendEnablePulse+0x70>
		__ticks = 1;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9c 8b       	std	Y+20, r25	; 0x14
    2410:	8b 8b       	std	Y+19, r24	; 0x13
    2412:	3f c0       	rjmp	.+126    	; 0x2492 <SendEnablePulse+0xee>
	else if (__tmp > 65535)
    2414:	6d 89       	ldd	r22, Y+21	; 0x15
    2416:	7e 89       	ldd	r23, Y+22	; 0x16
    2418:	8f 89       	ldd	r24, Y+23	; 0x17
    241a:	98 8d       	ldd	r25, Y+24	; 0x18
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	3f ef       	ldi	r19, 0xFF	; 255
    2420:	4f e7       	ldi	r20, 0x7F	; 127
    2422:	57 e4       	ldi	r21, 0x47	; 71
    2424:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2428:	18 16       	cp	r1, r24
    242a:	4c f5       	brge	.+82     	; 0x247e <SendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242c:	69 8d       	ldd	r22, Y+25	; 0x19
    242e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e2       	ldi	r20, 0x20	; 32
    243a:	51 e4       	ldi	r21, 0x41	; 65
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9c 8b       	std	Y+20, r25	; 0x14
    2452:	8b 8b       	std	Y+19, r24	; 0x13
    2454:	0f c0       	rjmp	.+30     	; 0x2474 <SendEnablePulse+0xd0>
    2456:	88 ec       	ldi	r24, 0xC8	; 200
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9a 8b       	std	Y+18, r25	; 0x12
    245c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    245e:	89 89       	ldd	r24, Y+17	; 0x11
    2460:	9a 89       	ldd	r25, Y+18	; 0x12
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <SendEnablePulse+0xbe>
    2466:	9a 8b       	std	Y+18, r25	; 0x12
    2468:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246a:	8b 89       	ldd	r24, Y+19	; 0x13
    246c:	9c 89       	ldd	r25, Y+20	; 0x14
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	9c 8b       	std	Y+20, r25	; 0x14
    2472:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2474:	8b 89       	ldd	r24, Y+19	; 0x13
    2476:	9c 89       	ldd	r25, Y+20	; 0x14
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	69 f7       	brne	.-38     	; 0x2456 <SendEnablePulse+0xb2>
    247c:	14 c0       	rjmp	.+40     	; 0x24a6 <SendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247e:	6d 89       	ldd	r22, Y+21	; 0x15
    2480:	7e 89       	ldd	r23, Y+22	; 0x16
    2482:	8f 89       	ldd	r24, Y+23	; 0x17
    2484:	98 8d       	ldd	r25, Y+24	; 0x18
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9c 8b       	std	Y+20, r25	; 0x14
    2490:	8b 8b       	std	Y+19, r24	; 0x13
    2492:	8b 89       	ldd	r24, Y+19	; 0x13
    2494:	9c 89       	ldd	r25, Y+20	; 0x14
    2496:	98 8b       	std	Y+16, r25	; 0x10
    2498:	8f 87       	std	Y+15, r24	; 0x0f
    249a:	8f 85       	ldd	r24, Y+15	; 0x0f
    249c:	98 89       	ldd	r25, Y+16	; 0x10
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <SendEnablePulse+0xfa>
    24a2:	98 8b       	std	Y+16, r25	; 0x10
    24a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(CONTROL_PORT,E_PIN,LOW);
    24a6:	83 e0       	ldi	r24, 0x03	; 3
    24a8:	67 e0       	ldi	r22, 0x07	; 7
    24aa:	40 e0       	ldi	r20, 0x00	; 0
    24ac:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a0 ea       	ldi	r26, 0xA0	; 160
    24b6:	b0 e4       	ldi	r27, 0x40	; 64
    24b8:	8b 87       	std	Y+11, r24	; 0x0b
    24ba:	9c 87       	std	Y+12, r25	; 0x0c
    24bc:	ad 87       	std	Y+13, r26	; 0x0d
    24be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	4a ef       	ldi	r20, 0xFA	; 250
    24ce:	54 e4       	ldi	r21, 0x44	; 68
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	8f 83       	std	Y+7, r24	; 0x07
    24da:	98 87       	std	Y+8, r25	; 0x08
    24dc:	a9 87       	std	Y+9, r26	; 0x09
    24de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24e0:	6f 81       	ldd	r22, Y+7	; 0x07
    24e2:	78 85       	ldd	r23, Y+8	; 0x08
    24e4:	89 85       	ldd	r24, Y+9	; 0x09
    24e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	2c f4       	brge	.+10     	; 0x2502 <SendEnablePulse+0x15e>
		__ticks = 1;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	3f c0       	rjmp	.+126    	; 0x2580 <SendEnablePulse+0x1dc>
	else if (__tmp > 65535)
    2502:	6f 81       	ldd	r22, Y+7	; 0x07
    2504:	78 85       	ldd	r23, Y+8	; 0x08
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	3f ef       	ldi	r19, 0xFF	; 255
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	57 e4       	ldi	r21, 0x47	; 71
    2512:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	4c f5       	brge	.+82     	; 0x256c <SendEnablePulse+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251a:	6b 85       	ldd	r22, Y+11	; 0x0b
    251c:	7c 85       	ldd	r23, Y+12	; 0x0c
    251e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2520:	9e 85       	ldd	r25, Y+14	; 0x0e
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e2       	ldi	r20, 0x20	; 32
    2528:	51 e4       	ldi	r21, 0x41	; 65
    252a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	0f c0       	rjmp	.+30     	; 0x2562 <SendEnablePulse+0x1be>
    2544:	88 ec       	ldi	r24, 0xC8	; 200
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9c 83       	std	Y+4, r25	; 0x04
    254a:	8b 83       	std	Y+3, r24	; 0x03
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <SendEnablePulse+0x1ac>
    2554:	9c 83       	std	Y+4, r25	; 0x04
    2556:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2558:	8d 81       	ldd	r24, Y+5	; 0x05
    255a:	9e 81       	ldd	r25, Y+6	; 0x06
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2562:	8d 81       	ldd	r24, Y+5	; 0x05
    2564:	9e 81       	ldd	r25, Y+6	; 0x06
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	69 f7       	brne	.-38     	; 0x2544 <SendEnablePulse+0x1a0>
    256a:	14 c0       	rjmp	.+40     	; 0x2594 <SendEnablePulse+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256c:	6f 81       	ldd	r22, Y+7	; 0x07
    256e:	78 85       	ldd	r23, Y+8	; 0x08
    2570:	89 85       	ldd	r24, Y+9	; 0x09
    2572:	9a 85       	ldd	r25, Y+10	; 0x0a
    2574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	9a 83       	std	Y+2, r25	; 0x02
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	9a 81       	ldd	r25, Y+2	; 0x02
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <SendEnablePulse+0x1e8>
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2594:	6c 96       	adiw	r28, 0x1c	; 28
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61
    25a0:	cf 91       	pop	r28
    25a2:	df 91       	pop	r29
    25a4:	08 95       	ret

000025a6 <FunctionSet8Bit>:
/****************************************************/
static void FunctionSet8Bit(void){
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	2e 97       	sbiw	r28, 0x0e	; 14
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	f8 94       	cli
    25b4:	de bf       	out	0x3e, r29	; 62
    25b6:	0f be       	out	0x3f, r0	; 63
    25b8:	cd bf       	out	0x3d, r28	; 61
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	a8 e4       	ldi	r26, 0x48	; 72
    25c0:	b2 e4       	ldi	r27, 0x42	; 66
    25c2:	8b 87       	std	Y+11, r24	; 0x0b
    25c4:	9c 87       	std	Y+12, r25	; 0x0c
    25c6:	ad 87       	std	Y+13, r26	; 0x0d
    25c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    25cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	4a ef       	ldi	r20, 0xFA	; 250
    25d8:	54 e4       	ldi	r21, 0x44	; 68
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	8f 83       	std	Y+7, r24	; 0x07
    25e4:	98 87       	std	Y+8, r25	; 0x08
    25e6:	a9 87       	std	Y+9, r26	; 0x09
    25e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e8       	ldi	r20, 0x80	; 128
    25f8:	5f e3       	ldi	r21, 0x3F	; 63
    25fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25fe:	88 23       	and	r24, r24
    2600:	2c f4       	brge	.+10     	; 0x260c <FunctionSet8Bit+0x66>
		__ticks = 1;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
    260a:	3f c0       	rjmp	.+126    	; 0x268a <FunctionSet8Bit+0xe4>
	else if (__tmp > 65535)
    260c:	6f 81       	ldd	r22, Y+7	; 0x07
    260e:	78 85       	ldd	r23, Y+8	; 0x08
    2610:	89 85       	ldd	r24, Y+9	; 0x09
    2612:	9a 85       	ldd	r25, Y+10	; 0x0a
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	3f ef       	ldi	r19, 0xFF	; 255
    2618:	4f e7       	ldi	r20, 0x7F	; 127
    261a:	57 e4       	ldi	r21, 0x47	; 71
    261c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2620:	18 16       	cp	r1, r24
    2622:	4c f5       	brge	.+82     	; 0x2676 <FunctionSet8Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2624:	6b 85       	ldd	r22, Y+11	; 0x0b
    2626:	7c 85       	ldd	r23, Y+12	; 0x0c
    2628:	8d 85       	ldd	r24, Y+13	; 0x0d
    262a:	9e 85       	ldd	r25, Y+14	; 0x0e
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e2       	ldi	r20, 0x20	; 32
    2632:	51 e4       	ldi	r21, 0x41	; 65
    2634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	9e 83       	std	Y+6, r25	; 0x06
    264a:	8d 83       	std	Y+5, r24	; 0x05
    264c:	0f c0       	rjmp	.+30     	; 0x266c <FunctionSet8Bit+0xc6>
    264e:	88 ec       	ldi	r24, 0xC8	; 200
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	9c 83       	std	Y+4, r25	; 0x04
    2654:	8b 83       	std	Y+3, r24	; 0x03
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
    2658:	9c 81       	ldd	r25, Y+4	; 0x04
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <FunctionSet8Bit+0xb4>
    265e:	9c 83       	std	Y+4, r25	; 0x04
    2660:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	9e 81       	ldd	r25, Y+6	; 0x06
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	9e 83       	std	Y+6, r25	; 0x06
    266a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	69 f7       	brne	.-38     	; 0x264e <FunctionSet8Bit+0xa8>
    2674:	14 c0       	rjmp	.+40     	; 0x269e <FunctionSet8Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
    268a:	8d 81       	ldd	r24, Y+5	; 0x05
    268c:	9e 81       	ldd	r25, Y+6	; 0x06
    268e:	9a 83       	std	Y+2, r25	; 0x02
    2690:	89 83       	std	Y+1, r24	; 0x01
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	9a 81       	ldd	r25, Y+2	; 0x02
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <FunctionSet8Bit+0xf0>
    269a:	9a 83       	std	Y+2, r25	; 0x02
    269c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_WriteCommand8Bit(0x3C);
    269e:	8c e3       	ldi	r24, 0x3C	; 60
    26a0:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_WriteCommand8Bit>
}
    26a4:	2e 96       	adiw	r28, 0x0e	; 14
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	08 95       	ret

000026b6 <DisplayOnOffControl8Bit>:
static void DisplayOnOffControl8Bit(void){
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	68 97       	sbiw	r28, 0x18	; 24
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a8 e4       	ldi	r26, 0x48	; 72
    26d0:	b2 e4       	ldi	r27, 0x42	; 66
    26d2:	8d 8b       	std	Y+21, r24	; 0x15
    26d4:	9e 8b       	std	Y+22, r25	; 0x16
    26d6:	af 8b       	std	Y+23, r26	; 0x17
    26d8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26da:	6d 89       	ldd	r22, Y+21	; 0x15
    26dc:	7e 89       	ldd	r23, Y+22	; 0x16
    26de:	8f 89       	ldd	r24, Y+23	; 0x17
    26e0:	98 8d       	ldd	r25, Y+24	; 0x18
    26e2:	2b ea       	ldi	r18, 0xAB	; 171
    26e4:	3a ea       	ldi	r19, 0xAA	; 170
    26e6:	4a e2       	ldi	r20, 0x2A	; 42
    26e8:	50 e4       	ldi	r21, 0x40	; 64
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	89 8b       	std	Y+17, r24	; 0x11
    26f4:	9a 8b       	std	Y+18, r25	; 0x12
    26f6:	ab 8b       	std	Y+19, r26	; 0x13
    26f8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    26fa:	69 89       	ldd	r22, Y+17	; 0x11
    26fc:	7a 89       	ldd	r23, Y+18	; 0x12
    26fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2700:	9c 89       	ldd	r25, Y+20	; 0x14
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e8       	ldi	r20, 0x80	; 128
    2708:	5f e3       	ldi	r21, 0x3F	; 63
    270a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    270e:	88 23       	and	r24, r24
    2710:	1c f4       	brge	.+6      	; 0x2718 <DisplayOnOffControl8Bit+0x62>
		__ticks = 1;
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	88 8b       	std	Y+16, r24	; 0x10
    2716:	91 c0       	rjmp	.+290    	; 0x283a <DisplayOnOffControl8Bit+0x184>
	else if (__tmp > 255)
    2718:	69 89       	ldd	r22, Y+17	; 0x11
    271a:	7a 89       	ldd	r23, Y+18	; 0x12
    271c:	8b 89       	ldd	r24, Y+19	; 0x13
    271e:	9c 89       	ldd	r25, Y+20	; 0x14
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	53 e4       	ldi	r21, 0x43	; 67
    2728:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	0c f0       	brlt	.+2      	; 0x2732 <DisplayOnOffControl8Bit+0x7c>
    2730:	7b c0       	rjmp	.+246    	; 0x2828 <DisplayOnOffControl8Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    2732:	6d 89       	ldd	r22, Y+21	; 0x15
    2734:	7e 89       	ldd	r23, Y+22	; 0x16
    2736:	8f 89       	ldd	r24, Y+23	; 0x17
    2738:	98 8d       	ldd	r25, Y+24	; 0x18
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	4a e7       	ldi	r20, 0x7A	; 122
    2740:	54 e4       	ldi	r21, 0x44	; 68
    2742:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	8c 87       	std	Y+12, r24	; 0x0c
    274c:	9d 87       	std	Y+13, r25	; 0x0d
    274e:	ae 87       	std	Y+14, r26	; 0x0e
    2750:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2752:	6c 85       	ldd	r22, Y+12	; 0x0c
    2754:	7d 85       	ldd	r23, Y+13	; 0x0d
    2756:	8e 85       	ldd	r24, Y+14	; 0x0e
    2758:	9f 85       	ldd	r25, Y+15	; 0x0f
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	4a ef       	ldi	r20, 0xFA	; 250
    2760:	54 e4       	ldi	r21, 0x44	; 68
    2762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	88 87       	std	Y+8, r24	; 0x08
    276c:	99 87       	std	Y+9, r25	; 0x09
    276e:	aa 87       	std	Y+10, r26	; 0x0a
    2770:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2772:	68 85       	ldd	r22, Y+8	; 0x08
    2774:	79 85       	ldd	r23, Y+9	; 0x09
    2776:	8a 85       	ldd	r24, Y+10	; 0x0a
    2778:	9b 85       	ldd	r25, Y+11	; 0x0b
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e8       	ldi	r20, 0x80	; 128
    2780:	5f e3       	ldi	r21, 0x3F	; 63
    2782:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2786:	88 23       	and	r24, r24
    2788:	2c f4       	brge	.+10     	; 0x2794 <DisplayOnOffControl8Bit+0xde>
		__ticks = 1;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9f 83       	std	Y+7, r25	; 0x07
    2790:	8e 83       	std	Y+6, r24	; 0x06
    2792:	3f c0       	rjmp	.+126    	; 0x2812 <DisplayOnOffControl8Bit+0x15c>
	else if (__tmp > 65535)
    2794:	68 85       	ldd	r22, Y+8	; 0x08
    2796:	79 85       	ldd	r23, Y+9	; 0x09
    2798:	8a 85       	ldd	r24, Y+10	; 0x0a
    279a:	9b 85       	ldd	r25, Y+11	; 0x0b
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	3f ef       	ldi	r19, 0xFF	; 255
    27a0:	4f e7       	ldi	r20, 0x7F	; 127
    27a2:	57 e4       	ldi	r21, 0x47	; 71
    27a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a8:	18 16       	cp	r1, r24
    27aa:	4c f5       	brge	.+82     	; 0x27fe <DisplayOnOffControl8Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    27ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    27b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    27b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e2       	ldi	r20, 0x20	; 32
    27ba:	51 e4       	ldi	r21, 0x41	; 65
    27bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	bc 01       	movw	r22, r24
    27c6:	cd 01       	movw	r24, r26
    27c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	9f 83       	std	Y+7, r25	; 0x07
    27d2:	8e 83       	std	Y+6, r24	; 0x06
    27d4:	0f c0       	rjmp	.+30     	; 0x27f4 <DisplayOnOffControl8Bit+0x13e>
    27d6:	88 ec       	ldi	r24, 0xC8	; 200
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	9d 83       	std	Y+5, r25	; 0x05
    27dc:	8c 83       	std	Y+4, r24	; 0x04
    27de:	8c 81       	ldd	r24, Y+4	; 0x04
    27e0:	9d 81       	ldd	r25, Y+5	; 0x05
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <DisplayOnOffControl8Bit+0x12c>
    27e6:	9d 83       	std	Y+5, r25	; 0x05
    27e8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ea:	8e 81       	ldd	r24, Y+6	; 0x06
    27ec:	9f 81       	ldd	r25, Y+7	; 0x07
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	9f 83       	std	Y+7, r25	; 0x07
    27f2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f4:	8e 81       	ldd	r24, Y+6	; 0x06
    27f6:	9f 81       	ldd	r25, Y+7	; 0x07
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	69 f7       	brne	.-38     	; 0x27d6 <DisplayOnOffControl8Bit+0x120>
    27fc:	24 c0       	rjmp	.+72     	; 0x2846 <DisplayOnOffControl8Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fe:	68 85       	ldd	r22, Y+8	; 0x08
    2800:	79 85       	ldd	r23, Y+9	; 0x09
    2802:	8a 85       	ldd	r24, Y+10	; 0x0a
    2804:	9b 85       	ldd	r25, Y+11	; 0x0b
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9f 83       	std	Y+7, r25	; 0x07
    2810:	8e 83       	std	Y+6, r24	; 0x06
    2812:	8e 81       	ldd	r24, Y+6	; 0x06
    2814:	9f 81       	ldd	r25, Y+7	; 0x07
    2816:	9b 83       	std	Y+3, r25	; 0x03
    2818:	8a 83       	std	Y+2, r24	; 0x02
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	9b 81       	ldd	r25, Y+3	; 0x03
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <DisplayOnOffControl8Bit+0x168>
    2822:	9b 83       	std	Y+3, r25	; 0x03
    2824:	8a 83       	std	Y+2, r24	; 0x02
    2826:	0f c0       	rjmp	.+30     	; 0x2846 <DisplayOnOffControl8Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2828:	69 89       	ldd	r22, Y+17	; 0x11
    282a:	7a 89       	ldd	r23, Y+18	; 0x12
    282c:	8b 89       	ldd	r24, Y+19	; 0x13
    282e:	9c 89       	ldd	r25, Y+20	; 0x14
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	88 8b       	std	Y+16, r24	; 0x10
    283a:	88 89       	ldd	r24, Y+16	; 0x10
    283c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	8a 95       	dec	r24
    2842:	f1 f7       	brne	.-4      	; 0x2840 <DisplayOnOffControl8Bit+0x18a>
    2844:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	LCD_WriteCommand8Bit(0x0E);
    2846:	8e e0       	ldi	r24, 0x0E	; 14
    2848:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_WriteCommand8Bit>
}
    284c:	68 96       	adiw	r28, 0x18	; 24
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <DisplayClear8Bit>:
static void DisplayClear8Bit(void){
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	68 97       	sbiw	r28, 0x18	; 24
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	cd bf       	out	0x3d, r28	; 61
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	a8 e4       	ldi	r26, 0x48	; 72
    2878:	b2 e4       	ldi	r27, 0x42	; 66
    287a:	8d 8b       	std	Y+21, r24	; 0x15
    287c:	9e 8b       	std	Y+22, r25	; 0x16
    287e:	af 8b       	std	Y+23, r26	; 0x17
    2880:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2882:	6d 89       	ldd	r22, Y+21	; 0x15
    2884:	7e 89       	ldd	r23, Y+22	; 0x16
    2886:	8f 89       	ldd	r24, Y+23	; 0x17
    2888:	98 8d       	ldd	r25, Y+24	; 0x18
    288a:	2b ea       	ldi	r18, 0xAB	; 171
    288c:	3a ea       	ldi	r19, 0xAA	; 170
    288e:	4a e2       	ldi	r20, 0x2A	; 42
    2890:	50 e4       	ldi	r21, 0x40	; 64
    2892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	89 8b       	std	Y+17, r24	; 0x11
    289c:	9a 8b       	std	Y+18, r25	; 0x12
    289e:	ab 8b       	std	Y+19, r26	; 0x13
    28a0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28a2:	69 89       	ldd	r22, Y+17	; 0x11
    28a4:	7a 89       	ldd	r23, Y+18	; 0x12
    28a6:	8b 89       	ldd	r24, Y+19	; 0x13
    28a8:	9c 89       	ldd	r25, Y+20	; 0x14
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e8       	ldi	r20, 0x80	; 128
    28b0:	5f e3       	ldi	r21, 0x3F	; 63
    28b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b6:	88 23       	and	r24, r24
    28b8:	1c f4       	brge	.+6      	; 0x28c0 <DisplayClear8Bit+0x62>
		__ticks = 1;
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	88 8b       	std	Y+16, r24	; 0x10
    28be:	91 c0       	rjmp	.+290    	; 0x29e2 <DisplayClear8Bit+0x184>
	else if (__tmp > 255)
    28c0:	69 89       	ldd	r22, Y+17	; 0x11
    28c2:	7a 89       	ldd	r23, Y+18	; 0x12
    28c4:	8b 89       	ldd	r24, Y+19	; 0x13
    28c6:	9c 89       	ldd	r25, Y+20	; 0x14
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	4f e7       	ldi	r20, 0x7F	; 127
    28ce:	53 e4       	ldi	r21, 0x43	; 67
    28d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d4:	18 16       	cp	r1, r24
    28d6:	0c f0       	brlt	.+2      	; 0x28da <DisplayClear8Bit+0x7c>
    28d8:	7b c0       	rjmp	.+246    	; 0x29d0 <DisplayClear8Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    28da:	6d 89       	ldd	r22, Y+21	; 0x15
    28dc:	7e 89       	ldd	r23, Y+22	; 0x16
    28de:	8f 89       	ldd	r24, Y+23	; 0x17
    28e0:	98 8d       	ldd	r25, Y+24	; 0x18
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	4a e7       	ldi	r20, 0x7A	; 122
    28e8:	54 e4       	ldi	r21, 0x44	; 68
    28ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	8c 87       	std	Y+12, r24	; 0x0c
    28f4:	9d 87       	std	Y+13, r25	; 0x0d
    28f6:	ae 87       	std	Y+14, r26	; 0x0e
    28f8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    28fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    28fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2900:	9f 85       	ldd	r25, Y+15	; 0x0f
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	4a ef       	ldi	r20, 0xFA	; 250
    2908:	54 e4       	ldi	r21, 0x44	; 68
    290a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	88 87       	std	Y+8, r24	; 0x08
    2914:	99 87       	std	Y+9, r25	; 0x09
    2916:	aa 87       	std	Y+10, r26	; 0x0a
    2918:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    291a:	68 85       	ldd	r22, Y+8	; 0x08
    291c:	79 85       	ldd	r23, Y+9	; 0x09
    291e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2920:	9b 85       	ldd	r25, Y+11	; 0x0b
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e8       	ldi	r20, 0x80	; 128
    2928:	5f e3       	ldi	r21, 0x3F	; 63
    292a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    292e:	88 23       	and	r24, r24
    2930:	2c f4       	brge	.+10     	; 0x293c <DisplayClear8Bit+0xde>
		__ticks = 1;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9f 83       	std	Y+7, r25	; 0x07
    2938:	8e 83       	std	Y+6, r24	; 0x06
    293a:	3f c0       	rjmp	.+126    	; 0x29ba <DisplayClear8Bit+0x15c>
	else if (__tmp > 65535)
    293c:	68 85       	ldd	r22, Y+8	; 0x08
    293e:	79 85       	ldd	r23, Y+9	; 0x09
    2940:	8a 85       	ldd	r24, Y+10	; 0x0a
    2942:	9b 85       	ldd	r25, Y+11	; 0x0b
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	3f ef       	ldi	r19, 0xFF	; 255
    2948:	4f e7       	ldi	r20, 0x7F	; 127
    294a:	57 e4       	ldi	r21, 0x47	; 71
    294c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2950:	18 16       	cp	r1, r24
    2952:	4c f5       	brge	.+82     	; 0x29a6 <DisplayClear8Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2954:	6c 85       	ldd	r22, Y+12	; 0x0c
    2956:	7d 85       	ldd	r23, Y+13	; 0x0d
    2958:	8e 85       	ldd	r24, Y+14	; 0x0e
    295a:	9f 85       	ldd	r25, Y+15	; 0x0f
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e2       	ldi	r20, 0x20	; 32
    2962:	51 e4       	ldi	r21, 0x41	; 65
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	9f 83       	std	Y+7, r25	; 0x07
    297a:	8e 83       	std	Y+6, r24	; 0x06
    297c:	0f c0       	rjmp	.+30     	; 0x299c <DisplayClear8Bit+0x13e>
    297e:	88 ec       	ldi	r24, 0xC8	; 200
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	9d 83       	std	Y+5, r25	; 0x05
    2984:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2986:	8c 81       	ldd	r24, Y+4	; 0x04
    2988:	9d 81       	ldd	r25, Y+5	; 0x05
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <DisplayClear8Bit+0x12c>
    298e:	9d 83       	std	Y+5, r25	; 0x05
    2990:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2992:	8e 81       	ldd	r24, Y+6	; 0x06
    2994:	9f 81       	ldd	r25, Y+7	; 0x07
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	9f 83       	std	Y+7, r25	; 0x07
    299a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299c:	8e 81       	ldd	r24, Y+6	; 0x06
    299e:	9f 81       	ldd	r25, Y+7	; 0x07
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	69 f7       	brne	.-38     	; 0x297e <DisplayClear8Bit+0x120>
    29a4:	24 c0       	rjmp	.+72     	; 0x29ee <DisplayClear8Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a6:	68 85       	ldd	r22, Y+8	; 0x08
    29a8:	79 85       	ldd	r23, Y+9	; 0x09
    29aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9f 83       	std	Y+7, r25	; 0x07
    29b8:	8e 83       	std	Y+6, r24	; 0x06
    29ba:	8e 81       	ldd	r24, Y+6	; 0x06
    29bc:	9f 81       	ldd	r25, Y+7	; 0x07
    29be:	9b 83       	std	Y+3, r25	; 0x03
    29c0:	8a 83       	std	Y+2, r24	; 0x02
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	9b 81       	ldd	r25, Y+3	; 0x03
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <DisplayClear8Bit+0x168>
    29ca:	9b 83       	std	Y+3, r25	; 0x03
    29cc:	8a 83       	std	Y+2, r24	; 0x02
    29ce:	0f c0       	rjmp	.+30     	; 0x29ee <DisplayClear8Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29d0:	69 89       	ldd	r22, Y+17	; 0x11
    29d2:	7a 89       	ldd	r23, Y+18	; 0x12
    29d4:	8b 89       	ldd	r24, Y+19	; 0x13
    29d6:	9c 89       	ldd	r25, Y+20	; 0x14
    29d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	88 8b       	std	Y+16, r24	; 0x10
    29e2:	88 89       	ldd	r24, Y+16	; 0x10
    29e4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	8a 95       	dec	r24
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <DisplayClear8Bit+0x18a>
    29ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	LCD_WriteCommand8Bit(0x01);
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_WriteCommand8Bit>
}
    29f4:	68 96       	adiw	r28, 0x18	; 24
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	08 95       	ret

00002a06 <EntryModeSet8Bit>:
static void EntryModeSet8Bit(void){
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	2e 97       	sbiw	r28, 0x0e	; 14
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	a0 e0       	ldi	r26, 0x00	; 0
    2a20:	b0 e4       	ldi	r27, 0x40	; 64
    2a22:	8b 87       	std	Y+11, r24	; 0x0b
    2a24:	9c 87       	std	Y+12, r25	; 0x0c
    2a26:	ad 87       	std	Y+13, r26	; 0x0d
    2a28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	4a ef       	ldi	r20, 0xFA	; 250
    2a38:	54 e4       	ldi	r21, 0x44	; 68
    2a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	8f 83       	std	Y+7, r24	; 0x07
    2a44:	98 87       	std	Y+8, r25	; 0x08
    2a46:	a9 87       	std	Y+9, r26	; 0x09
    2a48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4c:	78 85       	ldd	r23, Y+8	; 0x08
    2a4e:	89 85       	ldd	r24, Y+9	; 0x09
    2a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e8       	ldi	r20, 0x80	; 128
    2a58:	5f e3       	ldi	r21, 0x3F	; 63
    2a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a5e:	88 23       	and	r24, r24
    2a60:	2c f4       	brge	.+10     	; 0x2a6c <EntryModeSet8Bit+0x66>
		__ticks = 1;
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	8d 83       	std	Y+5, r24	; 0x05
    2a6a:	3f c0       	rjmp	.+126    	; 0x2aea <EntryModeSet8Bit+0xe4>
	else if (__tmp > 65535)
    2a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6e:	78 85       	ldd	r23, Y+8	; 0x08
    2a70:	89 85       	ldd	r24, Y+9	; 0x09
    2a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	3f ef       	ldi	r19, 0xFF	; 255
    2a78:	4f e7       	ldi	r20, 0x7F	; 127
    2a7a:	57 e4       	ldi	r21, 0x47	; 71
    2a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a80:	18 16       	cp	r1, r24
    2a82:	4c f5       	brge	.+82     	; 0x2ad6 <EntryModeSet8Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e2       	ldi	r20, 0x20	; 32
    2a92:	51 e4       	ldi	r21, 0x41	; 65
    2a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	9e 83       	std	Y+6, r25	; 0x06
    2aaa:	8d 83       	std	Y+5, r24	; 0x05
    2aac:	0f c0       	rjmp	.+30     	; 0x2acc <EntryModeSet8Bit+0xc6>
    2aae:	88 ec       	ldi	r24, 0xC8	; 200
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	9c 83       	std	Y+4, r25	; 0x04
    2ab4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	f1 f7       	brne	.-4      	; 0x2aba <EntryModeSet8Bit+0xb4>
    2abe:	9c 83       	std	Y+4, r25	; 0x04
    2ac0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	9e 83       	std	Y+6, r25	; 0x06
    2aca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2acc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ace:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad0:	00 97       	sbiw	r24, 0x00	; 0
    2ad2:	69 f7       	brne	.-38     	; 0x2aae <EntryModeSet8Bit+0xa8>
    2ad4:	14 c0       	rjmp	.+40     	; 0x2afe <EntryModeSet8Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad8:	78 85       	ldd	r23, Y+8	; 0x08
    2ada:	89 85       	ldd	r24, Y+9	; 0x09
    2adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	9e 83       	std	Y+6, r25	; 0x06
    2ae8:	8d 83       	std	Y+5, r24	; 0x05
    2aea:	8d 81       	ldd	r24, Y+5	; 0x05
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	9a 83       	std	Y+2, r25	; 0x02
    2af0:	89 83       	std	Y+1, r24	; 0x01
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	9a 81       	ldd	r25, Y+2	; 0x02
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <EntryModeSet8Bit+0xf0>
    2afa:	9a 83       	std	Y+2, r25	; 0x02
    2afc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_WriteCommand8Bit(0x06);
    2afe:	86 e0       	ldi	r24, 0x06	; 6
    2b00:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <LCD_WriteCommand8Bit>
}
    2b04:	2e 96       	adiw	r28, 0x0e	; 14
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	08 95       	ret

00002b16 <FunctionSet4Bit>:
/*****************************************************/
static void FunctionSet4Bit(void){
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	a6 97       	sbiw	r28, 0x26	; 38
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	a8 e4       	ldi	r26, 0x48	; 72
    2b30:	b2 e4       	ldi	r27, 0x42	; 66
    2b32:	8b a3       	std	Y+35, r24	; 0x23
    2b34:	9c a3       	std	Y+36, r25	; 0x24
    2b36:	ad a3       	std	Y+37, r26	; 0x25
    2b38:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b3c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b3e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b40:	9e a1       	ldd	r25, Y+38	; 0x26
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	4a ef       	ldi	r20, 0xFA	; 250
    2b48:	54 e4       	ldi	r21, 0x44	; 68
    2b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	8f 8f       	std	Y+31, r24	; 0x1f
    2b54:	98 a3       	std	Y+32, r25	; 0x20
    2b56:	a9 a3       	std	Y+33, r26	; 0x21
    2b58:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2b5a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b5c:	78 a1       	ldd	r23, Y+32	; 0x20
    2b5e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b60:	9a a1       	ldd	r25, Y+34	; 0x22
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e8       	ldi	r20, 0x80	; 128
    2b68:	5f e3       	ldi	r21, 0x3F	; 63
    2b6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b6e:	88 23       	and	r24, r24
    2b70:	2c f4       	brge	.+10     	; 0x2b7c <FunctionSet4Bit+0x66>
		__ticks = 1;
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	9e 8f       	std	Y+30, r25	; 0x1e
    2b78:	8d 8f       	std	Y+29, r24	; 0x1d
    2b7a:	3f c0       	rjmp	.+126    	; 0x2bfa <FunctionSet4Bit+0xe4>
	else if (__tmp > 65535)
    2b7c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b7e:	78 a1       	ldd	r23, Y+32	; 0x20
    2b80:	89 a1       	ldd	r24, Y+33	; 0x21
    2b82:	9a a1       	ldd	r25, Y+34	; 0x22
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	3f ef       	ldi	r19, 0xFF	; 255
    2b88:	4f e7       	ldi	r20, 0x7F	; 127
    2b8a:	57 e4       	ldi	r21, 0x47	; 71
    2b8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b90:	18 16       	cp	r1, r24
    2b92:	4c f5       	brge	.+82     	; 0x2be6 <FunctionSet4Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b94:	6b a1       	ldd	r22, Y+35	; 0x23
    2b96:	7c a1       	ldd	r23, Y+36	; 0x24
    2b98:	8d a1       	ldd	r24, Y+37	; 0x25
    2b9a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e2       	ldi	r20, 0x20	; 32
    2ba2:	51 e4       	ldi	r21, 0x41	; 65
    2ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	bc 01       	movw	r22, r24
    2bae:	cd 01       	movw	r24, r26
    2bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	9e 8f       	std	Y+30, r25	; 0x1e
    2bba:	8d 8f       	std	Y+29, r24	; 0x1d
    2bbc:	0f c0       	rjmp	.+30     	; 0x2bdc <FunctionSet4Bit+0xc6>
    2bbe:	88 ec       	ldi	r24, 0xC8	; 200
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	9c 8f       	std	Y+28, r25	; 0x1c
    2bc4:	8b 8f       	std	Y+27, r24	; 0x1b
    2bc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <FunctionSet4Bit+0xb4>
    2bce:	9c 8f       	std	Y+28, r25	; 0x1c
    2bd0:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	9e 8f       	std	Y+30, r25	; 0x1e
    2bda:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bde:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	69 f7       	brne	.-38     	; 0x2bbe <FunctionSet4Bit+0xa8>
    2be4:	14 c0       	rjmp	.+40     	; 0x2c0e <FunctionSet4Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2be8:	78 a1       	ldd	r23, Y+32	; 0x20
    2bea:	89 a1       	ldd	r24, Y+33	; 0x21
    2bec:	9a a1       	ldd	r25, Y+34	; 0x22
    2bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	9e 8f       	std	Y+30, r25	; 0x1e
    2bf8:	8d 8f       	std	Y+29, r24	; 0x1d
    2bfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bfe:	9a 8f       	std	Y+26, r25	; 0x1a
    2c00:	89 8f       	std	Y+25, r24	; 0x19
    2c02:	89 8d       	ldd	r24, Y+25	; 0x19
    2c04:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	f1 f7       	brne	.-4      	; 0x2c06 <FunctionSet4Bit+0xf0>
    2c0a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c0c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(50);
	LCD_WriteCommand4Bit(0x2);
    2c0e:	82 e0       	ldi	r24, 0x02	; 2
    2c10:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_WriteCommand4Bit>
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	a0 e2       	ldi	r26, 0x20	; 32
    2c1a:	b1 e4       	ldi	r27, 0x41	; 65
    2c1c:	8d 8b       	std	Y+21, r24	; 0x15
    2c1e:	9e 8b       	std	Y+22, r25	; 0x16
    2c20:	af 8b       	std	Y+23, r26	; 0x17
    2c22:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c24:	6d 89       	ldd	r22, Y+21	; 0x15
    2c26:	7e 89       	ldd	r23, Y+22	; 0x16
    2c28:	8f 89       	ldd	r24, Y+23	; 0x17
    2c2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c2c:	2b ea       	ldi	r18, 0xAB	; 171
    2c2e:	3a ea       	ldi	r19, 0xAA	; 170
    2c30:	4a e2       	ldi	r20, 0x2A	; 42
    2c32:	50 e4       	ldi	r21, 0x40	; 64
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	89 8b       	std	Y+17, r24	; 0x11
    2c3e:	9a 8b       	std	Y+18, r25	; 0x12
    2c40:	ab 8b       	std	Y+19, r26	; 0x13
    2c42:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c44:	69 89       	ldd	r22, Y+17	; 0x11
    2c46:	7a 89       	ldd	r23, Y+18	; 0x12
    2c48:	8b 89       	ldd	r24, Y+19	; 0x13
    2c4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e8       	ldi	r20, 0x80	; 128
    2c52:	5f e3       	ldi	r21, 0x3F	; 63
    2c54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c58:	88 23       	and	r24, r24
    2c5a:	1c f4       	brge	.+6      	; 0x2c62 <FunctionSet4Bit+0x14c>
		__ticks = 1;
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	88 8b       	std	Y+16, r24	; 0x10
    2c60:	91 c0       	rjmp	.+290    	; 0x2d84 <FunctionSet4Bit+0x26e>
	else if (__tmp > 255)
    2c62:	69 89       	ldd	r22, Y+17	; 0x11
    2c64:	7a 89       	ldd	r23, Y+18	; 0x12
    2c66:	8b 89       	ldd	r24, Y+19	; 0x13
    2c68:	9c 89       	ldd	r25, Y+20	; 0x14
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	4f e7       	ldi	r20, 0x7F	; 127
    2c70:	53 e4       	ldi	r21, 0x43	; 67
    2c72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c76:	18 16       	cp	r1, r24
    2c78:	0c f0       	brlt	.+2      	; 0x2c7c <FunctionSet4Bit+0x166>
    2c7a:	7b c0       	rjmp	.+246    	; 0x2d72 <FunctionSet4Bit+0x25c>
	{
		_delay_ms(__us / 1000.0);
    2c7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c80:	8f 89       	ldd	r24, Y+23	; 0x17
    2c82:	98 8d       	ldd	r25, Y+24	; 0x18
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	4a e7       	ldi	r20, 0x7A	; 122
    2c8a:	54 e4       	ldi	r21, 0x44	; 68
    2c8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	8c 87       	std	Y+12, r24	; 0x0c
    2c96:	9d 87       	std	Y+13, r25	; 0x0d
    2c98:	ae 87       	std	Y+14, r26	; 0x0e
    2c9a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c9e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ca0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ca2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	4a ef       	ldi	r20, 0xFA	; 250
    2caa:	54 e4       	ldi	r21, 0x44	; 68
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	88 87       	std	Y+8, r24	; 0x08
    2cb6:	99 87       	std	Y+9, r25	; 0x09
    2cb8:	aa 87       	std	Y+10, r26	; 0x0a
    2cba:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2cbc:	68 85       	ldd	r22, Y+8	; 0x08
    2cbe:	79 85       	ldd	r23, Y+9	; 0x09
    2cc0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cc2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e8       	ldi	r20, 0x80	; 128
    2cca:	5f e3       	ldi	r21, 0x3F	; 63
    2ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cd0:	88 23       	and	r24, r24
    2cd2:	2c f4       	brge	.+10     	; 0x2cde <FunctionSet4Bit+0x1c8>
		__ticks = 1;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	9f 83       	std	Y+7, r25	; 0x07
    2cda:	8e 83       	std	Y+6, r24	; 0x06
    2cdc:	3f c0       	rjmp	.+126    	; 0x2d5c <FunctionSet4Bit+0x246>
	else if (__tmp > 65535)
    2cde:	68 85       	ldd	r22, Y+8	; 0x08
    2ce0:	79 85       	ldd	r23, Y+9	; 0x09
    2ce2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ce4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	3f ef       	ldi	r19, 0xFF	; 255
    2cea:	4f e7       	ldi	r20, 0x7F	; 127
    2cec:	57 e4       	ldi	r21, 0x47	; 71
    2cee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cf2:	18 16       	cp	r1, r24
    2cf4:	4c f5       	brge	.+82     	; 0x2d48 <FunctionSet4Bit+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cf8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cfa:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cfc:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e2       	ldi	r20, 0x20	; 32
    2d04:	51 e4       	ldi	r21, 0x41	; 65
    2d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	9f 83       	std	Y+7, r25	; 0x07
    2d1c:	8e 83       	std	Y+6, r24	; 0x06
    2d1e:	0f c0       	rjmp	.+30     	; 0x2d3e <FunctionSet4Bit+0x228>
    2d20:	88 ec       	ldi	r24, 0xC8	; 200
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	9d 83       	std	Y+5, r25	; 0x05
    2d26:	8c 83       	std	Y+4, r24	; 0x04
    2d28:	8c 81       	ldd	r24, Y+4	; 0x04
    2d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <FunctionSet4Bit+0x216>
    2d30:	9d 83       	std	Y+5, r25	; 0x05
    2d32:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d34:	8e 81       	ldd	r24, Y+6	; 0x06
    2d36:	9f 81       	ldd	r25, Y+7	; 0x07
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	9f 83       	std	Y+7, r25	; 0x07
    2d3c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d40:	9f 81       	ldd	r25, Y+7	; 0x07
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	69 f7       	brne	.-38     	; 0x2d20 <FunctionSet4Bit+0x20a>
    2d46:	24 c0       	rjmp	.+72     	; 0x2d90 <FunctionSet4Bit+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d48:	68 85       	ldd	r22, Y+8	; 0x08
    2d4a:	79 85       	ldd	r23, Y+9	; 0x09
    2d4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	9f 83       	std	Y+7, r25	; 0x07
    2d5a:	8e 83       	std	Y+6, r24	; 0x06
    2d5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d5e:	9f 81       	ldd	r25, Y+7	; 0x07
    2d60:	9b 83       	std	Y+3, r25	; 0x03
    2d62:	8a 83       	std	Y+2, r24	; 0x02
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	9b 81       	ldd	r25, Y+3	; 0x03
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	f1 f7       	brne	.-4      	; 0x2d68 <FunctionSet4Bit+0x252>
    2d6c:	9b 83       	std	Y+3, r25	; 0x03
    2d6e:	8a 83       	std	Y+2, r24	; 0x02
    2d70:	0f c0       	rjmp	.+30     	; 0x2d90 <FunctionSet4Bit+0x27a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d72:	69 89       	ldd	r22, Y+17	; 0x11
    2d74:	7a 89       	ldd	r23, Y+18	; 0x12
    2d76:	8b 89       	ldd	r24, Y+19	; 0x13
    2d78:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	88 8b       	std	Y+16, r24	; 0x10
    2d84:	88 89       	ldd	r24, Y+16	; 0x10
    2d86:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	8a 95       	dec	r24
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <FunctionSet4Bit+0x274>
    2d8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0x28);
    2d90:	88 e2       	ldi	r24, 0x28	; 40
    2d92:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_WriteCommand4Bit>
}
    2d96:	a6 96       	adiw	r28, 0x26	; 38
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	de bf       	out	0x3e, r29	; 62
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	cd bf       	out	0x3d, r28	; 61
    2da2:	cf 91       	pop	r28
    2da4:	df 91       	pop	r29
    2da6:	08 95       	ret

00002da8 <DisplayOnOffControl4Bit>:
static void DisplayOnOffControl4Bit(void){
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	e0 97       	sbiw	r28, 0x30	; 48
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	cd bf       	out	0x3d, r28	; 61
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	a8 e4       	ldi	r26, 0x48	; 72
    2dc2:	b2 e4       	ldi	r27, 0x42	; 66
    2dc4:	8d a7       	std	Y+45, r24	; 0x2d
    2dc6:	9e a7       	std	Y+46, r25	; 0x2e
    2dc8:	af a7       	std	Y+47, r26	; 0x2f
    2dca:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2dcc:	6d a5       	ldd	r22, Y+45	; 0x2d
    2dce:	7e a5       	ldd	r23, Y+46	; 0x2e
    2dd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dd2:	98 a9       	ldd	r25, Y+48	; 0x30
    2dd4:	2b ea       	ldi	r18, 0xAB	; 171
    2dd6:	3a ea       	ldi	r19, 0xAA	; 170
    2dd8:	4a e2       	ldi	r20, 0x2A	; 42
    2dda:	50 e4       	ldi	r21, 0x40	; 64
    2ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	89 a7       	std	Y+41, r24	; 0x29
    2de6:	9a a7       	std	Y+42, r25	; 0x2a
    2de8:	ab a7       	std	Y+43, r26	; 0x2b
    2dea:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2dec:	69 a5       	ldd	r22, Y+41	; 0x29
    2dee:	7a a5       	ldd	r23, Y+42	; 0x2a
    2df0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2df2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	40 e8       	ldi	r20, 0x80	; 128
    2dfa:	5f e3       	ldi	r21, 0x3F	; 63
    2dfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e00:	88 23       	and	r24, r24
    2e02:	1c f4       	brge	.+6      	; 0x2e0a <DisplayOnOffControl4Bit+0x62>
		__ticks = 1;
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	88 a7       	std	Y+40, r24	; 0x28
    2e08:	91 c0       	rjmp	.+290    	; 0x2f2c <DisplayOnOffControl4Bit+0x184>
	else if (__tmp > 255)
    2e0a:	69 a5       	ldd	r22, Y+41	; 0x29
    2e0c:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e10:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	4f e7       	ldi	r20, 0x7F	; 127
    2e18:	53 e4       	ldi	r21, 0x43	; 67
    2e1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	0c f0       	brlt	.+2      	; 0x2e24 <DisplayOnOffControl4Bit+0x7c>
    2e22:	7b c0       	rjmp	.+246    	; 0x2f1a <DisplayOnOffControl4Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    2e24:	6d a5       	ldd	r22, Y+45	; 0x2d
    2e26:	7e a5       	ldd	r23, Y+46	; 0x2e
    2e28:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e2a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	4a e7       	ldi	r20, 0x7A	; 122
    2e32:	54 e4       	ldi	r21, 0x44	; 68
    2e34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	8c a3       	std	Y+36, r24	; 0x24
    2e3e:	9d a3       	std	Y+37, r25	; 0x25
    2e40:	ae a3       	std	Y+38, r26	; 0x26
    2e42:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e44:	6c a1       	ldd	r22, Y+36	; 0x24
    2e46:	7d a1       	ldd	r23, Y+37	; 0x25
    2e48:	8e a1       	ldd	r24, Y+38	; 0x26
    2e4a:	9f a1       	ldd	r25, Y+39	; 0x27
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	4a ef       	ldi	r20, 0xFA	; 250
    2e52:	54 e4       	ldi	r21, 0x44	; 68
    2e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	88 a3       	std	Y+32, r24	; 0x20
    2e5e:	99 a3       	std	Y+33, r25	; 0x21
    2e60:	aa a3       	std	Y+34, r26	; 0x22
    2e62:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2e64:	68 a1       	ldd	r22, Y+32	; 0x20
    2e66:	79 a1       	ldd	r23, Y+33	; 0x21
    2e68:	8a a1       	ldd	r24, Y+34	; 0x22
    2e6a:	9b a1       	ldd	r25, Y+35	; 0x23
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e8       	ldi	r20, 0x80	; 128
    2e72:	5f e3       	ldi	r21, 0x3F	; 63
    2e74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e78:	88 23       	and	r24, r24
    2e7a:	2c f4       	brge	.+10     	; 0x2e86 <DisplayOnOffControl4Bit+0xde>
		__ticks = 1;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	9f 8f       	std	Y+31, r25	; 0x1f
    2e82:	8e 8f       	std	Y+30, r24	; 0x1e
    2e84:	3f c0       	rjmp	.+126    	; 0x2f04 <DisplayOnOffControl4Bit+0x15c>
	else if (__tmp > 65535)
    2e86:	68 a1       	ldd	r22, Y+32	; 0x20
    2e88:	79 a1       	ldd	r23, Y+33	; 0x21
    2e8a:	8a a1       	ldd	r24, Y+34	; 0x22
    2e8c:	9b a1       	ldd	r25, Y+35	; 0x23
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	3f ef       	ldi	r19, 0xFF	; 255
    2e92:	4f e7       	ldi	r20, 0x7F	; 127
    2e94:	57 e4       	ldi	r21, 0x47	; 71
    2e96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e9a:	18 16       	cp	r1, r24
    2e9c:	4c f5       	brge	.+82     	; 0x2ef0 <DisplayOnOffControl4Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9e:	6c a1       	ldd	r22, Y+36	; 0x24
    2ea0:	7d a1       	ldd	r23, Y+37	; 0x25
    2ea2:	8e a1       	ldd	r24, Y+38	; 0x26
    2ea4:	9f a1       	ldd	r25, Y+39	; 0x27
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	40 e2       	ldi	r20, 0x20	; 32
    2eac:	51 e4       	ldi	r21, 0x41	; 65
    2eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	bc 01       	movw	r22, r24
    2eb8:	cd 01       	movw	r24, r26
    2eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	9f 8f       	std	Y+31, r25	; 0x1f
    2ec4:	8e 8f       	std	Y+30, r24	; 0x1e
    2ec6:	0f c0       	rjmp	.+30     	; 0x2ee6 <DisplayOnOffControl4Bit+0x13e>
    2ec8:	88 ec       	ldi	r24, 0xC8	; 200
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	9d 8f       	std	Y+29, r25	; 0x1d
    2ece:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ed0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ed2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	f1 f7       	brne	.-4      	; 0x2ed4 <DisplayOnOffControl4Bit+0x12c>
    2ed8:	9d 8f       	std	Y+29, r25	; 0x1d
    2eda:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2edc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ede:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	9f 8f       	std	Y+31, r25	; 0x1f
    2ee4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ee8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2eea:	00 97       	sbiw	r24, 0x00	; 0
    2eec:	69 f7       	brne	.-38     	; 0x2ec8 <DisplayOnOffControl4Bit+0x120>
    2eee:	24 c0       	rjmp	.+72     	; 0x2f38 <DisplayOnOffControl4Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef0:	68 a1       	ldd	r22, Y+32	; 0x20
    2ef2:	79 a1       	ldd	r23, Y+33	; 0x21
    2ef4:	8a a1       	ldd	r24, Y+34	; 0x22
    2ef6:	9b a1       	ldd	r25, Y+35	; 0x23
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	9f 8f       	std	Y+31, r25	; 0x1f
    2f02:	8e 8f       	std	Y+30, r24	; 0x1e
    2f04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f06:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f08:	9b 8f       	std	Y+27, r25	; 0x1b
    2f0a:	8a 8f       	std	Y+26, r24	; 0x1a
    2f0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f0e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	f1 f7       	brne	.-4      	; 0x2f10 <DisplayOnOffControl4Bit+0x168>
    2f14:	9b 8f       	std	Y+27, r25	; 0x1b
    2f16:	8a 8f       	std	Y+26, r24	; 0x1a
    2f18:	0f c0       	rjmp	.+30     	; 0x2f38 <DisplayOnOffControl4Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f1a:	69 a5       	ldd	r22, Y+41	; 0x29
    2f1c:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f20:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	88 a7       	std	Y+40, r24	; 0x28
    2f2c:	88 a5       	ldd	r24, Y+40	; 0x28
    2f2e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f30:	89 8d       	ldd	r24, Y+25	; 0x19
    2f32:	8a 95       	dec	r24
    2f34:	f1 f7       	brne	.-4      	; 0x2f32 <DisplayOnOffControl4Bit+0x18a>
    2f36:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	LCD_WriteCommand4Bit(0x0);
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_WriteCommand4Bit>
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	a0 e2       	ldi	r26, 0x20	; 32
    2f44:	b1 e4       	ldi	r27, 0x41	; 65
    2f46:	8d 8b       	std	Y+21, r24	; 0x15
    2f48:	9e 8b       	std	Y+22, r25	; 0x16
    2f4a:	af 8b       	std	Y+23, r26	; 0x17
    2f4c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f50:	7e 89       	ldd	r23, Y+22	; 0x16
    2f52:	8f 89       	ldd	r24, Y+23	; 0x17
    2f54:	98 8d       	ldd	r25, Y+24	; 0x18
    2f56:	2b ea       	ldi	r18, 0xAB	; 171
    2f58:	3a ea       	ldi	r19, 0xAA	; 170
    2f5a:	4a e2       	ldi	r20, 0x2A	; 42
    2f5c:	50 e4       	ldi	r21, 0x40	; 64
    2f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	89 8b       	std	Y+17, r24	; 0x11
    2f68:	9a 8b       	std	Y+18, r25	; 0x12
    2f6a:	ab 8b       	std	Y+19, r26	; 0x13
    2f6c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f6e:	69 89       	ldd	r22, Y+17	; 0x11
    2f70:	7a 89       	ldd	r23, Y+18	; 0x12
    2f72:	8b 89       	ldd	r24, Y+19	; 0x13
    2f74:	9c 89       	ldd	r25, Y+20	; 0x14
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e8       	ldi	r20, 0x80	; 128
    2f7c:	5f e3       	ldi	r21, 0x3F	; 63
    2f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f82:	88 23       	and	r24, r24
    2f84:	1c f4       	brge	.+6      	; 0x2f8c <DisplayOnOffControl4Bit+0x1e4>
		__ticks = 1;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	88 8b       	std	Y+16, r24	; 0x10
    2f8a:	91 c0       	rjmp	.+290    	; 0x30ae <DisplayOnOffControl4Bit+0x306>
	else if (__tmp > 255)
    2f8c:	69 89       	ldd	r22, Y+17	; 0x11
    2f8e:	7a 89       	ldd	r23, Y+18	; 0x12
    2f90:	8b 89       	ldd	r24, Y+19	; 0x13
    2f92:	9c 89       	ldd	r25, Y+20	; 0x14
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	4f e7       	ldi	r20, 0x7F	; 127
    2f9a:	53 e4       	ldi	r21, 0x43	; 67
    2f9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa0:	18 16       	cp	r1, r24
    2fa2:	0c f0       	brlt	.+2      	; 0x2fa6 <DisplayOnOffControl4Bit+0x1fe>
    2fa4:	7b c0       	rjmp	.+246    	; 0x309c <DisplayOnOffControl4Bit+0x2f4>
	{
		_delay_ms(__us / 1000.0);
    2fa6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa8:	7e 89       	ldd	r23, Y+22	; 0x16
    2faa:	8f 89       	ldd	r24, Y+23	; 0x17
    2fac:	98 8d       	ldd	r25, Y+24	; 0x18
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	4a e7       	ldi	r20, 0x7A	; 122
    2fb4:	54 e4       	ldi	r21, 0x44	; 68
    2fb6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	8c 87       	std	Y+12, r24	; 0x0c
    2fc0:	9d 87       	std	Y+13, r25	; 0x0d
    2fc2:	ae 87       	std	Y+14, r26	; 0x0e
    2fc4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fc8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fca:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fcc:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	4a ef       	ldi	r20, 0xFA	; 250
    2fd4:	54 e4       	ldi	r21, 0x44	; 68
    2fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	88 87       	std	Y+8, r24	; 0x08
    2fe0:	99 87       	std	Y+9, r25	; 0x09
    2fe2:	aa 87       	std	Y+10, r26	; 0x0a
    2fe4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2fe6:	68 85       	ldd	r22, Y+8	; 0x08
    2fe8:	79 85       	ldd	r23, Y+9	; 0x09
    2fea:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fec:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	40 e8       	ldi	r20, 0x80	; 128
    2ff4:	5f e3       	ldi	r21, 0x3F	; 63
    2ff6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ffa:	88 23       	and	r24, r24
    2ffc:	2c f4       	brge	.+10     	; 0x3008 <DisplayOnOffControl4Bit+0x260>
		__ticks = 1;
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	9f 83       	std	Y+7, r25	; 0x07
    3004:	8e 83       	std	Y+6, r24	; 0x06
    3006:	3f c0       	rjmp	.+126    	; 0x3086 <DisplayOnOffControl4Bit+0x2de>
	else if (__tmp > 65535)
    3008:	68 85       	ldd	r22, Y+8	; 0x08
    300a:	79 85       	ldd	r23, Y+9	; 0x09
    300c:	8a 85       	ldd	r24, Y+10	; 0x0a
    300e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	3f ef       	ldi	r19, 0xFF	; 255
    3014:	4f e7       	ldi	r20, 0x7F	; 127
    3016:	57 e4       	ldi	r21, 0x47	; 71
    3018:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    301c:	18 16       	cp	r1, r24
    301e:	4c f5       	brge	.+82     	; 0x3072 <DisplayOnOffControl4Bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3020:	6c 85       	ldd	r22, Y+12	; 0x0c
    3022:	7d 85       	ldd	r23, Y+13	; 0x0d
    3024:	8e 85       	ldd	r24, Y+14	; 0x0e
    3026:	9f 85       	ldd	r25, Y+15	; 0x0f
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	40 e2       	ldi	r20, 0x20	; 32
    302e:	51 e4       	ldi	r21, 0x41	; 65
    3030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	bc 01       	movw	r22, r24
    303a:	cd 01       	movw	r24, r26
    303c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	9f 83       	std	Y+7, r25	; 0x07
    3046:	8e 83       	std	Y+6, r24	; 0x06
    3048:	0f c0       	rjmp	.+30     	; 0x3068 <DisplayOnOffControl4Bit+0x2c0>
    304a:	88 ec       	ldi	r24, 0xC8	; 200
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	9d 83       	std	Y+5, r25	; 0x05
    3050:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3052:	8c 81       	ldd	r24, Y+4	; 0x04
    3054:	9d 81       	ldd	r25, Y+5	; 0x05
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	f1 f7       	brne	.-4      	; 0x3056 <DisplayOnOffControl4Bit+0x2ae>
    305a:	9d 83       	std	Y+5, r25	; 0x05
    305c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    305e:	8e 81       	ldd	r24, Y+6	; 0x06
    3060:	9f 81       	ldd	r25, Y+7	; 0x07
    3062:	01 97       	sbiw	r24, 0x01	; 1
    3064:	9f 83       	std	Y+7, r25	; 0x07
    3066:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3068:	8e 81       	ldd	r24, Y+6	; 0x06
    306a:	9f 81       	ldd	r25, Y+7	; 0x07
    306c:	00 97       	sbiw	r24, 0x00	; 0
    306e:	69 f7       	brne	.-38     	; 0x304a <DisplayOnOffControl4Bit+0x2a2>
    3070:	24 c0       	rjmp	.+72     	; 0x30ba <DisplayOnOffControl4Bit+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3072:	68 85       	ldd	r22, Y+8	; 0x08
    3074:	79 85       	ldd	r23, Y+9	; 0x09
    3076:	8a 85       	ldd	r24, Y+10	; 0x0a
    3078:	9b 85       	ldd	r25, Y+11	; 0x0b
    307a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	9f 83       	std	Y+7, r25	; 0x07
    3084:	8e 83       	std	Y+6, r24	; 0x06
    3086:	8e 81       	ldd	r24, Y+6	; 0x06
    3088:	9f 81       	ldd	r25, Y+7	; 0x07
    308a:	9b 83       	std	Y+3, r25	; 0x03
    308c:	8a 83       	std	Y+2, r24	; 0x02
    308e:	8a 81       	ldd	r24, Y+2	; 0x02
    3090:	9b 81       	ldd	r25, Y+3	; 0x03
    3092:	01 97       	sbiw	r24, 0x01	; 1
    3094:	f1 f7       	brne	.-4      	; 0x3092 <DisplayOnOffControl4Bit+0x2ea>
    3096:	9b 83       	std	Y+3, r25	; 0x03
    3098:	8a 83       	std	Y+2, r24	; 0x02
    309a:	0f c0       	rjmp	.+30     	; 0x30ba <DisplayOnOffControl4Bit+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    309c:	69 89       	ldd	r22, Y+17	; 0x11
    309e:	7a 89       	ldd	r23, Y+18	; 0x12
    30a0:	8b 89       	ldd	r24, Y+19	; 0x13
    30a2:	9c 89       	ldd	r25, Y+20	; 0x14
    30a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	88 8b       	std	Y+16, r24	; 0x10
    30ae:	88 89       	ldd	r24, Y+16	; 0x10
    30b0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	8a 95       	dec	r24
    30b6:	f1 f7       	brne	.-4      	; 0x30b4 <DisplayOnOffControl4Bit+0x30c>
    30b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0xC);
    30ba:	8c e0       	ldi	r24, 0x0C	; 12
    30bc:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_WriteCommand4Bit>
}
    30c0:	e0 96       	adiw	r28, 0x30	; 48
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	cd bf       	out	0x3d, r28	; 61
    30cc:	cf 91       	pop	r28
    30ce:	df 91       	pop	r29
    30d0:	08 95       	ret

000030d2 <DisplayClear4Bit>:
static void DisplayClear4Bit(void){
    30d2:	df 93       	push	r29
    30d4:	cf 93       	push	r28
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
    30da:	e0 97       	sbiw	r28, 0x30	; 48
    30dc:	0f b6       	in	r0, 0x3f	; 63
    30de:	f8 94       	cli
    30e0:	de bf       	out	0x3e, r29	; 62
    30e2:	0f be       	out	0x3f, r0	; 63
    30e4:	cd bf       	out	0x3d, r28	; 61
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	a8 e4       	ldi	r26, 0x48	; 72
    30ec:	b2 e4       	ldi	r27, 0x42	; 66
    30ee:	8d a7       	std	Y+45, r24	; 0x2d
    30f0:	9e a7       	std	Y+46, r25	; 0x2e
    30f2:	af a7       	std	Y+47, r26	; 0x2f
    30f4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    30f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    30fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    30fc:	98 a9       	ldd	r25, Y+48	; 0x30
    30fe:	2b ea       	ldi	r18, 0xAB	; 171
    3100:	3a ea       	ldi	r19, 0xAA	; 170
    3102:	4a e2       	ldi	r20, 0x2A	; 42
    3104:	50 e4       	ldi	r21, 0x40	; 64
    3106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	89 a7       	std	Y+41, r24	; 0x29
    3110:	9a a7       	std	Y+42, r25	; 0x2a
    3112:	ab a7       	std	Y+43, r26	; 0x2b
    3114:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3116:	69 a5       	ldd	r22, Y+41	; 0x29
    3118:	7a a5       	ldd	r23, Y+42	; 0x2a
    311a:	8b a5       	ldd	r24, Y+43	; 0x2b
    311c:	9c a5       	ldd	r25, Y+44	; 0x2c
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	40 e8       	ldi	r20, 0x80	; 128
    3124:	5f e3       	ldi	r21, 0x3F	; 63
    3126:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    312a:	88 23       	and	r24, r24
    312c:	1c f4       	brge	.+6      	; 0x3134 <DisplayClear4Bit+0x62>
		__ticks = 1;
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	88 a7       	std	Y+40, r24	; 0x28
    3132:	91 c0       	rjmp	.+290    	; 0x3256 <DisplayClear4Bit+0x184>
	else if (__tmp > 255)
    3134:	69 a5       	ldd	r22, Y+41	; 0x29
    3136:	7a a5       	ldd	r23, Y+42	; 0x2a
    3138:	8b a5       	ldd	r24, Y+43	; 0x2b
    313a:	9c a5       	ldd	r25, Y+44	; 0x2c
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	4f e7       	ldi	r20, 0x7F	; 127
    3142:	53 e4       	ldi	r21, 0x43	; 67
    3144:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3148:	18 16       	cp	r1, r24
    314a:	0c f0       	brlt	.+2      	; 0x314e <DisplayClear4Bit+0x7c>
    314c:	7b c0       	rjmp	.+246    	; 0x3244 <DisplayClear4Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    314e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3150:	7e a5       	ldd	r23, Y+46	; 0x2e
    3152:	8f a5       	ldd	r24, Y+47	; 0x2f
    3154:	98 a9       	ldd	r25, Y+48	; 0x30
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	4a e7       	ldi	r20, 0x7A	; 122
    315c:	54 e4       	ldi	r21, 0x44	; 68
    315e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	8c a3       	std	Y+36, r24	; 0x24
    3168:	9d a3       	std	Y+37, r25	; 0x25
    316a:	ae a3       	std	Y+38, r26	; 0x26
    316c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    316e:	6c a1       	ldd	r22, Y+36	; 0x24
    3170:	7d a1       	ldd	r23, Y+37	; 0x25
    3172:	8e a1       	ldd	r24, Y+38	; 0x26
    3174:	9f a1       	ldd	r25, Y+39	; 0x27
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	4a ef       	ldi	r20, 0xFA	; 250
    317c:	54 e4       	ldi	r21, 0x44	; 68
    317e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	88 a3       	std	Y+32, r24	; 0x20
    3188:	99 a3       	std	Y+33, r25	; 0x21
    318a:	aa a3       	std	Y+34, r26	; 0x22
    318c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    318e:	68 a1       	ldd	r22, Y+32	; 0x20
    3190:	79 a1       	ldd	r23, Y+33	; 0x21
    3192:	8a a1       	ldd	r24, Y+34	; 0x22
    3194:	9b a1       	ldd	r25, Y+35	; 0x23
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	40 e8       	ldi	r20, 0x80	; 128
    319c:	5f e3       	ldi	r21, 0x3F	; 63
    319e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31a2:	88 23       	and	r24, r24
    31a4:	2c f4       	brge	.+10     	; 0x31b0 <DisplayClear4Bit+0xde>
		__ticks = 1;
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	9f 8f       	std	Y+31, r25	; 0x1f
    31ac:	8e 8f       	std	Y+30, r24	; 0x1e
    31ae:	3f c0       	rjmp	.+126    	; 0x322e <DisplayClear4Bit+0x15c>
	else if (__tmp > 65535)
    31b0:	68 a1       	ldd	r22, Y+32	; 0x20
    31b2:	79 a1       	ldd	r23, Y+33	; 0x21
    31b4:	8a a1       	ldd	r24, Y+34	; 0x22
    31b6:	9b a1       	ldd	r25, Y+35	; 0x23
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	3f ef       	ldi	r19, 0xFF	; 255
    31bc:	4f e7       	ldi	r20, 0x7F	; 127
    31be:	57 e4       	ldi	r21, 0x47	; 71
    31c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31c4:	18 16       	cp	r1, r24
    31c6:	4c f5       	brge	.+82     	; 0x321a <DisplayClear4Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c8:	6c a1       	ldd	r22, Y+36	; 0x24
    31ca:	7d a1       	ldd	r23, Y+37	; 0x25
    31cc:	8e a1       	ldd	r24, Y+38	; 0x26
    31ce:	9f a1       	ldd	r25, Y+39	; 0x27
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e2       	ldi	r20, 0x20	; 32
    31d6:	51 e4       	ldi	r21, 0x41	; 65
    31d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	bc 01       	movw	r22, r24
    31e2:	cd 01       	movw	r24, r26
    31e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	9f 8f       	std	Y+31, r25	; 0x1f
    31ee:	8e 8f       	std	Y+30, r24	; 0x1e
    31f0:	0f c0       	rjmp	.+30     	; 0x3210 <DisplayClear4Bit+0x13e>
    31f2:	88 ec       	ldi	r24, 0xC8	; 200
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	9d 8f       	std	Y+29, r25	; 0x1d
    31f8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	f1 f7       	brne	.-4      	; 0x31fe <DisplayClear4Bit+0x12c>
    3202:	9d 8f       	std	Y+29, r25	; 0x1d
    3204:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3206:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3208:	9f 8d       	ldd	r25, Y+31	; 0x1f
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	9f 8f       	std	Y+31, r25	; 0x1f
    320e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3210:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3212:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	69 f7       	brne	.-38     	; 0x31f2 <DisplayClear4Bit+0x120>
    3218:	24 c0       	rjmp	.+72     	; 0x3262 <DisplayClear4Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321a:	68 a1       	ldd	r22, Y+32	; 0x20
    321c:	79 a1       	ldd	r23, Y+33	; 0x21
    321e:	8a a1       	ldd	r24, Y+34	; 0x22
    3220:	9b a1       	ldd	r25, Y+35	; 0x23
    3222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	9f 8f       	std	Y+31, r25	; 0x1f
    322c:	8e 8f       	std	Y+30, r24	; 0x1e
    322e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3230:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3232:	9b 8f       	std	Y+27, r25	; 0x1b
    3234:	8a 8f       	std	Y+26, r24	; 0x1a
    3236:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3238:	9b 8d       	ldd	r25, Y+27	; 0x1b
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <DisplayClear4Bit+0x168>
    323e:	9b 8f       	std	Y+27, r25	; 0x1b
    3240:	8a 8f       	std	Y+26, r24	; 0x1a
    3242:	0f c0       	rjmp	.+30     	; 0x3262 <DisplayClear4Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3244:	69 a5       	ldd	r22, Y+41	; 0x29
    3246:	7a a5       	ldd	r23, Y+42	; 0x2a
    3248:	8b a5       	ldd	r24, Y+43	; 0x2b
    324a:	9c a5       	ldd	r25, Y+44	; 0x2c
    324c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	88 a7       	std	Y+40, r24	; 0x28
    3256:	88 a5       	ldd	r24, Y+40	; 0x28
    3258:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    325a:	89 8d       	ldd	r24, Y+25	; 0x19
    325c:	8a 95       	dec	r24
    325e:	f1 f7       	brne	.-4      	; 0x325c <DisplayClear4Bit+0x18a>
    3260:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	LCD_WriteCommand4Bit(0x0);
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_WriteCommand4Bit>
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	a0 e2       	ldi	r26, 0x20	; 32
    326e:	b1 e4       	ldi	r27, 0x41	; 65
    3270:	8d 8b       	std	Y+21, r24	; 0x15
    3272:	9e 8b       	std	Y+22, r25	; 0x16
    3274:	af 8b       	std	Y+23, r26	; 0x17
    3276:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3278:	6d 89       	ldd	r22, Y+21	; 0x15
    327a:	7e 89       	ldd	r23, Y+22	; 0x16
    327c:	8f 89       	ldd	r24, Y+23	; 0x17
    327e:	98 8d       	ldd	r25, Y+24	; 0x18
    3280:	2b ea       	ldi	r18, 0xAB	; 171
    3282:	3a ea       	ldi	r19, 0xAA	; 170
    3284:	4a e2       	ldi	r20, 0x2A	; 42
    3286:	50 e4       	ldi	r21, 0x40	; 64
    3288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	89 8b       	std	Y+17, r24	; 0x11
    3292:	9a 8b       	std	Y+18, r25	; 0x12
    3294:	ab 8b       	std	Y+19, r26	; 0x13
    3296:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3298:	69 89       	ldd	r22, Y+17	; 0x11
    329a:	7a 89       	ldd	r23, Y+18	; 0x12
    329c:	8b 89       	ldd	r24, Y+19	; 0x13
    329e:	9c 89       	ldd	r25, Y+20	; 0x14
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	40 e8       	ldi	r20, 0x80	; 128
    32a6:	5f e3       	ldi	r21, 0x3F	; 63
    32a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ac:	88 23       	and	r24, r24
    32ae:	1c f4       	brge	.+6      	; 0x32b6 <DisplayClear4Bit+0x1e4>
		__ticks = 1;
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	88 8b       	std	Y+16, r24	; 0x10
    32b4:	91 c0       	rjmp	.+290    	; 0x33d8 <DisplayClear4Bit+0x306>
	else if (__tmp > 255)
    32b6:	69 89       	ldd	r22, Y+17	; 0x11
    32b8:	7a 89       	ldd	r23, Y+18	; 0x12
    32ba:	8b 89       	ldd	r24, Y+19	; 0x13
    32bc:	9c 89       	ldd	r25, Y+20	; 0x14
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	4f e7       	ldi	r20, 0x7F	; 127
    32c4:	53 e4       	ldi	r21, 0x43	; 67
    32c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32ca:	18 16       	cp	r1, r24
    32cc:	0c f0       	brlt	.+2      	; 0x32d0 <DisplayClear4Bit+0x1fe>
    32ce:	7b c0       	rjmp	.+246    	; 0x33c6 <DisplayClear4Bit+0x2f4>
	{
		_delay_ms(__us / 1000.0);
    32d0:	6d 89       	ldd	r22, Y+21	; 0x15
    32d2:	7e 89       	ldd	r23, Y+22	; 0x16
    32d4:	8f 89       	ldd	r24, Y+23	; 0x17
    32d6:	98 8d       	ldd	r25, Y+24	; 0x18
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	4a e7       	ldi	r20, 0x7A	; 122
    32de:	54 e4       	ldi	r21, 0x44	; 68
    32e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	8c 87       	std	Y+12, r24	; 0x0c
    32ea:	9d 87       	std	Y+13, r25	; 0x0d
    32ec:	ae 87       	std	Y+14, r26	; 0x0e
    32ee:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    32f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    32f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    32f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	4a ef       	ldi	r20, 0xFA	; 250
    32fe:	54 e4       	ldi	r21, 0x44	; 68
    3300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	88 87       	std	Y+8, r24	; 0x08
    330a:	99 87       	std	Y+9, r25	; 0x09
    330c:	aa 87       	std	Y+10, r26	; 0x0a
    330e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3310:	68 85       	ldd	r22, Y+8	; 0x08
    3312:	79 85       	ldd	r23, Y+9	; 0x09
    3314:	8a 85       	ldd	r24, Y+10	; 0x0a
    3316:	9b 85       	ldd	r25, Y+11	; 0x0b
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	40 e8       	ldi	r20, 0x80	; 128
    331e:	5f e3       	ldi	r21, 0x3F	; 63
    3320:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3324:	88 23       	and	r24, r24
    3326:	2c f4       	brge	.+10     	; 0x3332 <DisplayClear4Bit+0x260>
		__ticks = 1;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	9f 83       	std	Y+7, r25	; 0x07
    332e:	8e 83       	std	Y+6, r24	; 0x06
    3330:	3f c0       	rjmp	.+126    	; 0x33b0 <DisplayClear4Bit+0x2de>
	else if (__tmp > 65535)
    3332:	68 85       	ldd	r22, Y+8	; 0x08
    3334:	79 85       	ldd	r23, Y+9	; 0x09
    3336:	8a 85       	ldd	r24, Y+10	; 0x0a
    3338:	9b 85       	ldd	r25, Y+11	; 0x0b
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	3f ef       	ldi	r19, 0xFF	; 255
    333e:	4f e7       	ldi	r20, 0x7F	; 127
    3340:	57 e4       	ldi	r21, 0x47	; 71
    3342:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3346:	18 16       	cp	r1, r24
    3348:	4c f5       	brge	.+82     	; 0x339c <DisplayClear4Bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    334a:	6c 85       	ldd	r22, Y+12	; 0x0c
    334c:	7d 85       	ldd	r23, Y+13	; 0x0d
    334e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3350:	9f 85       	ldd	r25, Y+15	; 0x0f
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	40 e2       	ldi	r20, 0x20	; 32
    3358:	51 e4       	ldi	r21, 0x41	; 65
    335a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	bc 01       	movw	r22, r24
    3364:	cd 01       	movw	r24, r26
    3366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	9f 83       	std	Y+7, r25	; 0x07
    3370:	8e 83       	std	Y+6, r24	; 0x06
    3372:	0f c0       	rjmp	.+30     	; 0x3392 <DisplayClear4Bit+0x2c0>
    3374:	88 ec       	ldi	r24, 0xC8	; 200
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	9d 83       	std	Y+5, r25	; 0x05
    337a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    337c:	8c 81       	ldd	r24, Y+4	; 0x04
    337e:	9d 81       	ldd	r25, Y+5	; 0x05
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <DisplayClear4Bit+0x2ae>
    3384:	9d 83       	std	Y+5, r25	; 0x05
    3386:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3388:	8e 81       	ldd	r24, Y+6	; 0x06
    338a:	9f 81       	ldd	r25, Y+7	; 0x07
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	9f 83       	std	Y+7, r25	; 0x07
    3390:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3392:	8e 81       	ldd	r24, Y+6	; 0x06
    3394:	9f 81       	ldd	r25, Y+7	; 0x07
    3396:	00 97       	sbiw	r24, 0x00	; 0
    3398:	69 f7       	brne	.-38     	; 0x3374 <DisplayClear4Bit+0x2a2>
    339a:	24 c0       	rjmp	.+72     	; 0x33e4 <DisplayClear4Bit+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    339c:	68 85       	ldd	r22, Y+8	; 0x08
    339e:	79 85       	ldd	r23, Y+9	; 0x09
    33a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    33a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    33a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	9f 83       	std	Y+7, r25	; 0x07
    33ae:	8e 83       	std	Y+6, r24	; 0x06
    33b0:	8e 81       	ldd	r24, Y+6	; 0x06
    33b2:	9f 81       	ldd	r25, Y+7	; 0x07
    33b4:	9b 83       	std	Y+3, r25	; 0x03
    33b6:	8a 83       	std	Y+2, r24	; 0x02
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	9b 81       	ldd	r25, Y+3	; 0x03
    33bc:	01 97       	sbiw	r24, 0x01	; 1
    33be:	f1 f7       	brne	.-4      	; 0x33bc <DisplayClear4Bit+0x2ea>
    33c0:	9b 83       	std	Y+3, r25	; 0x03
    33c2:	8a 83       	std	Y+2, r24	; 0x02
    33c4:	0f c0       	rjmp	.+30     	; 0x33e4 <DisplayClear4Bit+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33c6:	69 89       	ldd	r22, Y+17	; 0x11
    33c8:	7a 89       	ldd	r23, Y+18	; 0x12
    33ca:	8b 89       	ldd	r24, Y+19	; 0x13
    33cc:	9c 89       	ldd	r25, Y+20	; 0x14
    33ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	88 8b       	std	Y+16, r24	; 0x10
    33d8:	88 89       	ldd	r24, Y+16	; 0x10
    33da:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
    33de:	8a 95       	dec	r24
    33e0:	f1 f7       	brne	.-4      	; 0x33de <DisplayClear4Bit+0x30c>
    33e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0x1);
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_WriteCommand4Bit>
}
    33ea:	e0 96       	adiw	r28, 0x30	; 48
    33ec:	0f b6       	in	r0, 0x3f	; 63
    33ee:	f8 94       	cli
    33f0:	de bf       	out	0x3e, r29	; 62
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	cd bf       	out	0x3d, r28	; 61
    33f6:	cf 91       	pop	r28
    33f8:	df 91       	pop	r29
    33fa:	08 95       	ret

000033fc <EntryModeSet4Bit>:
static void EntryModeSet4Bit(void){
    33fc:	df 93       	push	r29
    33fe:	cf 93       	push	r28
    3400:	cd b7       	in	r28, 0x3d	; 61
    3402:	de b7       	in	r29, 0x3e	; 62
    3404:	a6 97       	sbiw	r28, 0x26	; 38
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	de bf       	out	0x3e, r29	; 62
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	cd bf       	out	0x3d, r28	; 61
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	a0 e0       	ldi	r26, 0x00	; 0
    3416:	b0 e4       	ldi	r27, 0x40	; 64
    3418:	8b a3       	std	Y+35, r24	; 0x23
    341a:	9c a3       	std	Y+36, r25	; 0x24
    341c:	ad a3       	std	Y+37, r26	; 0x25
    341e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3420:	6b a1       	ldd	r22, Y+35	; 0x23
    3422:	7c a1       	ldd	r23, Y+36	; 0x24
    3424:	8d a1       	ldd	r24, Y+37	; 0x25
    3426:	9e a1       	ldd	r25, Y+38	; 0x26
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	4a ef       	ldi	r20, 0xFA	; 250
    342e:	54 e4       	ldi	r21, 0x44	; 68
    3430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	8f 8f       	std	Y+31, r24	; 0x1f
    343a:	98 a3       	std	Y+32, r25	; 0x20
    343c:	a9 a3       	std	Y+33, r26	; 0x21
    343e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3440:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3442:	78 a1       	ldd	r23, Y+32	; 0x20
    3444:	89 a1       	ldd	r24, Y+33	; 0x21
    3446:	9a a1       	ldd	r25, Y+34	; 0x22
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e8       	ldi	r20, 0x80	; 128
    344e:	5f e3       	ldi	r21, 0x3F	; 63
    3450:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3454:	88 23       	and	r24, r24
    3456:	2c f4       	brge	.+10     	; 0x3462 <EntryModeSet4Bit+0x66>
		__ticks = 1;
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	9e 8f       	std	Y+30, r25	; 0x1e
    345e:	8d 8f       	std	Y+29, r24	; 0x1d
    3460:	3f c0       	rjmp	.+126    	; 0x34e0 <EntryModeSet4Bit+0xe4>
	else if (__tmp > 65535)
    3462:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3464:	78 a1       	ldd	r23, Y+32	; 0x20
    3466:	89 a1       	ldd	r24, Y+33	; 0x21
    3468:	9a a1       	ldd	r25, Y+34	; 0x22
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	3f ef       	ldi	r19, 0xFF	; 255
    346e:	4f e7       	ldi	r20, 0x7F	; 127
    3470:	57 e4       	ldi	r21, 0x47	; 71
    3472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3476:	18 16       	cp	r1, r24
    3478:	4c f5       	brge	.+82     	; 0x34cc <EntryModeSet4Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    347a:	6b a1       	ldd	r22, Y+35	; 0x23
    347c:	7c a1       	ldd	r23, Y+36	; 0x24
    347e:	8d a1       	ldd	r24, Y+37	; 0x25
    3480:	9e a1       	ldd	r25, Y+38	; 0x26
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	40 e2       	ldi	r20, 0x20	; 32
    3488:	51 e4       	ldi	r21, 0x41	; 65
    348a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	bc 01       	movw	r22, r24
    3494:	cd 01       	movw	r24, r26
    3496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	9e 8f       	std	Y+30, r25	; 0x1e
    34a0:	8d 8f       	std	Y+29, r24	; 0x1d
    34a2:	0f c0       	rjmp	.+30     	; 0x34c2 <EntryModeSet4Bit+0xc6>
    34a4:	88 ec       	ldi	r24, 0xC8	; 200
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	9c 8f       	std	Y+28, r25	; 0x1c
    34aa:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	f1 f7       	brne	.-4      	; 0x34b0 <EntryModeSet4Bit+0xb4>
    34b4:	9c 8f       	std	Y+28, r25	; 0x1c
    34b6:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	9e 8f       	std	Y+30, r25	; 0x1e
    34c0:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	69 f7       	brne	.-38     	; 0x34a4 <EntryModeSet4Bit+0xa8>
    34ca:	14 c0       	rjmp	.+40     	; 0x34f4 <EntryModeSet4Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34cc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    34ce:	78 a1       	ldd	r23, Y+32	; 0x20
    34d0:	89 a1       	ldd	r24, Y+33	; 0x21
    34d2:	9a a1       	ldd	r25, Y+34	; 0x22
    34d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	9e 8f       	std	Y+30, r25	; 0x1e
    34de:	8d 8f       	std	Y+29, r24	; 0x1d
    34e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34e4:	9a 8f       	std	Y+26, r25	; 0x1a
    34e6:	89 8f       	std	Y+25, r24	; 0x19
    34e8:	89 8d       	ldd	r24, Y+25	; 0x19
    34ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <EntryModeSet4Bit+0xf0>
    34f0:	9a 8f       	std	Y+26, r25	; 0x1a
    34f2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(2);
	LCD_WriteCommand4Bit(0x0);
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_WriteCommand4Bit>
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	a0 e2       	ldi	r26, 0x20	; 32
    3500:	b1 e4       	ldi	r27, 0x41	; 65
    3502:	8d 8b       	std	Y+21, r24	; 0x15
    3504:	9e 8b       	std	Y+22, r25	; 0x16
    3506:	af 8b       	std	Y+23, r26	; 0x17
    3508:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    350a:	6d 89       	ldd	r22, Y+21	; 0x15
    350c:	7e 89       	ldd	r23, Y+22	; 0x16
    350e:	8f 89       	ldd	r24, Y+23	; 0x17
    3510:	98 8d       	ldd	r25, Y+24	; 0x18
    3512:	2b ea       	ldi	r18, 0xAB	; 171
    3514:	3a ea       	ldi	r19, 0xAA	; 170
    3516:	4a e2       	ldi	r20, 0x2A	; 42
    3518:	50 e4       	ldi	r21, 0x40	; 64
    351a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	89 8b       	std	Y+17, r24	; 0x11
    3524:	9a 8b       	std	Y+18, r25	; 0x12
    3526:	ab 8b       	std	Y+19, r26	; 0x13
    3528:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    352a:	69 89       	ldd	r22, Y+17	; 0x11
    352c:	7a 89       	ldd	r23, Y+18	; 0x12
    352e:	8b 89       	ldd	r24, Y+19	; 0x13
    3530:	9c 89       	ldd	r25, Y+20	; 0x14
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	40 e8       	ldi	r20, 0x80	; 128
    3538:	5f e3       	ldi	r21, 0x3F	; 63
    353a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    353e:	88 23       	and	r24, r24
    3540:	1c f4       	brge	.+6      	; 0x3548 <EntryModeSet4Bit+0x14c>
		__ticks = 1;
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	88 8b       	std	Y+16, r24	; 0x10
    3546:	91 c0       	rjmp	.+290    	; 0x366a <EntryModeSet4Bit+0x26e>
	else if (__tmp > 255)
    3548:	69 89       	ldd	r22, Y+17	; 0x11
    354a:	7a 89       	ldd	r23, Y+18	; 0x12
    354c:	8b 89       	ldd	r24, Y+19	; 0x13
    354e:	9c 89       	ldd	r25, Y+20	; 0x14
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	4f e7       	ldi	r20, 0x7F	; 127
    3556:	53 e4       	ldi	r21, 0x43	; 67
    3558:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    355c:	18 16       	cp	r1, r24
    355e:	0c f0       	brlt	.+2      	; 0x3562 <EntryModeSet4Bit+0x166>
    3560:	7b c0       	rjmp	.+246    	; 0x3658 <EntryModeSet4Bit+0x25c>
	{
		_delay_ms(__us / 1000.0);
    3562:	6d 89       	ldd	r22, Y+21	; 0x15
    3564:	7e 89       	ldd	r23, Y+22	; 0x16
    3566:	8f 89       	ldd	r24, Y+23	; 0x17
    3568:	98 8d       	ldd	r25, Y+24	; 0x18
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	4a e7       	ldi	r20, 0x7A	; 122
    3570:	54 e4       	ldi	r21, 0x44	; 68
    3572:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	8c 87       	std	Y+12, r24	; 0x0c
    357c:	9d 87       	std	Y+13, r25	; 0x0d
    357e:	ae 87       	std	Y+14, r26	; 0x0e
    3580:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3582:	6c 85       	ldd	r22, Y+12	; 0x0c
    3584:	7d 85       	ldd	r23, Y+13	; 0x0d
    3586:	8e 85       	ldd	r24, Y+14	; 0x0e
    3588:	9f 85       	ldd	r25, Y+15	; 0x0f
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	4a ef       	ldi	r20, 0xFA	; 250
    3590:	54 e4       	ldi	r21, 0x44	; 68
    3592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	88 87       	std	Y+8, r24	; 0x08
    359c:	99 87       	std	Y+9, r25	; 0x09
    359e:	aa 87       	std	Y+10, r26	; 0x0a
    35a0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    35a2:	68 85       	ldd	r22, Y+8	; 0x08
    35a4:	79 85       	ldd	r23, Y+9	; 0x09
    35a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    35a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e8       	ldi	r20, 0x80	; 128
    35b0:	5f e3       	ldi	r21, 0x3F	; 63
    35b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35b6:	88 23       	and	r24, r24
    35b8:	2c f4       	brge	.+10     	; 0x35c4 <EntryModeSet4Bit+0x1c8>
		__ticks = 1;
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	9f 83       	std	Y+7, r25	; 0x07
    35c0:	8e 83       	std	Y+6, r24	; 0x06
    35c2:	3f c0       	rjmp	.+126    	; 0x3642 <EntryModeSet4Bit+0x246>
	else if (__tmp > 65535)
    35c4:	68 85       	ldd	r22, Y+8	; 0x08
    35c6:	79 85       	ldd	r23, Y+9	; 0x09
    35c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    35ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	3f ef       	ldi	r19, 0xFF	; 255
    35d0:	4f e7       	ldi	r20, 0x7F	; 127
    35d2:	57 e4       	ldi	r21, 0x47	; 71
    35d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35d8:	18 16       	cp	r1, r24
    35da:	4c f5       	brge	.+82     	; 0x362e <EntryModeSet4Bit+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    35de:	7d 85       	ldd	r23, Y+13	; 0x0d
    35e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    35e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	40 e2       	ldi	r20, 0x20	; 32
    35ea:	51 e4       	ldi	r21, 0x41	; 65
    35ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	bc 01       	movw	r22, r24
    35f6:	cd 01       	movw	r24, r26
    35f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	9f 83       	std	Y+7, r25	; 0x07
    3602:	8e 83       	std	Y+6, r24	; 0x06
    3604:	0f c0       	rjmp	.+30     	; 0x3624 <EntryModeSet4Bit+0x228>
    3606:	88 ec       	ldi	r24, 0xC8	; 200
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	9d 83       	std	Y+5, r25	; 0x05
    360c:	8c 83       	std	Y+4, r24	; 0x04
    360e:	8c 81       	ldd	r24, Y+4	; 0x04
    3610:	9d 81       	ldd	r25, Y+5	; 0x05
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	f1 f7       	brne	.-4      	; 0x3612 <EntryModeSet4Bit+0x216>
    3616:	9d 83       	std	Y+5, r25	; 0x05
    3618:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361a:	8e 81       	ldd	r24, Y+6	; 0x06
    361c:	9f 81       	ldd	r25, Y+7	; 0x07
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	9f 83       	std	Y+7, r25	; 0x07
    3622:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3624:	8e 81       	ldd	r24, Y+6	; 0x06
    3626:	9f 81       	ldd	r25, Y+7	; 0x07
    3628:	00 97       	sbiw	r24, 0x00	; 0
    362a:	69 f7       	brne	.-38     	; 0x3606 <EntryModeSet4Bit+0x20a>
    362c:	24 c0       	rjmp	.+72     	; 0x3676 <EntryModeSet4Bit+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    362e:	68 85       	ldd	r22, Y+8	; 0x08
    3630:	79 85       	ldd	r23, Y+9	; 0x09
    3632:	8a 85       	ldd	r24, Y+10	; 0x0a
    3634:	9b 85       	ldd	r25, Y+11	; 0x0b
    3636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	9f 83       	std	Y+7, r25	; 0x07
    3640:	8e 83       	std	Y+6, r24	; 0x06
    3642:	8e 81       	ldd	r24, Y+6	; 0x06
    3644:	9f 81       	ldd	r25, Y+7	; 0x07
    3646:	9b 83       	std	Y+3, r25	; 0x03
    3648:	8a 83       	std	Y+2, r24	; 0x02
    364a:	8a 81       	ldd	r24, Y+2	; 0x02
    364c:	9b 81       	ldd	r25, Y+3	; 0x03
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	f1 f7       	brne	.-4      	; 0x364e <EntryModeSet4Bit+0x252>
    3652:	9b 83       	std	Y+3, r25	; 0x03
    3654:	8a 83       	std	Y+2, r24	; 0x02
    3656:	0f c0       	rjmp	.+30     	; 0x3676 <EntryModeSet4Bit+0x27a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3658:	69 89       	ldd	r22, Y+17	; 0x11
    365a:	7a 89       	ldd	r23, Y+18	; 0x12
    365c:	8b 89       	ldd	r24, Y+19	; 0x13
    365e:	9c 89       	ldd	r25, Y+20	; 0x14
    3660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	88 8b       	std	Y+16, r24	; 0x10
    366a:	88 89       	ldd	r24, Y+16	; 0x10
    366c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    366e:	89 81       	ldd	r24, Y+1	; 0x01
    3670:	8a 95       	dec	r24
    3672:	f1 f7       	brne	.-4      	; 0x3670 <EntryModeSet4Bit+0x274>
    3674:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0x6);
    3676:	86 e0       	ldi	r24, 0x06	; 6
    3678:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_WriteCommand4Bit>
}
    367c:	a6 96       	adiw	r28, 0x26	; 38
    367e:	0f b6       	in	r0, 0x3f	; 63
    3680:	f8 94       	cli
    3682:	de bf       	out	0x3e, r29	; 62
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	cd bf       	out	0x3d, r28	; 61
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	08 95       	ret

0000368e <BUTTON_Init>:
  This function sets the direction of the specified button pin to input and enables the internal pull-up resistor.
* @param Port The port number of the button.
* @param Pin The pin number of the button.
* @return ES_t Returns the error state. Returns ES_OK if the button was successfully initialized, returns ES_NOK otherwise.
*/
ES_t BUTTON_Init(u8 Port,u8 Pin){
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	00 d0       	rcall	.+0      	; 0x3694 <BUTTON_Init+0x6>
    3694:	0f 92       	push	r0
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    369a:	8a 83       	std	Y+2, r24	; 0x02
    369c:	6b 83       	std	Y+3, r22	; 0x03
  ES_t Local_enuErrorstate = ES_NOK;
    369e:	19 82       	std	Y+1, r1	; 0x01
    // Set the button pin as input
  DIO_SetPinDirection(Port, Pin, INPUT);
    36a0:	8a 81       	ldd	r24, Y+2	; 0x02
    36a2:	6b 81       	ldd	r22, Y+3	; 0x03
    36a4:	40 e0       	ldi	r20, 0x00	; 0
    36a6:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_SetPinDirection>

  // Enable the internal pull-up resistor for the button pin
  DIO_SetPinValue(Port, Pin, HIGH);
    36aa:	8a 81       	ldd	r24, Y+2	; 0x02
    36ac:	6b 81       	ldd	r22, Y+3	; 0x03
    36ae:	41 e0       	ldi	r20, 0x01	; 1
    36b0:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>

	Local_enuErrorstate = ES_OK;
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    36ba:	0f 90       	pop	r0
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	08 95       	ret

000036c6 <BUTTON_u8GetValue>:
*@param Port The port number of the button.
*@param Pin The pin number of the button.
*@return u8 Returns the current value of the button pin. Returns high (1) if the button is pressed, returns low (0) otherwise.
*/

u8 BUTTON_u8GetValue(u8 Port,u8 Pin){
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <BUTTON_u8GetValue+0x6>
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    36d0:	89 83       	std	Y+1, r24	; 0x01
    36d2:	6a 83       	std	Y+2, r22	; 0x02
    // Read the value of the button pin
    return DIO_u8GetPinValue(Port, Pin);
    36d4:	89 81       	ldd	r24, Y+1	; 0x01
    36d6:	6a 81       	ldd	r22, Y+2	; 0x02
    36d8:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8GetPinValue>
}
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	cf 91       	pop	r28
    36e2:	df 91       	pop	r29
    36e4:	08 95       	ret

000036e6 <_7SEG_Init>:
#if CONFIG == COMMON_CATHODE
static u8 SevenSegCath[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x67};
#elif CONFIG == COMMON_ANODE
static u8 SevenSegAnode[10] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};
#endif
ES_t _7SEG_Init(u8 Port){
    36e6:	df 93       	push	r29
    36e8:	cf 93       	push	r28
    36ea:	00 d0       	rcall	.+0      	; 0x36ec <_7SEG_Init+0x6>
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_enuErrorstate = ES_NOK;
    36f2:	19 82       	std	Y+1, r1	; 0x01
    DIO_SetPortDirection(Port,0x7F);
    36f4:	8a 81       	ldd	r24, Y+2	; 0x02
    36f6:	6f e7       	ldi	r22, 0x7F	; 127
    36f8:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_SetPortDirection>
    Local_enuErrorstate = ES_OK;
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    3700:	89 81       	ldd	r24, Y+1	; 0x01
}
    3702:	0f 90       	pop	r0
    3704:	0f 90       	pop	r0
    3706:	cf 91       	pop	r28
    3708:	df 91       	pop	r29
    370a:	08 95       	ret

0000370c <_7SEG_Display>:

ES_t _7SEG_Display(u8 Port, u8 Number){
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	00 d0       	rcall	.+0      	; 0x3712 <_7SEG_Display+0x6>
    3712:	0f 92       	push	r0
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	8a 83       	std	Y+2, r24	; 0x02
    371a:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_enuErrorstate = ES_NOK;
    371c:	19 82       	std	Y+1, r1	; 0x01
    if(Number <= 9 && Number >=0){
    371e:	8b 81       	ldd	r24, Y+3	; 0x03
    3720:	8a 30       	cpi	r24, 0x0A	; 10
    3722:	70 f4       	brcc	.+28     	; 0x3740 <_7SEG_Display+0x34>
    #if CONFIG == COMMON_CATHODE 
        DIO_SetPortValue(Port,SevenSegCath[Number]);
    #elif CONFIG == COMMON_ANODE
        DIO_SetPortValue(Port,SevenSegAnode[Number]);
    3724:	8b 81       	ldd	r24, Y+3	; 0x03
    3726:	88 2f       	mov	r24, r24
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	fc 01       	movw	r30, r24
    372c:	e8 59       	subi	r30, 0x98	; 152
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	90 81       	ld	r25, Z
    3732:	8a 81       	ldd	r24, Y+2	; 0x02
    3734:	69 2f       	mov	r22, r25
    3736:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <DIO_SetPortValue>
    #endif
    Local_enuErrorstate = ES_OK;
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	89 83       	std	Y+1, r24	; 0x01
    373e:	02 c0       	rjmp	.+4      	; 0x3744 <_7SEG_Display+0x38>
    }
    else{
        Local_enuErrorstate = ES_OUT_OF_RANGE;
    3740:	83 e0       	ldi	r24, 0x03	; 3
    3742:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorstate;
    3744:	89 81       	ldd	r24, Y+1	; 0x01
}
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	cf 91       	pop	r28
    374e:	df 91       	pop	r29
    3750:	08 95       	ret

00003752 <main>:
/***************************************/
#include "APP.h"

u8 seconds,minutes,hours;

int main(void){
    3752:	0f 93       	push	r16
    3754:	1f 93       	push	r17
    3756:	df 93       	push	r29
    3758:	cf 93       	push	r28
    375a:	cd b7       	in	r28, 0x3d	; 61
    375c:	de b7       	in	r29, 0x3e	; 62
    375e:	ce 55       	subi	r28, 0x5E	; 94
    3760:	d0 40       	sbci	r29, 0x00	; 0
    3762:	0f b6       	in	r0, 0x3f	; 63
    3764:	f8 94       	cli
    3766:	de bf       	out	0x3e, r29	; 62
    3768:	0f be       	out	0x3f, r0	; 63
    376a:	cd bf       	out	0x3d, r28	; 61
	EXTI_INT0Init(FALLING_EDGE);
    376c:	82 e0       	ldi	r24, 0x02	; 2
    376e:	0e 94 2d 08 	call	0x105a	; 0x105a <EXTI_INT0Init>
	EXTI_INT1Init(FALLING_EDGE);
    3772:	82 e0       	ldi	r24, 0x02	; 2
    3774:	0e 94 29 09 	call	0x1252	; 0x1252 <EXTI_INT1Init>
	EXTI_INT2Init(FALLING_EDGE);
    3778:	82 e0       	ldi	r24, 0x02	; 2
    377a:	0e 94 18 0a 	call	0x1430	; 0x1430 <EXTI_INT2Init>
	GIE_Enable();
    377e:	0e 94 05 08 	call	0x100a	; 0x100a <GIE_Enable>
			.TIMER0_Mode = CTC_MODE,
			.TIMER0_Prescaler = TMR0_DIV_BY_8,
			.TMR0_OCR0 = 250,
			.ActionFunction = TimerFunction

	};
    3782:	ce 01       	movw	r24, r28
    3784:	8b 5a       	subi	r24, 0xAB	; 171
    3786:	9f 4f       	sbci	r25, 0xFF	; 255
    3788:	6c 96       	adiw	r28, 0x1c	; 28
    378a:	9f af       	std	Y+63, r25	; 0x3f
    378c:	8e af       	std	Y+62, r24	; 0x3e
    378e:	6c 97       	sbiw	r28, 0x1c	; 28
    3790:	82 e7       	ldi	r24, 0x72	; 114
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	6e 96       	adiw	r28, 0x1e	; 30
    3796:	9f af       	std	Y+63, r25	; 0x3f
    3798:	8e af       	std	Y+62, r24	; 0x3e
    379a:	6e 97       	sbiw	r28, 0x1e	; 30
    379c:	95 e0       	ldi	r25, 0x05	; 5
    379e:	6f 96       	adiw	r28, 0x1f	; 31
    37a0:	9f af       	std	Y+63, r25	; 0x3f
    37a2:	6f 97       	sbiw	r28, 0x1f	; 31
    37a4:	6e 96       	adiw	r28, 0x1e	; 30
    37a6:	ee ad       	ldd	r30, Y+62	; 0x3e
    37a8:	ff ad       	ldd	r31, Y+63	; 0x3f
    37aa:	6e 97       	sbiw	r28, 0x1e	; 30
    37ac:	00 80       	ld	r0, Z
    37ae:	6e 96       	adiw	r28, 0x1e	; 30
    37b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    37b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    37b4:	6e 97       	sbiw	r28, 0x1e	; 30
    37b6:	01 96       	adiw	r24, 0x01	; 1
    37b8:	6e 96       	adiw	r28, 0x1e	; 30
    37ba:	9f af       	std	Y+63, r25	; 0x3f
    37bc:	8e af       	std	Y+62, r24	; 0x3e
    37be:	6e 97       	sbiw	r28, 0x1e	; 30
    37c0:	6c 96       	adiw	r28, 0x1c	; 28
    37c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    37c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    37c6:	6c 97       	sbiw	r28, 0x1c	; 28
    37c8:	00 82       	st	Z, r0
    37ca:	6c 96       	adiw	r28, 0x1c	; 28
    37cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    37ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    37d0:	6c 97       	sbiw	r28, 0x1c	; 28
    37d2:	01 96       	adiw	r24, 0x01	; 1
    37d4:	6c 96       	adiw	r28, 0x1c	; 28
    37d6:	9f af       	std	Y+63, r25	; 0x3f
    37d8:	8e af       	std	Y+62, r24	; 0x3e
    37da:	6c 97       	sbiw	r28, 0x1c	; 28
    37dc:	6f 96       	adiw	r28, 0x1f	; 31
    37de:	9f ad       	ldd	r25, Y+63	; 0x3f
    37e0:	6f 97       	sbiw	r28, 0x1f	; 31
    37e2:	91 50       	subi	r25, 0x01	; 1
    37e4:	6f 96       	adiw	r28, 0x1f	; 31
    37e6:	9f af       	std	Y+63, r25	; 0x3f
    37e8:	6f 97       	sbiw	r28, 0x1f	; 31
    37ea:	6f 96       	adiw	r28, 0x1f	; 31
    37ec:	ef ad       	ldd	r30, Y+63	; 0x3f
    37ee:	6f 97       	sbiw	r28, 0x1f	; 31
    37f0:	ee 23       	and	r30, r30
    37f2:	c1 f6       	brne	.-80     	; 0x37a4 <main+0x52>
	PORT_Init();
    37f4:	0e 94 dd 07 	call	0xfba	; 0xfba <PORT_Init>
	_7SEG_Init(PORTC);
    37f8:	82 e0       	ldi	r24, 0x02	; 2
    37fa:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_7SEG_Init>
	TMR0_Init(&Timer0Configuration);
    37fe:	ce 01       	movw	r24, r28
    3800:	8b 5a       	subi	r24, 0xAB	; 171
    3802:	9f 4f       	sbci	r25, 0xFF	; 255
    3804:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TMR0_Init>
	TMR0_CTCInterruptDisable();
    3808:	0e 94 55 07 	call	0xeaa	; 0xeaa <TMR0_CTCInterruptDisable>
	TMR0_CTCSetCallBack(&Timer0Configuration);
    380c:	ce 01       	movw	r24, r28
    380e:	8b 5a       	subi	r24, 0xAB	; 171
    3810:	9f 4f       	sbci	r25, 0xFF	; 255
    3812:	0e 94 25 07 	call	0xe4a	; 0xe4a <TMR0_CTCSetCallBack>
	EXTI_SetCallBackINT0(&StartTimerISR);
    3816:	88 ee       	ldi	r24, 0xE8	; 232
    3818:	9f e1       	ldi	r25, 0x1F	; 31
    381a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <EXTI_SetCallBackINT0>
	EXTI_SetCallBackINT1(&ResumeTimerISR);
    381e:	87 ef       	ldi	r24, 0xF7	; 247
    3820:	9f e1       	ldi	r25, 0x1F	; 31
    3822:	0e 94 cc 09 	call	0x1398	; 0x1398 <EXTI_SetCallBackINT1>
	EXTI_SetCallBackINT2(&StopTimerISR);
    3826:	80 e0       	ldi	r24, 0x00	; 0
    3828:	90 e2       	ldi	r25, 0x20	; 32
    382a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <EXTI_SetCallBackINT2>
	while(1){
		DIO_SetPortValue(_7SegControlPORT,LOW);
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	60 e0       	ldi	r22, 0x00	; 0
    3832:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <DIO_SetPortValue>
		_7SEG_Display(PORTC,seconds%10);
    3836:	80 91 84 00 	lds	r24, 0x0084
    383a:	9a e0       	ldi	r25, 0x0A	; 10
    383c:	69 2f       	mov	r22, r25
    383e:	0e 94 28 20 	call	0x4050	; 0x4050 <__udivmodqi4>
    3842:	89 2f       	mov	r24, r25
    3844:	98 2f       	mov	r25, r24
    3846:	82 e0       	ldi	r24, 0x02	; 2
    3848:	69 2f       	mov	r22, r25
    384a:	0e 94 86 1b 	call	0x370c	; 0x370c <_7SEG_Display>
		DIO_SetPinValue(_7SegControlPORT,S0,HIGH);
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	60 e0       	ldi	r22, 0x00	; 0
    3852:	41 e0       	ldi	r20, 0x01	; 1
    3854:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
    3858:	fe 01       	movw	r30, r28
    385a:	ef 5a       	subi	r30, 0xAF	; 175
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	a0 e2       	ldi	r26, 0x20	; 32
    3864:	b1 e4       	ldi	r27, 0x41	; 65
    3866:	80 83       	st	Z, r24
    3868:	91 83       	std	Z+1, r25	; 0x01
    386a:	a2 83       	std	Z+2, r26	; 0x02
    386c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386e:	8e 01       	movw	r16, r28
    3870:	03 5b       	subi	r16, 0xB3	; 179
    3872:	1f 4f       	sbci	r17, 0xFF	; 255
    3874:	fe 01       	movw	r30, r28
    3876:	ef 5a       	subi	r30, 0xAF	; 175
    3878:	ff 4f       	sbci	r31, 0xFF	; 255
    387a:	60 81       	ld	r22, Z
    387c:	71 81       	ldd	r23, Z+1	; 0x01
    387e:	82 81       	ldd	r24, Z+2	; 0x02
    3880:	93 81       	ldd	r25, Z+3	; 0x03
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	4a ef       	ldi	r20, 0xFA	; 250
    3888:	54 e4       	ldi	r21, 0x44	; 68
    388a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	f8 01       	movw	r30, r16
    3894:	80 83       	st	Z, r24
    3896:	91 83       	std	Z+1, r25	; 0x01
    3898:	a2 83       	std	Z+2, r26	; 0x02
    389a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    389c:	fe 01       	movw	r30, r28
    389e:	e3 5b       	subi	r30, 0xB3	; 179
    38a0:	ff 4f       	sbci	r31, 0xFF	; 255
    38a2:	60 81       	ld	r22, Z
    38a4:	71 81       	ldd	r23, Z+1	; 0x01
    38a6:	82 81       	ldd	r24, Z+2	; 0x02
    38a8:	93 81       	ldd	r25, Z+3	; 0x03
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	40 e8       	ldi	r20, 0x80	; 128
    38b0:	5f e3       	ldi	r21, 0x3F	; 63
    38b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38b6:	88 23       	and	r24, r24
    38b8:	44 f4       	brge	.+16     	; 0x38ca <main+0x178>
		__ticks = 1;
    38ba:	fe 01       	movw	r30, r28
    38bc:	e5 5b       	subi	r30, 0xB5	; 181
    38be:	ff 4f       	sbci	r31, 0xFF	; 255
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	91 83       	std	Z+1, r25	; 0x01
    38c6:	80 83       	st	Z, r24
    38c8:	64 c0       	rjmp	.+200    	; 0x3992 <main+0x240>
	else if (__tmp > 65535)
    38ca:	fe 01       	movw	r30, r28
    38cc:	e3 5b       	subi	r30, 0xB3	; 179
    38ce:	ff 4f       	sbci	r31, 0xFF	; 255
    38d0:	60 81       	ld	r22, Z
    38d2:	71 81       	ldd	r23, Z+1	; 0x01
    38d4:	82 81       	ldd	r24, Z+2	; 0x02
    38d6:	93 81       	ldd	r25, Z+3	; 0x03
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	3f ef       	ldi	r19, 0xFF	; 255
    38dc:	4f e7       	ldi	r20, 0x7F	; 127
    38de:	57 e4       	ldi	r21, 0x47	; 71
    38e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38e4:	18 16       	cp	r1, r24
    38e6:	0c f0       	brlt	.+2      	; 0x38ea <main+0x198>
    38e8:	43 c0       	rjmp	.+134    	; 0x3970 <main+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ea:	fe 01       	movw	r30, r28
    38ec:	ef 5a       	subi	r30, 0xAF	; 175
    38ee:	ff 4f       	sbci	r31, 0xFF	; 255
    38f0:	60 81       	ld	r22, Z
    38f2:	71 81       	ldd	r23, Z+1	; 0x01
    38f4:	82 81       	ldd	r24, Z+2	; 0x02
    38f6:	93 81       	ldd	r25, Z+3	; 0x03
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	40 e2       	ldi	r20, 0x20	; 32
    38fe:	51 e4       	ldi	r21, 0x41	; 65
    3900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3904:	dc 01       	movw	r26, r24
    3906:	cb 01       	movw	r24, r22
    3908:	8e 01       	movw	r16, r28
    390a:	05 5b       	subi	r16, 0xB5	; 181
    390c:	1f 4f       	sbci	r17, 0xFF	; 255
    390e:	bc 01       	movw	r22, r24
    3910:	cd 01       	movw	r24, r26
    3912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	f8 01       	movw	r30, r16
    391c:	91 83       	std	Z+1, r25	; 0x01
    391e:	80 83       	st	Z, r24
    3920:	1f c0       	rjmp	.+62     	; 0x3960 <main+0x20e>
    3922:	fe 01       	movw	r30, r28
    3924:	e7 5b       	subi	r30, 0xB7	; 183
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	88 ec       	ldi	r24, 0xC8	; 200
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	91 83       	std	Z+1, r25	; 0x01
    392e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3930:	fe 01       	movw	r30, r28
    3932:	e7 5b       	subi	r30, 0xB7	; 183
    3934:	ff 4f       	sbci	r31, 0xFF	; 255
    3936:	80 81       	ld	r24, Z
    3938:	91 81       	ldd	r25, Z+1	; 0x01
    393a:	01 97       	sbiw	r24, 0x01	; 1
    393c:	f1 f7       	brne	.-4      	; 0x393a <main+0x1e8>
    393e:	fe 01       	movw	r30, r28
    3940:	e7 5b       	subi	r30, 0xB7	; 183
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	91 83       	std	Z+1, r25	; 0x01
    3946:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3948:	de 01       	movw	r26, r28
    394a:	a5 5b       	subi	r26, 0xB5	; 181
    394c:	bf 4f       	sbci	r27, 0xFF	; 255
    394e:	fe 01       	movw	r30, r28
    3950:	e5 5b       	subi	r30, 0xB5	; 181
    3952:	ff 4f       	sbci	r31, 0xFF	; 255
    3954:	80 81       	ld	r24, Z
    3956:	91 81       	ldd	r25, Z+1	; 0x01
    3958:	01 97       	sbiw	r24, 0x01	; 1
    395a:	11 96       	adiw	r26, 0x01	; 1
    395c:	9c 93       	st	X, r25
    395e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3960:	fe 01       	movw	r30, r28
    3962:	e5 5b       	subi	r30, 0xB5	; 181
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	80 81       	ld	r24, Z
    3968:	91 81       	ldd	r25, Z+1	; 0x01
    396a:	00 97       	sbiw	r24, 0x00	; 0
    396c:	d1 f6       	brne	.-76     	; 0x3922 <main+0x1d0>
    396e:	27 c0       	rjmp	.+78     	; 0x39be <main+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3970:	8e 01       	movw	r16, r28
    3972:	05 5b       	subi	r16, 0xB5	; 181
    3974:	1f 4f       	sbci	r17, 0xFF	; 255
    3976:	fe 01       	movw	r30, r28
    3978:	e3 5b       	subi	r30, 0xB3	; 179
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	60 81       	ld	r22, Z
    397e:	71 81       	ldd	r23, Z+1	; 0x01
    3980:	82 81       	ldd	r24, Z+2	; 0x02
    3982:	93 81       	ldd	r25, Z+3	; 0x03
    3984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	f8 01       	movw	r30, r16
    398e:	91 83       	std	Z+1, r25	; 0x01
    3990:	80 83       	st	Z, r24
    3992:	de 01       	movw	r26, r28
    3994:	a9 5b       	subi	r26, 0xB9	; 185
    3996:	bf 4f       	sbci	r27, 0xFF	; 255
    3998:	fe 01       	movw	r30, r28
    399a:	e5 5b       	subi	r30, 0xB5	; 181
    399c:	ff 4f       	sbci	r31, 0xFF	; 255
    399e:	80 81       	ld	r24, Z
    39a0:	91 81       	ldd	r25, Z+1	; 0x01
    39a2:	8d 93       	st	X+, r24
    39a4:	9c 93       	st	X, r25
    39a6:	fe 01       	movw	r30, r28
    39a8:	e9 5b       	subi	r30, 0xB9	; 185
    39aa:	ff 4f       	sbci	r31, 0xFF	; 255
    39ac:	80 81       	ld	r24, Z
    39ae:	91 81       	ldd	r25, Z+1	; 0x01
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	f1 f7       	brne	.-4      	; 0x39b0 <main+0x25e>
    39b4:	fe 01       	movw	r30, r28
    39b6:	e9 5b       	subi	r30, 0xB9	; 185
    39b8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ba:	91 83       	std	Z+1, r25	; 0x01
    39bc:	80 83       	st	Z, r24
		_delay_ms(10);
		DIO_SetPinValue(_7SegControlPORT,S0,LOW);
    39be:	80 e0       	ldi	r24, 0x00	; 0
    39c0:	60 e0       	ldi	r22, 0x00	; 0
    39c2:	40 e0       	ldi	r20, 0x00	; 0
    39c4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
		_7SEG_Display(PORTC,seconds/10);
    39c8:	80 91 84 00 	lds	r24, 0x0084
    39cc:	9a e0       	ldi	r25, 0x0A	; 10
    39ce:	69 2f       	mov	r22, r25
    39d0:	0e 94 28 20 	call	0x4050	; 0x4050 <__udivmodqi4>
    39d4:	98 2f       	mov	r25, r24
    39d6:	82 e0       	ldi	r24, 0x02	; 2
    39d8:	69 2f       	mov	r22, r25
    39da:	0e 94 86 1b 	call	0x370c	; 0x370c <_7SEG_Display>
		DIO_SetPinValue(_7SegControlPORT,S1,HIGH);
    39de:	80 e0       	ldi	r24, 0x00	; 0
    39e0:	61 e0       	ldi	r22, 0x01	; 1
    39e2:	41 e0       	ldi	r20, 0x01	; 1
    39e4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
    39e8:	fe 01       	movw	r30, r28
    39ea:	ed 5b       	subi	r30, 0xBD	; 189
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	80 e0       	ldi	r24, 0x00	; 0
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	a0 e2       	ldi	r26, 0x20	; 32
    39f4:	b1 e4       	ldi	r27, 0x41	; 65
    39f6:	80 83       	st	Z, r24
    39f8:	91 83       	std	Z+1, r25	; 0x01
    39fa:	a2 83       	std	Z+2, r26	; 0x02
    39fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39fe:	8e 01       	movw	r16, r28
    3a00:	01 5c       	subi	r16, 0xC1	; 193
    3a02:	1f 4f       	sbci	r17, 0xFF	; 255
    3a04:	fe 01       	movw	r30, r28
    3a06:	ed 5b       	subi	r30, 0xBD	; 189
    3a08:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0a:	60 81       	ld	r22, Z
    3a0c:	71 81       	ldd	r23, Z+1	; 0x01
    3a0e:	82 81       	ldd	r24, Z+2	; 0x02
    3a10:	93 81       	ldd	r25, Z+3	; 0x03
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	4a ef       	ldi	r20, 0xFA	; 250
    3a18:	54 e4       	ldi	r21, 0x44	; 68
    3a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	f8 01       	movw	r30, r16
    3a24:	80 83       	st	Z, r24
    3a26:	91 83       	std	Z+1, r25	; 0x01
    3a28:	a2 83       	std	Z+2, r26	; 0x02
    3a2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	ff 96       	adiw	r30, 0x3f	; 63
    3a30:	60 81       	ld	r22, Z
    3a32:	71 81       	ldd	r23, Z+1	; 0x01
    3a34:	82 81       	ldd	r24, Z+2	; 0x02
    3a36:	93 81       	ldd	r25, Z+3	; 0x03
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	40 e8       	ldi	r20, 0x80	; 128
    3a3e:	5f e3       	ldi	r21, 0x3F	; 63
    3a40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a44:	88 23       	and	r24, r24
    3a46:	2c f4       	brge	.+10     	; 0x3a52 <main+0x300>
		__ticks = 1;
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	9e af       	std	Y+62, r25	; 0x3e
    3a4e:	8d af       	std	Y+61, r24	; 0x3d
    3a50:	46 c0       	rjmp	.+140    	; 0x3ade <main+0x38c>
	else if (__tmp > 65535)
    3a52:	fe 01       	movw	r30, r28
    3a54:	ff 96       	adiw	r30, 0x3f	; 63
    3a56:	60 81       	ld	r22, Z
    3a58:	71 81       	ldd	r23, Z+1	; 0x01
    3a5a:	82 81       	ldd	r24, Z+2	; 0x02
    3a5c:	93 81       	ldd	r25, Z+3	; 0x03
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	3f ef       	ldi	r19, 0xFF	; 255
    3a62:	4f e7       	ldi	r20, 0x7F	; 127
    3a64:	57 e4       	ldi	r21, 0x47	; 71
    3a66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a6a:	18 16       	cp	r1, r24
    3a6c:	64 f5       	brge	.+88     	; 0x3ac6 <main+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a6e:	fe 01       	movw	r30, r28
    3a70:	ed 5b       	subi	r30, 0xBD	; 189
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	60 81       	ld	r22, Z
    3a76:	71 81       	ldd	r23, Z+1	; 0x01
    3a78:	82 81       	ldd	r24, Z+2	; 0x02
    3a7a:	93 81       	ldd	r25, Z+3	; 0x03
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	40 e2       	ldi	r20, 0x20	; 32
    3a82:	51 e4       	ldi	r21, 0x41	; 65
    3a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	bc 01       	movw	r22, r24
    3a8e:	cd 01       	movw	r24, r26
    3a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	9e af       	std	Y+62, r25	; 0x3e
    3a9a:	8d af       	std	Y+61, r24	; 0x3d
    3a9c:	0f c0       	rjmp	.+30     	; 0x3abc <main+0x36a>
    3a9e:	88 ec       	ldi	r24, 0xC8	; 200
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	9c af       	std	Y+60, r25	; 0x3c
    3aa4:	8b af       	std	Y+59, r24	; 0x3b
    3aa6:	8b ad       	ldd	r24, Y+59	; 0x3b
    3aa8:	9c ad       	ldd	r25, Y+60	; 0x3c
    3aaa:	01 97       	sbiw	r24, 0x01	; 1
    3aac:	f1 f7       	brne	.-4      	; 0x3aaa <main+0x358>
    3aae:	9c af       	std	Y+60, r25	; 0x3c
    3ab0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ab4:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	9e af       	std	Y+62, r25	; 0x3e
    3aba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3abc:	8d ad       	ldd	r24, Y+61	; 0x3d
    3abe:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ac0:	00 97       	sbiw	r24, 0x00	; 0
    3ac2:	69 f7       	brne	.-38     	; 0x3a9e <main+0x34c>
    3ac4:	16 c0       	rjmp	.+44     	; 0x3af2 <main+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	ff 96       	adiw	r30, 0x3f	; 63
    3aca:	60 81       	ld	r22, Z
    3acc:	71 81       	ldd	r23, Z+1	; 0x01
    3ace:	82 81       	ldd	r24, Z+2	; 0x02
    3ad0:	93 81       	ldd	r25, Z+3	; 0x03
    3ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	cb 01       	movw	r24, r22
    3ada:	9e af       	std	Y+62, r25	; 0x3e
    3adc:	8d af       	std	Y+61, r24	; 0x3d
    3ade:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ae0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ae2:	9a af       	std	Y+58, r25	; 0x3a
    3ae4:	89 af       	std	Y+57, r24	; 0x39
    3ae6:	89 ad       	ldd	r24, Y+57	; 0x39
    3ae8:	9a ad       	ldd	r25, Y+58	; 0x3a
    3aea:	01 97       	sbiw	r24, 0x01	; 1
    3aec:	f1 f7       	brne	.-4      	; 0x3aea <main+0x398>
    3aee:	9a af       	std	Y+58, r25	; 0x3a
    3af0:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(10);
		DIO_SetPinValue(_7SegControlPORT,S1,LOW);
    3af2:	80 e0       	ldi	r24, 0x00	; 0
    3af4:	61 e0       	ldi	r22, 0x01	; 1
    3af6:	40 e0       	ldi	r20, 0x00	; 0
    3af8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
		_7SEG_Display(PORTC,minutes%10);
    3afc:	80 91 85 00 	lds	r24, 0x0085
    3b00:	9a e0       	ldi	r25, 0x0A	; 10
    3b02:	69 2f       	mov	r22, r25
    3b04:	0e 94 28 20 	call	0x4050	; 0x4050 <__udivmodqi4>
    3b08:	89 2f       	mov	r24, r25
    3b0a:	98 2f       	mov	r25, r24
    3b0c:	82 e0       	ldi	r24, 0x02	; 2
    3b0e:	69 2f       	mov	r22, r25
    3b10:	0e 94 86 1b 	call	0x370c	; 0x370c <_7SEG_Display>
		DIO_SetPinValue(_7SegControlPORT,M0,HIGH);
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	62 e0       	ldi	r22, 0x02	; 2
    3b18:	41 e0       	ldi	r20, 0x01	; 1
    3b1a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	a0 e2       	ldi	r26, 0x20	; 32
    3b24:	b1 e4       	ldi	r27, 0x41	; 65
    3b26:	8d ab       	std	Y+53, r24	; 0x35
    3b28:	9e ab       	std	Y+54, r25	; 0x36
    3b2a:	af ab       	std	Y+55, r26	; 0x37
    3b2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b2e:	6d a9       	ldd	r22, Y+53	; 0x35
    3b30:	7e a9       	ldd	r23, Y+54	; 0x36
    3b32:	8f a9       	ldd	r24, Y+55	; 0x37
    3b34:	98 ad       	ldd	r25, Y+56	; 0x38
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	4a ef       	ldi	r20, 0xFA	; 250
    3b3c:	54 e4       	ldi	r21, 0x44	; 68
    3b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b42:	dc 01       	movw	r26, r24
    3b44:	cb 01       	movw	r24, r22
    3b46:	89 ab       	std	Y+49, r24	; 0x31
    3b48:	9a ab       	std	Y+50, r25	; 0x32
    3b4a:	ab ab       	std	Y+51, r26	; 0x33
    3b4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b4e:	69 a9       	ldd	r22, Y+49	; 0x31
    3b50:	7a a9       	ldd	r23, Y+50	; 0x32
    3b52:	8b a9       	ldd	r24, Y+51	; 0x33
    3b54:	9c a9       	ldd	r25, Y+52	; 0x34
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 e0       	ldi	r19, 0x00	; 0
    3b5a:	40 e8       	ldi	r20, 0x80	; 128
    3b5c:	5f e3       	ldi	r21, 0x3F	; 63
    3b5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b62:	88 23       	and	r24, r24
    3b64:	2c f4       	brge	.+10     	; 0x3b70 <main+0x41e>
		__ticks = 1;
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	98 ab       	std	Y+48, r25	; 0x30
    3b6c:	8f a7       	std	Y+47, r24	; 0x2f
    3b6e:	3f c0       	rjmp	.+126    	; 0x3bee <main+0x49c>
	else if (__tmp > 65535)
    3b70:	69 a9       	ldd	r22, Y+49	; 0x31
    3b72:	7a a9       	ldd	r23, Y+50	; 0x32
    3b74:	8b a9       	ldd	r24, Y+51	; 0x33
    3b76:	9c a9       	ldd	r25, Y+52	; 0x34
    3b78:	20 e0       	ldi	r18, 0x00	; 0
    3b7a:	3f ef       	ldi	r19, 0xFF	; 255
    3b7c:	4f e7       	ldi	r20, 0x7F	; 127
    3b7e:	57 e4       	ldi	r21, 0x47	; 71
    3b80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b84:	18 16       	cp	r1, r24
    3b86:	4c f5       	brge	.+82     	; 0x3bda <main+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b88:	6d a9       	ldd	r22, Y+53	; 0x35
    3b8a:	7e a9       	ldd	r23, Y+54	; 0x36
    3b8c:	8f a9       	ldd	r24, Y+55	; 0x37
    3b8e:	98 ad       	ldd	r25, Y+56	; 0x38
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	40 e2       	ldi	r20, 0x20	; 32
    3b96:	51 e4       	ldi	r21, 0x41	; 65
    3b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	bc 01       	movw	r22, r24
    3ba2:	cd 01       	movw	r24, r26
    3ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba8:	dc 01       	movw	r26, r24
    3baa:	cb 01       	movw	r24, r22
    3bac:	98 ab       	std	Y+48, r25	; 0x30
    3bae:	8f a7       	std	Y+47, r24	; 0x2f
    3bb0:	0f c0       	rjmp	.+30     	; 0x3bd0 <main+0x47e>
    3bb2:	88 ec       	ldi	r24, 0xC8	; 200
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	9e a7       	std	Y+46, r25	; 0x2e
    3bb8:	8d a7       	std	Y+45, r24	; 0x2d
    3bba:	8d a5       	ldd	r24, Y+45	; 0x2d
    3bbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    3bbe:	01 97       	sbiw	r24, 0x01	; 1
    3bc0:	f1 f7       	brne	.-4      	; 0x3bbe <main+0x46c>
    3bc2:	9e a7       	std	Y+46, r25	; 0x2e
    3bc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bc8:	98 a9       	ldd	r25, Y+48	; 0x30
    3bca:	01 97       	sbiw	r24, 0x01	; 1
    3bcc:	98 ab       	std	Y+48, r25	; 0x30
    3bce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bd2:	98 a9       	ldd	r25, Y+48	; 0x30
    3bd4:	00 97       	sbiw	r24, 0x00	; 0
    3bd6:	69 f7       	brne	.-38     	; 0x3bb2 <main+0x460>
    3bd8:	14 c0       	rjmp	.+40     	; 0x3c02 <main+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bda:	69 a9       	ldd	r22, Y+49	; 0x31
    3bdc:	7a a9       	ldd	r23, Y+50	; 0x32
    3bde:	8b a9       	ldd	r24, Y+51	; 0x33
    3be0:	9c a9       	ldd	r25, Y+52	; 0x34
    3be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	98 ab       	std	Y+48, r25	; 0x30
    3bec:	8f a7       	std	Y+47, r24	; 0x2f
    3bee:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bf0:	98 a9       	ldd	r25, Y+48	; 0x30
    3bf2:	9c a7       	std	Y+44, r25	; 0x2c
    3bf4:	8b a7       	std	Y+43, r24	; 0x2b
    3bf6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bf8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bfa:	01 97       	sbiw	r24, 0x01	; 1
    3bfc:	f1 f7       	brne	.-4      	; 0x3bfa <main+0x4a8>
    3bfe:	9c a7       	std	Y+44, r25	; 0x2c
    3c00:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		DIO_SetPinValue(_7SegControlPORT,M0,LOW);
    3c02:	80 e0       	ldi	r24, 0x00	; 0
    3c04:	62 e0       	ldi	r22, 0x02	; 2
    3c06:	40 e0       	ldi	r20, 0x00	; 0
    3c08:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
		_7SEG_Display(PORTC,minutes/10);
    3c0c:	80 91 85 00 	lds	r24, 0x0085
    3c10:	9a e0       	ldi	r25, 0x0A	; 10
    3c12:	69 2f       	mov	r22, r25
    3c14:	0e 94 28 20 	call	0x4050	; 0x4050 <__udivmodqi4>
    3c18:	98 2f       	mov	r25, r24
    3c1a:	82 e0       	ldi	r24, 0x02	; 2
    3c1c:	69 2f       	mov	r22, r25
    3c1e:	0e 94 86 1b 	call	0x370c	; 0x370c <_7SEG_Display>
		DIO_SetPinValue(_7SegControlPORT,M1,HIGH);
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	63 e0       	ldi	r22, 0x03	; 3
    3c26:	41 e0       	ldi	r20, 0x01	; 1
    3c28:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	a0 e2       	ldi	r26, 0x20	; 32
    3c32:	b1 e4       	ldi	r27, 0x41	; 65
    3c34:	8f a3       	std	Y+39, r24	; 0x27
    3c36:	98 a7       	std	Y+40, r25	; 0x28
    3c38:	a9 a7       	std	Y+41, r26	; 0x29
    3c3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c3c:	6f a1       	ldd	r22, Y+39	; 0x27
    3c3e:	78 a5       	ldd	r23, Y+40	; 0x28
    3c40:	89 a5       	ldd	r24, Y+41	; 0x29
    3c42:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	4a ef       	ldi	r20, 0xFA	; 250
    3c4a:	54 e4       	ldi	r21, 0x44	; 68
    3c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	8b a3       	std	Y+35, r24	; 0x23
    3c56:	9c a3       	std	Y+36, r25	; 0x24
    3c58:	ad a3       	std	Y+37, r26	; 0x25
    3c5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c5c:	6b a1       	ldd	r22, Y+35	; 0x23
    3c5e:	7c a1       	ldd	r23, Y+36	; 0x24
    3c60:	8d a1       	ldd	r24, Y+37	; 0x25
    3c62:	9e a1       	ldd	r25, Y+38	; 0x26
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	40 e8       	ldi	r20, 0x80	; 128
    3c6a:	5f e3       	ldi	r21, 0x3F	; 63
    3c6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c70:	88 23       	and	r24, r24
    3c72:	2c f4       	brge	.+10     	; 0x3c7e <main+0x52c>
		__ticks = 1;
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	9a a3       	std	Y+34, r25	; 0x22
    3c7a:	89 a3       	std	Y+33, r24	; 0x21
    3c7c:	3f c0       	rjmp	.+126    	; 0x3cfc <main+0x5aa>
	else if (__tmp > 65535)
    3c7e:	6b a1       	ldd	r22, Y+35	; 0x23
    3c80:	7c a1       	ldd	r23, Y+36	; 0x24
    3c82:	8d a1       	ldd	r24, Y+37	; 0x25
    3c84:	9e a1       	ldd	r25, Y+38	; 0x26
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	3f ef       	ldi	r19, 0xFF	; 255
    3c8a:	4f e7       	ldi	r20, 0x7F	; 127
    3c8c:	57 e4       	ldi	r21, 0x47	; 71
    3c8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c92:	18 16       	cp	r1, r24
    3c94:	4c f5       	brge	.+82     	; 0x3ce8 <main+0x596>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c96:	6f a1       	ldd	r22, Y+39	; 0x27
    3c98:	78 a5       	ldd	r23, Y+40	; 0x28
    3c9a:	89 a5       	ldd	r24, Y+41	; 0x29
    3c9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	40 e2       	ldi	r20, 0x20	; 32
    3ca4:	51 e4       	ldi	r21, 0x41	; 65
    3ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	bc 01       	movw	r22, r24
    3cb0:	cd 01       	movw	r24, r26
    3cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	cb 01       	movw	r24, r22
    3cba:	9a a3       	std	Y+34, r25	; 0x22
    3cbc:	89 a3       	std	Y+33, r24	; 0x21
    3cbe:	0f c0       	rjmp	.+30     	; 0x3cde <main+0x58c>
    3cc0:	88 ec       	ldi	r24, 0xC8	; 200
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	98 a3       	std	Y+32, r25	; 0x20
    3cc6:	8f 8f       	std	Y+31, r24	; 0x1f
    3cc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3cca:	98 a1       	ldd	r25, Y+32	; 0x20
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <main+0x57a>
    3cd0:	98 a3       	std	Y+32, r25	; 0x20
    3cd2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd4:	89 a1       	ldd	r24, Y+33	; 0x21
    3cd6:	9a a1       	ldd	r25, Y+34	; 0x22
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	9a a3       	std	Y+34, r25	; 0x22
    3cdc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cde:	89 a1       	ldd	r24, Y+33	; 0x21
    3ce0:	9a a1       	ldd	r25, Y+34	; 0x22
    3ce2:	00 97       	sbiw	r24, 0x00	; 0
    3ce4:	69 f7       	brne	.-38     	; 0x3cc0 <main+0x56e>
    3ce6:	14 c0       	rjmp	.+40     	; 0x3d10 <main+0x5be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce8:	6b a1       	ldd	r22, Y+35	; 0x23
    3cea:	7c a1       	ldd	r23, Y+36	; 0x24
    3cec:	8d a1       	ldd	r24, Y+37	; 0x25
    3cee:	9e a1       	ldd	r25, Y+38	; 0x26
    3cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	9a a3       	std	Y+34, r25	; 0x22
    3cfa:	89 a3       	std	Y+33, r24	; 0x21
    3cfc:	89 a1       	ldd	r24, Y+33	; 0x21
    3cfe:	9a a1       	ldd	r25, Y+34	; 0x22
    3d00:	9e 8f       	std	Y+30, r25	; 0x1e
    3d02:	8d 8f       	std	Y+29, r24	; 0x1d
    3d04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	f1 f7       	brne	.-4      	; 0x3d08 <main+0x5b6>
    3d0c:	9e 8f       	std	Y+30, r25	; 0x1e
    3d0e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_SetPinValue(_7SegControlPORT,M1,LOW);
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	63 e0       	ldi	r22, 0x03	; 3
    3d14:	40 e0       	ldi	r20, 0x00	; 0
    3d16:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
		_7SEG_Display(PORTC,hours%10);
    3d1a:	80 91 86 00 	lds	r24, 0x0086
    3d1e:	9a e0       	ldi	r25, 0x0A	; 10
    3d20:	69 2f       	mov	r22, r25
    3d22:	0e 94 28 20 	call	0x4050	; 0x4050 <__udivmodqi4>
    3d26:	89 2f       	mov	r24, r25
    3d28:	98 2f       	mov	r25, r24
    3d2a:	82 e0       	ldi	r24, 0x02	; 2
    3d2c:	69 2f       	mov	r22, r25
    3d2e:	0e 94 86 1b 	call	0x370c	; 0x370c <_7SEG_Display>
		DIO_SetPinValue(_7SegControlPORT,H0,HIGH);
    3d32:	80 e0       	ldi	r24, 0x00	; 0
    3d34:	64 e0       	ldi	r22, 0x04	; 4
    3d36:	41 e0       	ldi	r20, 0x01	; 1
    3d38:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
    3d3c:	80 e0       	ldi	r24, 0x00	; 0
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	a0 e2       	ldi	r26, 0x20	; 32
    3d42:	b1 e4       	ldi	r27, 0x41	; 65
    3d44:	89 8f       	std	Y+25, r24	; 0x19
    3d46:	9a 8f       	std	Y+26, r25	; 0x1a
    3d48:	ab 8f       	std	Y+27, r26	; 0x1b
    3d4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d4c:	69 8d       	ldd	r22, Y+25	; 0x19
    3d4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	4a ef       	ldi	r20, 0xFA	; 250
    3d5a:	54 e4       	ldi	r21, 0x44	; 68
    3d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	8d 8b       	std	Y+21, r24	; 0x15
    3d66:	9e 8b       	std	Y+22, r25	; 0x16
    3d68:	af 8b       	std	Y+23, r26	; 0x17
    3d6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d6c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d6e:	7e 89       	ldd	r23, Y+22	; 0x16
    3d70:	8f 89       	ldd	r24, Y+23	; 0x17
    3d72:	98 8d       	ldd	r25, Y+24	; 0x18
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	30 e0       	ldi	r19, 0x00	; 0
    3d78:	40 e8       	ldi	r20, 0x80	; 128
    3d7a:	5f e3       	ldi	r21, 0x3F	; 63
    3d7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d80:	88 23       	and	r24, r24
    3d82:	2c f4       	brge	.+10     	; 0x3d8e <main+0x63c>
		__ticks = 1;
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	9c 8b       	std	Y+20, r25	; 0x14
    3d8a:	8b 8b       	std	Y+19, r24	; 0x13
    3d8c:	3f c0       	rjmp	.+126    	; 0x3e0c <main+0x6ba>
	else if (__tmp > 65535)
    3d8e:	6d 89       	ldd	r22, Y+21	; 0x15
    3d90:	7e 89       	ldd	r23, Y+22	; 0x16
    3d92:	8f 89       	ldd	r24, Y+23	; 0x17
    3d94:	98 8d       	ldd	r25, Y+24	; 0x18
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	3f ef       	ldi	r19, 0xFF	; 255
    3d9a:	4f e7       	ldi	r20, 0x7F	; 127
    3d9c:	57 e4       	ldi	r21, 0x47	; 71
    3d9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3da2:	18 16       	cp	r1, r24
    3da4:	4c f5       	brge	.+82     	; 0x3df8 <main+0x6a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3da6:	69 8d       	ldd	r22, Y+25	; 0x19
    3da8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3daa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	40 e2       	ldi	r20, 0x20	; 32
    3db4:	51 e4       	ldi	r21, 0x41	; 65
    3db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	bc 01       	movw	r22, r24
    3dc0:	cd 01       	movw	r24, r26
    3dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	cb 01       	movw	r24, r22
    3dca:	9c 8b       	std	Y+20, r25	; 0x14
    3dcc:	8b 8b       	std	Y+19, r24	; 0x13
    3dce:	0f c0       	rjmp	.+30     	; 0x3dee <main+0x69c>
    3dd0:	88 ec       	ldi	r24, 0xC8	; 200
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	9a 8b       	std	Y+18, r25	; 0x12
    3dd6:	89 8b       	std	Y+17, r24	; 0x11
    3dd8:	89 89       	ldd	r24, Y+17	; 0x11
    3dda:	9a 89       	ldd	r25, Y+18	; 0x12
    3ddc:	01 97       	sbiw	r24, 0x01	; 1
    3dde:	f1 f7       	brne	.-4      	; 0x3ddc <main+0x68a>
    3de0:	9a 8b       	std	Y+18, r25	; 0x12
    3de2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3de4:	8b 89       	ldd	r24, Y+19	; 0x13
    3de6:	9c 89       	ldd	r25, Y+20	; 0x14
    3de8:	01 97       	sbiw	r24, 0x01	; 1
    3dea:	9c 8b       	std	Y+20, r25	; 0x14
    3dec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dee:	8b 89       	ldd	r24, Y+19	; 0x13
    3df0:	9c 89       	ldd	r25, Y+20	; 0x14
    3df2:	00 97       	sbiw	r24, 0x00	; 0
    3df4:	69 f7       	brne	.-38     	; 0x3dd0 <main+0x67e>
    3df6:	14 c0       	rjmp	.+40     	; 0x3e20 <main+0x6ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3df8:	6d 89       	ldd	r22, Y+21	; 0x15
    3dfa:	7e 89       	ldd	r23, Y+22	; 0x16
    3dfc:	8f 89       	ldd	r24, Y+23	; 0x17
    3dfe:	98 8d       	ldd	r25, Y+24	; 0x18
    3e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e04:	dc 01       	movw	r26, r24
    3e06:	cb 01       	movw	r24, r22
    3e08:	9c 8b       	std	Y+20, r25	; 0x14
    3e0a:	8b 8b       	std	Y+19, r24	; 0x13
    3e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e10:	98 8b       	std	Y+16, r25	; 0x10
    3e12:	8f 87       	std	Y+15, r24	; 0x0f
    3e14:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e16:	98 89       	ldd	r25, Y+16	; 0x10
    3e18:	01 97       	sbiw	r24, 0x01	; 1
    3e1a:	f1 f7       	brne	.-4      	; 0x3e18 <main+0x6c6>
    3e1c:	98 8b       	std	Y+16, r25	; 0x10
    3e1e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_SetPinValue(_7SegControlPORT,H0,LOW);
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	64 e0       	ldi	r22, 0x04	; 4
    3e24:	40 e0       	ldi	r20, 0x00	; 0
    3e26:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
		_7SEG_Display(PORTC,hours/10);
    3e2a:	80 91 86 00 	lds	r24, 0x0086
    3e2e:	9a e0       	ldi	r25, 0x0A	; 10
    3e30:	69 2f       	mov	r22, r25
    3e32:	0e 94 28 20 	call	0x4050	; 0x4050 <__udivmodqi4>
    3e36:	98 2f       	mov	r25, r24
    3e38:	82 e0       	ldi	r24, 0x02	; 2
    3e3a:	69 2f       	mov	r22, r25
    3e3c:	0e 94 86 1b 	call	0x370c	; 0x370c <_7SEG_Display>
		DIO_SetPinValue(_7SegControlPORT,H1,HIGH);
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	65 e0       	ldi	r22, 0x05	; 5
    3e44:	41 e0       	ldi	r20, 0x01	; 1
    3e46:	0e 94 65 0c 	call	0x18ca	; 0x18ca <DIO_SetPinValue>
    3e4a:	80 e0       	ldi	r24, 0x00	; 0
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	a0 e2       	ldi	r26, 0x20	; 32
    3e50:	b1 e4       	ldi	r27, 0x41	; 65
    3e52:	8b 87       	std	Y+11, r24	; 0x0b
    3e54:	9c 87       	std	Y+12, r25	; 0x0c
    3e56:	ad 87       	std	Y+13, r26	; 0x0d
    3e58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e60:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	4a ef       	ldi	r20, 0xFA	; 250
    3e68:	54 e4       	ldi	r21, 0x44	; 68
    3e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	8f 83       	std	Y+7, r24	; 0x07
    3e74:	98 87       	std	Y+8, r25	; 0x08
    3e76:	a9 87       	std	Y+9, r26	; 0x09
    3e78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e7c:	78 85       	ldd	r23, Y+8	; 0x08
    3e7e:	89 85       	ldd	r24, Y+9	; 0x09
    3e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	40 e8       	ldi	r20, 0x80	; 128
    3e88:	5f e3       	ldi	r21, 0x3F	; 63
    3e8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e8e:	88 23       	and	r24, r24
    3e90:	2c f4       	brge	.+10     	; 0x3e9c <main+0x74a>
		__ticks = 1;
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	9e 83       	std	Y+6, r25	; 0x06
    3e98:	8d 83       	std	Y+5, r24	; 0x05
    3e9a:	3f c0       	rjmp	.+126    	; 0x3f1a <main+0x7c8>
	else if (__tmp > 65535)
    3e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e9e:	78 85       	ldd	r23, Y+8	; 0x08
    3ea0:	89 85       	ldd	r24, Y+9	; 0x09
    3ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ea4:	20 e0       	ldi	r18, 0x00	; 0
    3ea6:	3f ef       	ldi	r19, 0xFF	; 255
    3ea8:	4f e7       	ldi	r20, 0x7F	; 127
    3eaa:	57 e4       	ldi	r21, 0x47	; 71
    3eac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eb0:	18 16       	cp	r1, r24
    3eb2:	4c f5       	brge	.+82     	; 0x3f06 <main+0x7b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	40 e2       	ldi	r20, 0x20	; 32
    3ec2:	51 e4       	ldi	r21, 0x41	; 65
    3ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	bc 01       	movw	r22, r24
    3ece:	cd 01       	movw	r24, r26
    3ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed4:	dc 01       	movw	r26, r24
    3ed6:	cb 01       	movw	r24, r22
    3ed8:	9e 83       	std	Y+6, r25	; 0x06
    3eda:	8d 83       	std	Y+5, r24	; 0x05
    3edc:	0f c0       	rjmp	.+30     	; 0x3efc <main+0x7aa>
    3ede:	88 ec       	ldi	r24, 0xC8	; 200
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	9c 83       	std	Y+4, r25	; 0x04
    3ee4:	8b 83       	std	Y+3, r24	; 0x03
    3ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eea:	01 97       	sbiw	r24, 0x01	; 1
    3eec:	f1 f7       	brne	.-4      	; 0x3eea <main+0x798>
    3eee:	9c 83       	std	Y+4, r25	; 0x04
    3ef0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef6:	01 97       	sbiw	r24, 0x01	; 1
    3ef8:	9e 83       	std	Y+6, r25	; 0x06
    3efa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3efc:	8d 81       	ldd	r24, Y+5	; 0x05
    3efe:	9e 81       	ldd	r25, Y+6	; 0x06
    3f00:	00 97       	sbiw	r24, 0x00	; 0
    3f02:	69 f7       	brne	.-38     	; 0x3ede <main+0x78c>
    3f04:	94 cc       	rjmp	.-1752   	; 0x382e <main+0xdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f06:	6f 81       	ldd	r22, Y+7	; 0x07
    3f08:	78 85       	ldd	r23, Y+8	; 0x08
    3f0a:	89 85       	ldd	r24, Y+9	; 0x09
    3f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f12:	dc 01       	movw	r26, r24
    3f14:	cb 01       	movw	r24, r22
    3f16:	9e 83       	std	Y+6, r25	; 0x06
    3f18:	8d 83       	std	Y+5, r24	; 0x05
    3f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f1e:	9a 83       	std	Y+2, r25	; 0x02
    3f20:	89 83       	std	Y+1, r24	; 0x01
    3f22:	89 81       	ldd	r24, Y+1	; 0x01
    3f24:	9a 81       	ldd	r25, Y+2	; 0x02
    3f26:	01 97       	sbiw	r24, 0x01	; 1
    3f28:	f1 f7       	brne	.-4      	; 0x3f26 <main+0x7d4>
    3f2a:	9a 83       	std	Y+2, r25	; 0x02
    3f2c:	89 83       	std	Y+1, r24	; 0x01
    3f2e:	7f cc       	rjmp	.-1794   	; 0x382e <main+0xdc>

00003f30 <TimerFunction>:
		_delay_ms(10);
	}
	return 0;
}

void TimerFunction(void){
    3f30:	df 93       	push	r29
    3f32:	cf 93       	push	r28
    3f34:	cd b7       	in	r28, 0x3d	; 61
    3f36:	de b7       	in	r29, 0x3e	; 62
	static u16 Counter = 0;
	Counter++;
    3f38:	80 91 82 00 	lds	r24, 0x0082
    3f3c:	90 91 83 00 	lds	r25, 0x0083
    3f40:	01 96       	adiw	r24, 0x01	; 1
    3f42:	90 93 83 00 	sts	0x0083, r25
    3f46:	80 93 82 00 	sts	0x0082, r24
	if(Counter == 4000){
    3f4a:	80 91 82 00 	lds	r24, 0x0082
    3f4e:	90 91 83 00 	lds	r25, 0x0083
    3f52:	2f e0       	ldi	r18, 0x0F	; 15
    3f54:	80 3a       	cpi	r24, 0xA0	; 160
    3f56:	92 07       	cpc	r25, r18
    3f58:	c1 f5       	brne	.+112    	; 0x3fca <TimerFunction+0x9a>
		if(seconds<59){
    3f5a:	80 91 84 00 	lds	r24, 0x0084
    3f5e:	8b 33       	cpi	r24, 0x3B	; 59
    3f60:	30 f4       	brcc	.+12     	; 0x3f6e <TimerFunction+0x3e>
			seconds++;
    3f62:	80 91 84 00 	lds	r24, 0x0084
    3f66:	8f 5f       	subi	r24, 0xFF	; 255
    3f68:	80 93 84 00 	sts	0x0084, r24
    3f6c:	2a c0       	rjmp	.+84     	; 0x3fc2 <TimerFunction+0x92>
		}
		else if(seconds == 59) {
    3f6e:	80 91 84 00 	lds	r24, 0x0084
    3f72:	8b 33       	cpi	r24, 0x3B	; 59
    3f74:	31 f5       	brne	.+76     	; 0x3fc2 <TimerFunction+0x92>
			seconds = 0;
    3f76:	10 92 84 00 	sts	0x0084, r1
			if(minutes <59){
    3f7a:	80 91 85 00 	lds	r24, 0x0085
    3f7e:	8b 33       	cpi	r24, 0x3B	; 59
    3f80:	30 f4       	brcc	.+12     	; 0x3f8e <TimerFunction+0x5e>
				minutes++;
    3f82:	80 91 85 00 	lds	r24, 0x0085
    3f86:	8f 5f       	subi	r24, 0xFF	; 255
    3f88:	80 93 85 00 	sts	0x0085, r24
    3f8c:	1a c0       	rjmp	.+52     	; 0x3fc2 <TimerFunction+0x92>
			}
			else if(minutes == 59){
    3f8e:	80 91 85 00 	lds	r24, 0x0085
    3f92:	8b 33       	cpi	r24, 0x3B	; 59
    3f94:	b1 f4       	brne	.+44     	; 0x3fc2 <TimerFunction+0x92>
				minutes = 0;
    3f96:	10 92 85 00 	sts	0x0085, r1
				if(hours < 23){
    3f9a:	80 91 86 00 	lds	r24, 0x0086
    3f9e:	87 31       	cpi	r24, 0x17	; 23
    3fa0:	30 f4       	brcc	.+12     	; 0x3fae <TimerFunction+0x7e>
					hours++;
    3fa2:	80 91 86 00 	lds	r24, 0x0086
    3fa6:	8f 5f       	subi	r24, 0xFF	; 255
    3fa8:	80 93 86 00 	sts	0x0086, r24
    3fac:	0a c0       	rjmp	.+20     	; 0x3fc2 <TimerFunction+0x92>
				}
				else if(hours == 23){
    3fae:	80 91 86 00 	lds	r24, 0x0086
    3fb2:	87 31       	cpi	r24, 0x17	; 23
    3fb4:	31 f4       	brne	.+12     	; 0x3fc2 <TimerFunction+0x92>
					seconds = 0;
    3fb6:	10 92 84 00 	sts	0x0084, r1
					minutes = 0;
    3fba:	10 92 85 00 	sts	0x0085, r1
					hours = 0;
    3fbe:	10 92 86 00 	sts	0x0086, r1

				}
			}
		}
		Counter = 0;
    3fc2:	10 92 83 00 	sts	0x0083, r1
    3fc6:	10 92 82 00 	sts	0x0082, r1
	}
}
    3fca:	cf 91       	pop	r28
    3fcc:	df 91       	pop	r29
    3fce:	08 95       	ret

00003fd0 <StartTimerISR>:
void StartTimerISR(void){
    3fd0:	df 93       	push	r29
    3fd2:	cf 93       	push	r28
    3fd4:	cd b7       	in	r28, 0x3d	; 61
    3fd6:	de b7       	in	r29, 0x3e	; 62
	seconds = 0;
    3fd8:	10 92 84 00 	sts	0x0084, r1
	minutes = 0;
    3fdc:	10 92 85 00 	sts	0x0085, r1
	hours = 0;
    3fe0:	10 92 86 00 	sts	0x0086, r1
	TMR0_CTCInterruptEnable();
    3fe4:	0e 94 46 07 	call	0xe8c	; 0xe8c <TMR0_CTCInterruptEnable>
}
    3fe8:	cf 91       	pop	r28
    3fea:	df 91       	pop	r29
    3fec:	08 95       	ret

00003fee <ResumeTimerISR>:
void ResumeTimerISR(void){
    3fee:	df 93       	push	r29
    3ff0:	cf 93       	push	r28
    3ff2:	cd b7       	in	r28, 0x3d	; 61
    3ff4:	de b7       	in	r29, 0x3e	; 62
	TMR0_CTCInterruptEnable();
    3ff6:	0e 94 46 07 	call	0xe8c	; 0xe8c <TMR0_CTCInterruptEnable>
}
    3ffa:	cf 91       	pop	r28
    3ffc:	df 91       	pop	r29
    3ffe:	08 95       	ret

00004000 <StopTimerISR>:
void StopTimerISR(void){
    4000:	df 93       	push	r29
    4002:	cf 93       	push	r28
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
	TMR0_CTCInterruptDisable();
    4008:	0e 94 55 07 	call	0xeaa	; 0xeaa <TMR0_CTCInterruptDisable>
}
    400c:	cf 91       	pop	r28
    400e:	df 91       	pop	r29
    4010:	08 95       	ret

00004012 <__mulsi3>:
    4012:	62 9f       	mul	r22, r18
    4014:	d0 01       	movw	r26, r0
    4016:	73 9f       	mul	r23, r19
    4018:	f0 01       	movw	r30, r0
    401a:	82 9f       	mul	r24, r18
    401c:	e0 0d       	add	r30, r0
    401e:	f1 1d       	adc	r31, r1
    4020:	64 9f       	mul	r22, r20
    4022:	e0 0d       	add	r30, r0
    4024:	f1 1d       	adc	r31, r1
    4026:	92 9f       	mul	r25, r18
    4028:	f0 0d       	add	r31, r0
    402a:	83 9f       	mul	r24, r19
    402c:	f0 0d       	add	r31, r0
    402e:	74 9f       	mul	r23, r20
    4030:	f0 0d       	add	r31, r0
    4032:	65 9f       	mul	r22, r21
    4034:	f0 0d       	add	r31, r0
    4036:	99 27       	eor	r25, r25
    4038:	72 9f       	mul	r23, r18
    403a:	b0 0d       	add	r27, r0
    403c:	e1 1d       	adc	r30, r1
    403e:	f9 1f       	adc	r31, r25
    4040:	63 9f       	mul	r22, r19
    4042:	b0 0d       	add	r27, r0
    4044:	e1 1d       	adc	r30, r1
    4046:	f9 1f       	adc	r31, r25
    4048:	bd 01       	movw	r22, r26
    404a:	cf 01       	movw	r24, r30
    404c:	11 24       	eor	r1, r1
    404e:	08 95       	ret

00004050 <__udivmodqi4>:
    4050:	99 1b       	sub	r25, r25
    4052:	79 e0       	ldi	r23, 0x09	; 9
    4054:	04 c0       	rjmp	.+8      	; 0x405e <__udivmodqi4_ep>

00004056 <__udivmodqi4_loop>:
    4056:	99 1f       	adc	r25, r25
    4058:	96 17       	cp	r25, r22
    405a:	08 f0       	brcs	.+2      	; 0x405e <__udivmodqi4_ep>
    405c:	96 1b       	sub	r25, r22

0000405e <__udivmodqi4_ep>:
    405e:	88 1f       	adc	r24, r24
    4060:	7a 95       	dec	r23
    4062:	c9 f7       	brne	.-14     	; 0x4056 <__udivmodqi4_loop>
    4064:	80 95       	com	r24
    4066:	08 95       	ret

00004068 <__divmodsi4>:
    4068:	97 fb       	bst	r25, 7
    406a:	09 2e       	mov	r0, r25
    406c:	05 26       	eor	r0, r21
    406e:	0e d0       	rcall	.+28     	; 0x408c <__divmodsi4_neg1>
    4070:	57 fd       	sbrc	r21, 7
    4072:	04 d0       	rcall	.+8      	; 0x407c <__divmodsi4_neg2>
    4074:	14 d0       	rcall	.+40     	; 0x409e <__udivmodsi4>
    4076:	0a d0       	rcall	.+20     	; 0x408c <__divmodsi4_neg1>
    4078:	00 1c       	adc	r0, r0
    407a:	38 f4       	brcc	.+14     	; 0x408a <__divmodsi4_exit>

0000407c <__divmodsi4_neg2>:
    407c:	50 95       	com	r21
    407e:	40 95       	com	r20
    4080:	30 95       	com	r19
    4082:	21 95       	neg	r18
    4084:	3f 4f       	sbci	r19, 0xFF	; 255
    4086:	4f 4f       	sbci	r20, 0xFF	; 255
    4088:	5f 4f       	sbci	r21, 0xFF	; 255

0000408a <__divmodsi4_exit>:
    408a:	08 95       	ret

0000408c <__divmodsi4_neg1>:
    408c:	f6 f7       	brtc	.-4      	; 0x408a <__divmodsi4_exit>
    408e:	90 95       	com	r25
    4090:	80 95       	com	r24
    4092:	70 95       	com	r23
    4094:	61 95       	neg	r22
    4096:	7f 4f       	sbci	r23, 0xFF	; 255
    4098:	8f 4f       	sbci	r24, 0xFF	; 255
    409a:	9f 4f       	sbci	r25, 0xFF	; 255
    409c:	08 95       	ret

0000409e <__udivmodsi4>:
    409e:	a1 e2       	ldi	r26, 0x21	; 33
    40a0:	1a 2e       	mov	r1, r26
    40a2:	aa 1b       	sub	r26, r26
    40a4:	bb 1b       	sub	r27, r27
    40a6:	fd 01       	movw	r30, r26
    40a8:	0d c0       	rjmp	.+26     	; 0x40c4 <__udivmodsi4_ep>

000040aa <__udivmodsi4_loop>:
    40aa:	aa 1f       	adc	r26, r26
    40ac:	bb 1f       	adc	r27, r27
    40ae:	ee 1f       	adc	r30, r30
    40b0:	ff 1f       	adc	r31, r31
    40b2:	a2 17       	cp	r26, r18
    40b4:	b3 07       	cpc	r27, r19
    40b6:	e4 07       	cpc	r30, r20
    40b8:	f5 07       	cpc	r31, r21
    40ba:	20 f0       	brcs	.+8      	; 0x40c4 <__udivmodsi4_ep>
    40bc:	a2 1b       	sub	r26, r18
    40be:	b3 0b       	sbc	r27, r19
    40c0:	e4 0b       	sbc	r30, r20
    40c2:	f5 0b       	sbc	r31, r21

000040c4 <__udivmodsi4_ep>:
    40c4:	66 1f       	adc	r22, r22
    40c6:	77 1f       	adc	r23, r23
    40c8:	88 1f       	adc	r24, r24
    40ca:	99 1f       	adc	r25, r25
    40cc:	1a 94       	dec	r1
    40ce:	69 f7       	brne	.-38     	; 0x40aa <__udivmodsi4_loop>
    40d0:	60 95       	com	r22
    40d2:	70 95       	com	r23
    40d4:	80 95       	com	r24
    40d6:	90 95       	com	r25
    40d8:	9b 01       	movw	r18, r22
    40da:	ac 01       	movw	r20, r24
    40dc:	bd 01       	movw	r22, r26
    40de:	cf 01       	movw	r24, r30
    40e0:	08 95       	ret

000040e2 <__prologue_saves__>:
    40e2:	2f 92       	push	r2
    40e4:	3f 92       	push	r3
    40e6:	4f 92       	push	r4
    40e8:	5f 92       	push	r5
    40ea:	6f 92       	push	r6
    40ec:	7f 92       	push	r7
    40ee:	8f 92       	push	r8
    40f0:	9f 92       	push	r9
    40f2:	af 92       	push	r10
    40f4:	bf 92       	push	r11
    40f6:	cf 92       	push	r12
    40f8:	df 92       	push	r13
    40fa:	ef 92       	push	r14
    40fc:	ff 92       	push	r15
    40fe:	0f 93       	push	r16
    4100:	1f 93       	push	r17
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
    4106:	cd b7       	in	r28, 0x3d	; 61
    4108:	de b7       	in	r29, 0x3e	; 62
    410a:	ca 1b       	sub	r28, r26
    410c:	db 0b       	sbc	r29, r27
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	f8 94       	cli
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	0f be       	out	0x3f, r0	; 63
    4116:	cd bf       	out	0x3d, r28	; 61
    4118:	09 94       	ijmp

0000411a <__epilogue_restores__>:
    411a:	2a 88       	ldd	r2, Y+18	; 0x12
    411c:	39 88       	ldd	r3, Y+17	; 0x11
    411e:	48 88       	ldd	r4, Y+16	; 0x10
    4120:	5f 84       	ldd	r5, Y+15	; 0x0f
    4122:	6e 84       	ldd	r6, Y+14	; 0x0e
    4124:	7d 84       	ldd	r7, Y+13	; 0x0d
    4126:	8c 84       	ldd	r8, Y+12	; 0x0c
    4128:	9b 84       	ldd	r9, Y+11	; 0x0b
    412a:	aa 84       	ldd	r10, Y+10	; 0x0a
    412c:	b9 84       	ldd	r11, Y+9	; 0x09
    412e:	c8 84       	ldd	r12, Y+8	; 0x08
    4130:	df 80       	ldd	r13, Y+7	; 0x07
    4132:	ee 80       	ldd	r14, Y+6	; 0x06
    4134:	fd 80       	ldd	r15, Y+5	; 0x05
    4136:	0c 81       	ldd	r16, Y+4	; 0x04
    4138:	1b 81       	ldd	r17, Y+3	; 0x03
    413a:	aa 81       	ldd	r26, Y+2	; 0x02
    413c:	b9 81       	ldd	r27, Y+1	; 0x01
    413e:	ce 0f       	add	r28, r30
    4140:	d1 1d       	adc	r29, r1
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	f8 94       	cli
    4146:	de bf       	out	0x3e, r29	; 62
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	cd bf       	out	0x3d, r28	; 61
    414c:	ed 01       	movw	r28, r26
    414e:	08 95       	ret

00004150 <_exit>:
    4150:	f8 94       	cli

00004152 <__stop_program>:
    4152:	ff cf       	rjmp	.-2      	; 0x4152 <__stop_program>
